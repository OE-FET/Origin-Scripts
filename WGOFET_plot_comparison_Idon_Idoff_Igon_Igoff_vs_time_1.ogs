// This script is used on WG-OFETs and plots the comparison graphs of Idon, Idoff, Igon, Igoff and transfer curves vs time.
// Author: Dimitrios Simatos
// Version: 0.1
// Current status: Works well.
// Changes: 

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
	// Set variables for all loops
	
	int firstloop=1;
	int k = 0; // k is 0 if the "volume vs time graph" has NOT been plotted, and something else (usually 1) if it has been plotted.
		
		
	string Idonvstime$;
	string Idoffvstime$;
	string Igonvstime$;
	string Igoffvstime$;
	string Transfer$;
		
	
	// Parameters
	string Vd$="-1";
	string VgStart$="0";
	string VgStop$="-1";
	string Vd$="-1";
	string Rate$="40-ulmin";
	string CycleLength$="900";
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	string templatepath$="C:\Users\Administrator\Documents\OriginLab\2018\User Files\Templates\"; // define the template path

	doc -e LB { // loop over all workbooks in project
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		
		string sheetname$=page.longname$; // Get the name of worksheet
		
		int s = sheetname.Find("script"); // It will yield a value different than 0 if the filename contains "script".		
		int c = sheetname.Find("comparison"); // It will yield a value different than 0 if the filename contains "comparison".		
		//int i = sheetname.Find("Imax"); // It will yield a value different than 0 if the filename contains "Imax".
		int j = sheetname.Find("plunger"); // It will yield a value different than 0 if the filename contains "plunger".
		int p = sheetname.Find("Priming"); // It will yield a value different than 0 if the filename contains "Priming".
		
		if (p!=0 || s!=0 || c!=0) continue; // If the filename contains "Priming", "script", or "comparison" then just continue to the next workbook.
		//if (i==0 && j==0) continue; // If the filename does not contain "Imax" and does not contain "plunger", then just continue to the next workbook.
		if (j!=0 && k==1) continue; // If the filename contains "plunger" and the "volume vs time graph" has been plotted, then just continue to the next workbook.

		string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
		string architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
		string material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material

		string concentration$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
		string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
		string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units

		string solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content

		string annealing$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive

		string additive$ = sheetname.GetToken(7,"_")$; // Get the string that shows the additive
		string additivetype$ = additive.GetToken(1,"-")$; // Get the string that shows the additive type
		//string addthickness$ = additive.GetToken(2,"-")$; // Get the string that shows the additive thickness
		//string addthicknessunits$ = additive.GetToken(3,"-")$; // Get the string that shows the additive thickness units
		
		//string dielectric$ = sheetname.GetToken(7,"_")$; // Get the string that shows the dielectric
		//string dielectricconc$ = sheetname.GetToken(8,"_")$; // Get the string that shows the dielectric concentration or ratio

		string sampleNo$ = sheetname.GetToken(8,"_")$; // Get the string that shows the sample number

		string stepNo$ = sheetname.GetToken(10,"_")$; // Get the string that shows the step number in the cycling process
		string condition$ = sheetname.GetToken(11,"_")$; // Get the string that shows the conditions (air/type of liquid)
		string dayslength$ = sheetname.GetToken(12,"_")$; // get the string, which shows the number of days
		string daysNo$ = dayslength.GetToken(1,"-")$; // get the string, which shows the number of days
		string meastype$ = sheetname.GetToken(13,"_")$; // get the string, which shows the type of measurement

		

		//string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
		//string condgraphlegend$; // This string will depend on "condition" and it will display the type of liquid for the graph legend
		//string daysgraphlegend$; // This string will depend on "daysNo" and it will display the type of liquid for the graph legend

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
		// Check for NaN columns
		range rb = [%H]1!wcol(2);  // data range of (Is max) column (col(B))
		
		string NaNb$ = Lookup("NaN", rb)$;
		
		if (Nanb$=="NaN" || exist(%H,2)==0) continue; // If object does not exist or if "NaN" is present, then just continue to the next workbook. When LabVIEW measurements are interrupted (they yield NaN values)
			//else
			//{
				//switch (%(concunits$)) // Case study
					//{
						//case "gl": // If the string is "gl", write "g/l" in the comment field
							//conunitslegend$ = "g/l"; // Comment field (graph legend)
							//break;
						//
						//default: // For all other numbers, use plural form
							//conunitslegend$ = "mg/ml"; // Comment field (graph legend)
							//break;
					//}
					//
				//switch (%(additivetype$)) // Case study
					//{
						//case "Pristine": // If the string is "TCNQ", write "TCNQ" in the comment field
							//additivegraphlegend$ = "Pristine"; // Comment field (graph legend)
							//break;
						//
						//case "TCNQ": // If the string is "TCNQ", write "TCNQ" in the comment field
							//additivegraphlegend$ = "+ TCNQ"; // Comment field (graph legend)
							//break;
						//
						//case "F2TCNQ": // If the string is "F2TCNQ", write "F2TCNQ" in the comment field
							////string pH$ = condinfo.GetToken(1,"-")$; // get the string, which shows the pH
							//additivegraphlegend$ = "+ F2TCNQ"; // Comment field (graph legend)
							//break;
						//
						//case "SAM-1OCT-v": // If the number is 1, use single form
							//additivegraphlegend$ = "+ 1-Octanethiol (vapor)"; // Comment field (graph legend)
							//break;
						//
						//case "SAM-1OCT-i": // If the number is 1, use single form
							//additivegraphlegend$ = "+ 1-Octanethiol (immersion)"; // Comment field (graph legend)
							//break;
						//
						//case "SAM-TDF1OCT-v": // If the number is 1, use single form
							//additivegraphlegend$ = "+ 3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (vapor)"; // Comment field (graph legend)
							//break;
						//
						//case "SAM-TDF1OCT-i": // If the number is 1, use single form
							//additivegraphlegend$ = "+ 3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (immersion)"; // Comment field (graph legend)
							//break;
						//
						//default: // For all other strings, write "Pristine" in the comment field
							//additivegraphlegend$ = "Pristine"; // Comment field (graph legend)
							//break;
					//}
					//
				//switch (%(condition$)) // Case study
					//{
						//case "DI-H2O": // If the string is "ultrapure", write "ultrapure water" in the comment field
							//condgraphlegend$ = "DI water"; // Comment field (graph legend)
							//break;
						//
						//case "up-H2O": // If the string is "ultrapure", write "ultrapure water" in the comment field
							//condgraphlegend$ = "Ultrapure water"; // Comment field (graph legend)
							//break;
						//
						//case "t-H2O": // If the string is "town", write "town water" in the comment field
							//condgraphlegend$ = "Town water"; // Comment field (graph legend)
							//break;
						//
						//case "ss": // If the string is "town", write "town water" in the comment field
							//condgraphlegend$ = "Saline solution"; // Comment field (graph legend)
							//break;
						//
						//case "pbuffer": // If the string is "phosphatebuffer", write "Phosphate buffer (pH="pHValue", "buffer concentration" "buffer concentration units")" in the comment field
							//string pH$ = condition.GetToken(2,"-")$; // get the string, which shows the pH
							//pH$ = pH.Substitute(".", ",", 0)$; // Substitute comma with dot
							//string bufferconcentration$ = condition.GetToken(3,"-")$; // get the string, which shows the buffer concentration
							//string bufferconcunits$ = condition.GetToken(4,"-")$; // get the string, which shows the buffer concentration
							//condgraphlegend$ = "Phosphate buffer (pH= %(pH$), %(bufferconcentration$) %(bufferconcunits$)"; // Comment field (graph legend)
							//break;
						//
						//case "IPA": // If the string is "N2", write "N2" in the comment field
							//condgraphlegend$ = "IPA"; // Comment field (graph legend)
							//break;
							//
						//case "N2": // If the string is "N2", write "N2" in the comment field
							//condgraphlegend$ = "N2"; // Comment field (graph legend)
							//break;
						//
						//case "air": // If the string is "N2", write "N2" in the comment field
							//condgraphlegend$ = "air"; // Comment field (graph legend)
							//break;
							//
						//default: // For all other strings, write "air" in the comment field
							//condgraphlegend$ = "air"; // Comment field (graph legend)
							//break;
					//}
						//
				//switch (%(daysNo$)) // Case study
					//{
						//case "initial": // If the string is "initial", write "initial" in the comment field
							//daysgraphlegend$ = "initial"; // Comment field (graph legend)
							//break;
						//
						//case "1": // If the number is 1, use single form
							//daysgraphlegend$ = "1 day"; // Comment field (graph legend)
							//break;
						//
						//default: // For all other numbers, use plural form
							//daysgraphlegend$ = "%(daysNo$) days"; // Comment field (graph legend)
							//break;
					//}
					
				//switch (%(minutesNo$)) // Case study
					//{
						//case "1": // If the number is 1, use single form
							//minutesgraphlegend$ = "%(minutesNo$) minute"; // Comment field (graph legend)
							//break;
						//
						//default: // For all other numbers, use plural form
							//minutesgraphlegend$ = "%(minutesNo$) minutes"; // Comment field (graph legend)
							//break;
					//}

				//string legend$ = "%(material$) %(concnumber$) %(conunitslegend$) %(additivegraphlegend$), %(condgraphlegend$), %(daysgraphlegend$)"; // Legend
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				
				string previousworkbook$=%H; // Get the name of the previous window

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						if (firstloop == 1) // if this is the first loop
						{
							// create a graph window using template
							win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min_comparison_Idon_vs_time_Vd=%(Vd$)V.otpu";  // create a graph window using template
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Idon_vs_time_Vd=%(Vd$)V"; //this renames the active window (long name)
							Idonvstime$=page.longname$;
							
							// create a graph window using template
							win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min_comparison_Idoff_vs_time_Vd=%(Vd$)V.otpu";  // create a graph window using template
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Idoff_vs_time_Vd=%(Vd$)V"; //this renames the active window (long name)
							Idoffvstime$=page.longname$;

							// create a graph window using template
							win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min_comparison_Igon_vs_time_Vd=%(Vd$)V.otpu";  // create a graph window using template
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Igon_vs_time_Vd=%(Vd$)V"; //this renames the active window (long name)
							Igonvstime$=page.longname$;
							
							// create a graph window using template
							win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min_comparison_Igoff_vs_time_Vd=%(Vd$)V.otpu";  // create a graph window using template
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Igoff_vs_time_Vd=%(Vd$)V"; //this renames the active window (long name)
							Igoffvstime$=page.longname$;		
							
							// create a graph window using template
							win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_comparison_Transfer_Leakage_Vd=%(Vd$)V_Vg=%(VgStart$)V to %(VgStop$)V.otpu";
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Transfer_Leakage_Vd=%(Vd$)V_400_min"; //this renames the active window (long name)
							TransferIg400$=page.longname$;

							
							firstloop = 0;
							win -a %(previousworkbook$);  // activate the previous window (workbook)
							
						};
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				switch (%(meastype$)) // Case study
					{
						case "300": // If the string is "300", process and plot the transfer curve data at the 300th minute
							
							
							// Plot columns
							range r1 = [%H]1!col(E);  // data range of abs(Id) column (col(E))
							range r2 = [%H]1!col(F);  // data range of abs(Ig) column (col(F))
							
							// Id graph (Transfer curves)
							//page.active = nActive;  // activate the layer for plot
							win -a %(uid2name(range2uid(["%(TransferIg400$)"]))$); // activate the graph window
							page.active = 1; // activate Layer 1
							layer.include(r1);  // plot in the active layer
							layer.include(r2);  // plot in the active layer

							//layer -a;  // rescale the layer
							////layer -g; // Group the datasets in the layer to auto-color increment
							//page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							////layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
								
							////win -a %(previousworkbook$);  // activate the previous window (workbook)
							break;
								
								
								
						case "Imax": // If the string is "Imax", process and plot the Imax, Imin, Ion, Ioff vs time data
							
							
							// Plot columns
							range r1 = [%(previousworkbook$)]1!wcol(10);  // data range of column (Id on)
							range r2 = [%(previousworkbook$)]1!wcol(11);  // data range of column (Id off)
							range r3 = [%(previousworkbook$)]1!wcol(12);  // data range of column (Ig on)
							range r4 = [%(previousworkbook$)]1!wcol(13);  // data range of column (Ig off)
							
							// Idon graph
							win -a %(uid2name(range2uid(["%(Idonvstime$)"]))$); // activate the graph window
							page.active = 1; // activate Layer 1
							layer.include(r1);  // plot in the active layer
								
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							//page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							////win -a %(previousworkbook$);  // activate the previous window (workbook)
							
							
							// Idoff graph
							win -a %(uid2name(range2uid(["%(Idoffvstime$)"]))$); // activate the graph window
							page.active = 1; // activate Layer 1
							layer.include(r2);  // plot in the active layer
								
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							//page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							////win -a %(previousworkbook$);  // activate the previous window (workbook)
							
							
							// Igon graph
							win -a %(uid2name(range2uid(["%(Igonvstime$)"]))$); // activate the graph window
							page.active = 1; // activate Layer 1
							layer.include(r3);  // plot in the active layer
								
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							//page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							////win -a %(previousworkbook$);  // activate the previous window (workbook)
							
							
							// Igoff graph
							win -a %(uid2name(range2uid(["%(Igoffvstime$)"]))$); // activate the graph window
							page.active = 1; // activate Layer 1
							layer.include(r4);  // plot in the active layer
								
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							//page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							////win -a %(previousworkbook$);  // activate the previous window (workbook)
							break;
							
							
							
						case "plunger": // If the string is "plunger", process and plot the plunger position vs time data
								
							
							// Plot Plunger position vs time								
							col(A)[L]$ = "Time"; // Long name
							col(A)[U]$ = "Minutes"; // Units
							
							col(B)[L]$ = "Absolute plunger position"; // Units
							col(B)[U]$ = "Steps"; // Units
							
							col(C)[L]$ = "Volume of solution in syringe"; // Units
							col(C)[U]$ = "ul"; // Units
							col(C)[O]$ = "col(B)/3"; // Function

							// Plot columns
							range r2 = [%(previousworkbook$)]1!wcol(3);  // data range of column
							
							
							// Volume vs time graph
							
							// Idon graph
							win -a %(uid2name(range2uid(["%(Idonvstime$)"]))$); // activate the graph window
							page.active = 2; // activate Layer 2
							layer.include(r2);  // plot in the active layer
								
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							//page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							layer -gu; // Ungroup the datasets in the layer
							//legend; // Update the legend
							
							////win -a %(previousworkbook$);  // activate the previous window (workbook)
							
							
							// Idoff graph
							win -a %(uid2name(range2uid(["%(Idoffvstime$)"]))$); // activate the graph window
							page.active = 2; // activate Layer 2
							layer.include(r2);  // plot in the active layer
								
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							//page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							layer -gu; // Ungroup the datasets in the layer
							//legend; // Update the legend
							
							////win -a %(previousworkbook$);  // activate the previous window (workbook)
							
							
							// Igon graph
							win -a %(uid2name(range2uid(["%(Igonvstime$)"]))$); // activate the graph window
							page.active = 2; // activate Layer 2
							layer.include(r2);  // plot in the active layer
								
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							//page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							layer -gu; // Ungroup the datasets in the layer
							//legend; // Update the legend
							
							////win -a %(previousworkbook$);  // activate the previous window (workbook)
							
							
							// Igoff graph
							win -a %(uid2name(range2uid(["%(Igoffvstime$)"]))$); // activate the graph window
							page.active = 2; // activate Layer 2
							layer.include(r2);  // plot in the active layer
								
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							//page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							layer -gu; // Ungroup the datasets in the layer
							//legend; // Update the legend
							
							////win -a %(previousworkbook$);  // activate the previous window (workbook)
							
							k = 1; // "volume vs time graph" has been plotted
							break;
						
						
						default: // For all other cases, break
							break;
					}
			//};
	}
}