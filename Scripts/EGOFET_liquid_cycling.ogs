// This script is used on EG-OFETs and plots the Idon, Idoff, Igon, Igoff, plunger, and valve port vs time.
// Author: Dimitrios Simatos
// Version: 0.1
// Current status: Works well.
// Changes: 

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// Call libraries.

	Library.Main; // Run Main section of Library file

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
	// Set variables for all loops
	string templatepath$ = "C:\Users\Administrator\Documents\OriginLab\User Files\Templates\"; // define the template path
	string TemplateGeneric$;
	string graphname$;
	string Template$;
	dataset Columns;
	dataset LineTypes;

	doc -ef LB { // loop over all workbooks in folder
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		
		string sheetname$=page.longname$; // Get the name of worksheet
		
		int i = sheetname.Find("script"); // It will yield a value different than 0 if the filename contains "script".
		if (i!=0) continue; // If the filename contains "script", then just continue to the next workbook.
		
		string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
		string architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
		string material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material
		
		string concentration$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
		string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
		string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units
		
		string solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content
		
		string annealing$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive
		
		string additive$ = sheetname.GetToken(7,"_")$; // Get the string that shows the additive
		string additivetype$ = additive.GetToken(1,"-")$; // Get the string that shows the additive type
		//string addthickness$ = additive.GetToken(2,"-")$; // Get the string that shows the additive thickness
		//string addthicknessunits$ = additive.GetToken(3,"-")$; // Get the string that shows the additive thickness units
		
		string sampleNo$ = sheetname.GetToken(8,"_")$; // Get the string that shows the sample number
		
		string condition$ = sheetname.GetToken(9,"_")$; // Get the string that shows the conditions (air/type of liquid)
		string timelength$ = sheetname.GetToken(10,"_")$; // get the string, which shows the number of days
		string daysNo$ = timelength.GetToken(1,"-")$; // get the string, which shows the number of days
		string meastype$ = sheetname.GetToken(11,"_")$; // get the string, which shows the type of measurement
		meastype$=meastype.GetToken(1,".")$; // Remove ".txt" from the type of measurement
		
		
		string IdonTimeGraph$; // The long name of the Idon-Time graph
		string IdoffTimeGraph$; // The long name of the Idoff-Time graph
		string IgonIgoffTimeGraph$; // The long name of the Igon-Igoff-Time graph
		
		// Parameters
		string Vdsat$ = "-1";
		string Steps$ = "7"; // The number of steps.
		string Cycles$ = "14"; // The number of cycles (i.e. the total duration of the measurement).
		string MinsCycle$ = "6"; // [min] The number of minutes per cycle.
		string CyclesPeriod$ = "1"; // The number of cycles between pumping cycles - even of the same liquid.
		string InjStep$ = "2"; // The number of injections per step.
		int Ladder = 1; // If it is 1, the ladder templates will be used.
		
		string conunitslegend$; // This string will depend on "concunits" and it will display the concentration for the graph legend
		string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
		string condgraphlegend$; // This string will depend on "condition" and it will display the type of condition for the graph legend
		string timegraphlegend$; // This string will depend on "minutesNo" and it will display the number of minutes for the graph legend
		string legend$;  // This string will depend on all legend string and it will display the graph legend

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
		// Check for NaN columns
		range rb = [%H]1!wcol(2);  // data range of (Is max) column (col(B))
		
		string NaNb$ = Lookup("NaN", rb)$;
		
		if (Nanb$=="NaN" || exist(%H,2)==0) continue; // If object does not exist or if "NaN" is present, then just continue to the next workbook. When LabVIEW measurements are interrupted (they yield NaN values)
			else
			{
				conunitslegend$ = MakeConcUnitsLegend(concunits$)$; // Note ending '$'
				additivegraphlegend$ = MakeAdditiveLegend(additivetype$)$; // Note ending '$'
				condgraphlegend$ = MakeConditionLegend(condition$)$; // Note ending '$'
				timegraphlegend$ = MakeTimeLegend(timelength$)$; // Note ending '$'
				
				legend$ = "%(material$) %(concnumber$) %(conunitslegend$) %(additivegraphlegend$), %(condgraphlegend$), %(timegraphlegend$)"; // Legend
			};
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------
			
			string previousworkbook$=%H; // Get the name of the previous window
			
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------
			
		// NOTE: If this is written with case structures instead of if-then structures, the program will crash due to Origin restrictions
			
		int j = sheetname.Find("I-vs-time"); // It will yield a value different than 0 if the filename contains "I-vs-time".
		if (j!=0) // If the filename contains "I-vs-time", then
		{
			// Plot Imax, Imin, Ion, Ioff vs time
			string Units$ = col(A)[L]$;
			Units$ = Units.GetToken(2,"(")$; // get the string, which shows the time units
			Units$ = Units.GetToken(1,")")$; // get the string, which shows the time units
			
			col(A)[L]$ = "Time"; // Long name
			col(A)[U]$ = Units$; // Units
			
			col(B)[L]$ = "Is max"; // Units
			col(B)[U]$ = "A"; // Units
			
			col(C)[L]$ = "Is min"; // Units
			col(D)[L]$ = "Id max"; // Units
			col(E)[L]$ = "Id min"; // Units
			col(F)[L]$ = "Ig max"; // Units
			col(G)[L]$ = "Ig min"; // Units
			col(H)[L]$ = "Is on"; // Units
			col(I)[L]$ = "Is off"; // Units
			col(J)[L]$ = "Id on"; // Units
			col(K)[L]$ = "Id off"; // Units
			col(L)[L]$ = "Ig on"; // Units
			col(M)[L]$ = "Ig off"; // Units
			
			col(C)[U]$ = col(B)[U]$;
			col(D)[U]$ = col(B)[U]$;
			col(E)[U]$ = col(B)[U]$;
			col(F)[U]$ = col(B)[U]$;
			col(G)[U]$ = col(B)[U]$;
			col(H)[U]$ = col(B)[U]$;
			col(I)[U]$ = col(B)[U]$;
			col(J)[U]$ = col(B)[U]$;
			col(K)[U]$ = col(B)[U]$;
			col(L)[U]$ = col(B)[U]$;
			col(M)[U]$ = col(B)[U]$;
			
			
			//---------------------------------------------------------
			// Comment to prevent any changes to the graph legend
			col(B)[C]$ = %(legend$), %(col(B)[L]$); // Comment
			col(C)[C]$ = %(legend$), %(col(C)[L]$); // Comment
			col(D)[C]$ = %(legend$), %(col(D)[L]$); // Comment
			col(E)[C]$ = %(legend$), %(col(E)[L]$); // Comment
			col(F)[C]$ = %(legend$), %(col(F)[L]$); // Comment
			col(G)[C]$ = %(legend$), %(col(G)[L]$); // Comment
			col(H)[C]$ = %(legend$), %(col(H)[L]$); // Comment
			col(I)[C]$ = %(legend$), %(col(I)[L]$); // Comment
			col(J)[C]$ = %(legend$), %(col(J)[L]$); // Comment
			col(K)[C]$ = %(legend$), %(col(K)[L]$); // Comment
			col(L)[C]$ = %(legend$), %(col(L)[L]$); // Comment
			col(M)[C]$ = %(legend$), %(col(M)[L]$); // Comment
			//----------------------------------------------------------
			
			// Joint Idon - Volume graph
			TemplateGeneric$ = "%(templatepath$)Generic_Idon-Time.otpu";
			graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(condition$)_%(timelength$)_Idon-Time_Vd=%(Vdsat$)V";
			Template$ = "%(templatepath$)Cycling_%(Steps$)-steps_%(Cycles$)-cycles_%(MinsCycle$)-mins-cycle_%(CyclesPeriod$)-period_%(InjStep$)-inj-step_Idon-Time.otpu"; // This is the template path
			Layers = {1};
			Columns = {10};
			LineTypes = {1}; // 1 for line plot, 2 for scatter plot
			PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, previousworkbook$, 0, 0, 1);
			
			
			// Joint Idoff - Volume graph
			TemplateGeneric$ = "%(templatepath$)Generic_Idoff-Time.otpu";
			graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(condition$)_%(timelength$)_Idoff-Time_Vd=%(Vdsat$)V";
			Template$ = "%(templatepath$)Cycling_%(Steps$)-steps_%(Cycles$)-cycles_%(MinsCycle$)-mins-cycle_%(CyclesPeriod$)-period_%(InjStep$)-inj-step_Idoff-Time.otpu"; // This is the template path
			Layers = {1};
			Columns = {11};
			LineTypes = {1}; // 1 for line plot, 2 for scatter plot
			PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, previousworkbook$, 0, 0, 1);
			
			
			// Joint Igon - Igoff - Volume graph
			TemplateGeneric$ = "%(templatepath$)Generic_Igon-Igoff-Time.otpu";
			graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(condition$)_%(timelength$)_Igon-Igoff-Time_Vd=%(Vdsat$)V";
			Template$ = "%(templatepath$)Cycling_%(Steps$)-steps_%(Cycles$)-cycles_%(MinsCycle$)-mins-cycle_%(CyclesPeriod$)-period_%(InjStep$)-inj-step_Igon-Igoff-Time.otpu"; // This is the template path
			Layers = {1, 1};
			Columns = {12, 13};
			LineTypes = {1, 1}; // 1 for line plot, 2 for scatter plot
			PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 2, Columns, LineTypes, previousworkbook$, 0, 0, 1);
			
			win -a %(previousworkbook$);  // activate the previous window (workbook)
			window -ch 1; // hide the transfer workbook that was processed
		};
			
			
		int k = sheetname.Find("plunger"); // It will yield a value different than 0 if the filename contains "plunger".
		if (k!=0) // If the filename contains "plunger", then
		{
			// Plot Plunger position vs time								
			col(A)[L]$ = "Time"; // Long name
			col(A)[U]$ = "Minutes"; // Units
			
			col(B)[L]$ = "Absolute plunger position"; // Units
			col(B)[U]$ = "Steps"; // Units
			
			col(C)[L]$ = "Volume of solution in syringe"; // Units
			col(C)[U]$ = "ul"; // Units
			col(C)[O]$ = "col(B)/3"; // Function
			
			
			// Joint Idon - Volume graph
			TemplateGeneric$ = "%(templatepath$)Generic_Idon-Time.otpu";
			graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(condition$)_%(timelength$)_Idon-Time_Vd=%(Vdsat$)V";
			Template$ = "%(templatepath$)Cycling_%(Steps$)-steps_%(Cycles$)-cycles_%(MinsCycle$)-mins-cycle_%(CyclesPeriod$)-period_%(InjStep$)-inj-step_Idon-Time.otpu"; // This is the template path
			Layers = {2};
			Columns = {3};
			LineTypes = {1}; // 1 for line plot, 2 for scatter plot
			PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, previousworkbook$, 0, 0, 1);
			
			// Joint Idoff - Volume graph
			TemplateGeneric$ = "%(templatepath$)Generic_Idoff-Time.otpu";
			graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(condition$)_%(timelength$)_Idoff-Time_Vd=%(Vdsat$)V";
			Template$ = "%(templatepath$)Cycling_%(Steps$)-steps_%(Cycles$)-cycles_%(MinsCycle$)-mins-cycle_%(CyclesPeriod$)-period_%(InjStep$)-inj-step_Idoff-Time.otpu"; // This is the template path
			Layers = {2};
			Columns = {3};
			LineTypes = {1}; // 1 for line plot, 2 for scatter plot
			PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, previousworkbook$, 0, 0, 1);
			
			
			// Joint Igon - Igoff - Volume graph
			TemplateGeneric$ = "%(templatepath$)Generic_Igon-Igoff-Time.otpu";
			graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(condition$)_%(timelength$)_Igon-Igoff-Time_Vd=%(Vdsat$)V";
			Template$ = "%(templatepath$)Cycling_%(Steps$)-steps_%(Cycles$)-cycles_%(MinsCycle$)-mins-cycle_%(CyclesPeriod$)-period_%(InjStep$)-inj-step_Igon-Igoff-Time.otpu"; // This is the template path
			Layers = {2};
			Columns = {3};
			LineTypes = {1}; // 1 for line plot, 2 for scatter plot
			PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, previousworkbook$, 0, 0, 1);
			
			
			// Volume vs time graph
			win -t p "%(templatepath$)Volume-Time.otpu";  // create a graph window using template
			layer.include(SyringeVolume);  // plot in the active layer
			
			//layer -a;  // rescale the layer
			page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(condition$)_%(timelength$)_Volume-Time"; //this renames the active window (long name)
			page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
			
			
			win -a %(previousworkbook$);  // activate the previous window (workbook)
			window -ch 1; // hide the transfer workbook that was processed	
		};
			
			
		int l = sheetname.Find("valve"); // It will yield a value different than 0 if the filename contains "valve".
		if (l!=0) // If the filename contains "valve", then
		{
			col(A)[L]$ = "Time"; // Long name
			col(A)[U]$ = "Minutes"; // Units
			
			col(B)[L]$ = "Valve port"; // Units
			col(B)[U]$ = "No"; // Units
			
			// Plot columns
			range ValvePort = [%(previousworkbook$)]1!wcol(2);  // data range of column
			
			// Valve port vs time graph
			win -t p "%(templatepath$)Valve-port-Time.otpu";  // create a graph window using template
			layer.include(ValvePort);  // plot in the active layer
			
			layer -a;  // rescale the layer
			page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(condition$)_%(timelength$)_Valve-port-Time"; //this renames the active window (long name)
			page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		};
	}
}