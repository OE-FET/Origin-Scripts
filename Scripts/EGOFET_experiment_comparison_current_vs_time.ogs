// This script is used to analyze EG-OFET operational stability experiments. It is meant to analyze data measured with the "stability test" SPM scripts.
// The script operates on the "I-vs-time", "plunger" and "valve-port" files. It plots the current, plunger and the valve port vs time.
// The "experiment-comparison" script compares and plots the current vs time for multiple experiments in the same graph, to give an overview of the entire batch.

// Author: Dimitrios Simatos
// Version: 2.1
// Current status: Works well.
// Changes: Replaced additivetype$ with additive$.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// Call libraries.

	Library.Main; // Run Main section of Library file

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// Set variables for all loops
	int v = 0; // k is 0 if the "volume vs time graph" has NOT been plotted, and something else (usually 1) if it has been plotted.
	string IonIoffTimeAIOWorkbook$; // The long name of the Ion/Ioff-Time (AIO) workbook
	
	string batch$; // Get the string that shows the batch
	string architecture$; // Get the string that shows the architecture
	string material$; // Get the string that shows the material
	string concentration$; // Get the string that shows the concentration
	string concnumber$; // Get the string that shows the concentration number
	string concunits$; // Get the string that shows the concentration units
	string solvent$; // Get the string that shows the solvent content
	string annealing$; // Get the string that shows the additive
	string additive$; // Get the string that shows the additive
	string additive$; // Get the string that shows the additive type
	string addthickness$; // Get the string that shows the additive thickness
	string addthicknessunits$; // Get the string that shows the additive thickness units
	string dielectric$; // Get the string that shows the dielectric
	string dielectricconc$; // Get the string that shows the dielectric concentration or ratio
	string sampleNo$; // Get the string that shows the sample number
	
	
	// Parameters
	string Vdsat$="-1";
	string VgStart$="0";
	string VgStop$="-1";
	string Rate$="40-ulmin"; // The flow rate (e.g. "40-ulmin" or "none")
	string Duration$="769"; // [min] The total duration of the measurement.
	double Tsswindow = 1E-9; // Window for extracting the steady state time
	int minRangeLengthTss = 200; // [min] The minimum range of minutes over which the linear fit will be applied.
	int Twaterinjected = 8; // [min] The time in which water has already been injected.
	
	double slopeIdon; // The degradation slope of Id on
	double Tss; // The steady state time
	int Tssindex; // The row index of the steady state time
	double IdonSSMean; // Mean Id on at steady state
	double IdonSSSD; // Standard deviation of Id on at steady state
	double IdonSSRange; // Range of Id on at steady state
	
	// Define time points to plot
	string t1$ = "300";
	string t2$ = "301";
	string t1exists = "0"; // Variable to check if a transfer curve at time t1 exists
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	doc -e LB { // loop over all workbooks in project
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		
		string sheetname$ = page.longname$; // Get the name of worksheet
		
		int s = sheetname.Find("script"); // It will yield a value different than 0 if the filename contains "script".
		int d = sheetname.Find("sample"); // It will yield a value different than 0 if the filename contains "script".
		int c = sheetname.Find("comparison"); // It will yield a value different than 0 if the filename contains "comparison".
		//int i = sheetname.Find("I-vs-time"); // It will yield a value different than 0 if the filename contains "I-vs-time".
		int p = sheetname.Find("plunger"); // It will yield a value different than 0 if the filename contains "plunger".
		int r = sheetname.Find("Priming"); // It will yield a value different than 0 if the filename contains "Priming".
		
		if (r!=0 || s!=0 || c!=0 || d!=0) continue; // If the filename contains "Priming", "script", "sample", or "comparison" then just continue to the next workbook.
		//if (i==0 && j==0) continue; // If the filename does not contain "I-vs-time" and does not contain "plunger", then just continue to the next workbook.
		if (p!=0 && v==1) continue; // If the filename contains "plunger" and the "volume vs time graph" has been plotted, then just continue to the next workbook.
		
		batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
		architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
		material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material
		
		concentration$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
		concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
		concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units
		
		solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content
		
		annealing$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive
		
		additive$ = sheetname.GetToken(7,"_")$; // Get the string that shows the additive
		
		//dielectric$ = sheetname.GetToken(7,"_")$; // Get the string that shows the dielectric
		//dielectricconc$ = sheetname.GetToken(8,"_")$; // Get the string that shows the dielectric concentration or ratio
		
		sampleNo$ = sheetname.GetToken(8,"_")$; // Get the string that shows the sample number
		
		string stepNo$ = sheetname.GetToken(10,"_")$; // Get the string that shows the step number in the cycling process
		string condition$ = sheetname.GetToken(11,"_")$; // Get the string that shows the conditions (air/type of liquid)
		string timelength$ = sheetname.GetToken(12,"_")$; // get the string, which shows the number of days
		string daysNo$ = timelength.GetToken(1,"-")$; // get the string, which shows the number of days
		string meastype$ = sheetname.GetToken(13,"_")$; // get the string, which shows the type of measurement
		meastype$ = meastype.GetToken(1,".")$; // Remove ".txt" from the type of measurement		
		
		string conunitslegend$; // This string will depend on "concunits" and it will display the concentration for the graph legend
		string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
		string condgraphlegend$; // This string will depend on "condition" and it will display the type of liquid for the graph legend
		string timegraphlegend$; // This string will depend on "daysNo" and it will display the type of liquid for the graph legend
		

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
		// Check for NaN columns
		range rb = [%H]1!wcol(2);  // data range of (Is max) column (col(B))
		
		string NaNb$ = Lookup("NaN", rb)$;
		
		if (Nanb$=="NaN" || exist(%H,2)==0) continue; // If object does not exist or if "NaN" is present, then just continue to the next workbook. When LabVIEW measurements are interrupted (they yield NaN values)
		//if (batch$ != "360th") continue; // If batch$ is different to the batch that I am interested in, then just continue to the next workbook.
		//if (sampleNo$ != "1st") continue; // If sampleNo$ is different to the sample that I am interested in, then just continue to the next workbook.
		//if (stepNo$ != "3") continue; // If stepNo$ is different to the step that I am interested in, then just continue to the next workbook.
		//if (daysNo$ == "1" || daysNo$ == "4" || daysNo$ == "23") continue; // If daysNo$ is equal to a day in which the experiment had bubbles then just continue to the next workbook.
			else
			{
				conunitslegend$ = MakeConcUnitsLegend(concunits$)$; // Note ending '$'
				additivegraphlegend$ = MakeAdditiveLegend(additive$)$; // Note ending '$'
				condgraphlegend$ = MakeConditionLegend(condition$)$; // Note ending '$'
				timegraphlegend$ = MakeTimeLegend(timegraphlegend$)$; // Note ending '$'
				
				legend$ = "%(material$) %(concnumber$) %(conunitslegend$) %(additivegraphlegend$), %(condgraphlegend$), %(timegraphlegend$)"; // Legend
				legendAIO$ = "%(material$) %(concnumber$) %(conunitslegend$) %(additivegraphlegend$)"; // Legend
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				
				string activeworkbook$=%H; // Get the name of the (active) workbook to be processed
				
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				// Copy Idon values for all time points
				IonIoffTimeAIOWorkbook$="%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Ion-Ioff-Time-AIO_Vd=%(Vdsat$)V.txt";
				if(exist(%(uid2name(range2uid(["%(IonIoffTimeAIOWorkbook$)"]))$))==0) // if there is no workbook for this type of measurement then create a new workbook
					{
						
						newbook option:=lsname;
						page.longname$ = IonIoffTimeAIOWorkbook$;
						wks.name$ = "Parameters vs Time"; // Change the sheet name to "Parameters vs Time"
						wks.ncols = 13; // set total column number to 13
						wks.colwidth = 10;// set all col width to 10
						
						col(A)[L]$ = "Time"; // Long name
						col(A)[U]$ = "Minutes"; // Units
						col(A)[1] = 1;
						
						col(B)[L]$ = "Time"; // Long name
						col(B)[U]$ = "Days"; // Units
						
						col(C)[L]$ = "Id on"; // Long name
						col(C)[U]$ = A; // Units
						col(C)[C]$ = legendAIO$;
						
						col(D)[L]$ = "Id off"; // Long name
						col(D)[U]$ = A; // Units
						col(D)[C]$ = legendAIO$;
						
						col(E)[L]$ = "Ig on"; // Long name
						col(E)[U]$ = A; // Units
						col(E)[C]$ = legendAIO$;
						
						col(F)[L]$ = "Ig off"; // Long name
						col(F)[U]$ = A; // Units
						col(F)[C]$ = legendAIO$;
					};
					
				if (meastype$ == "1-min")
						t1exists$ = "0"; // reset t1exists for a dataset of a different measurement day.
					
				if ((meastype$ == "%(t1$)-min") || (meastype$ == "%(t2$)-min" && t1exists$ == "0")) // If the string is "t1-min" or "t2-min", process and plot the transfer curve data at the t1th or t2th minute. Do not add this inside the case structure, as it cannot handle the t1$ string variable.
					{
						// Id graph (Transfer curves)
						TemplateGeneric$ = "%(templatepath$)Generic_Transfer_Time.otpu";
						graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Transfer_Leakage_Vd=%(Vdsat$)V_%(t1$)-min";
						Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_duration_%(Duration$)-min_comparison_Transfer_Leakage_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V.otpu"; // This is the template path
						Layers = {1, 1};
						Columns = {5, 6};
						LineTypes = {1, 1}; // 1 for line plot, 2 for scatter plot
						PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 2, Columns, LineTypes, activeworkbook$, 1, 0, 0);
						
						if (exist(Text3,16)==16)
							Text3.text$ = $(%(t1$)) minutes; // If the label exists, update it
						plot -c; // refresh the graph to update the labels
						
						if (meastype$ == "%(t1$)-min")
							t1exists$ = "1";
						else t1exists$ = "0";
							
						////win -a %(activeworkbook$);  // activate the previous window (workbook)
						break;
					}
					
				int i = sheetname.Find("I-vs-time"); // It will yield a value different than 0 if the filename contains "I-vs-time".
				if (i!=0) // If the filename contains "I-vs-time", then
				{	
					win -a %(activeworkbook$);
					range TimeRange = [%(activeworkbook$)]1!wcol(1);  // data range of column (Time)
					range Idon = [%(activeworkbook$)]1!wcol(10);  // data range of column (Id on)
					range Idoff = [%(activeworkbook$)]1!wcol(11);  // data range of column (Id off)
					range Igon = [%(activeworkbook$)]1!wcol(12);  // data range of column (Ig on)
					range Igoff = [%(activeworkbook$)]1!wcol(13);  // data range of column (Ig off)
					int rowsNo = wks.maxrows;  // the number of rows of the workbook
					
					window -ch 1; // hide the workbook that was processed
					win -a %(uid2name(range2uid(["%(IonIoffTimeAIOWorkbook$)"]))$); // activate the workbook
					
					// Append Idon vs time to a workbook with a unified time axis ("AIO" workbook)
					
					loop(i,8,rowsNo) // loop over all rows of the workbook, and copy the minutesNo (time axis), and the Idon. I ignore the first 8 points because I am not interested in the double layer formation. I want to see the exponential decay part of the Idon.
					{
						
						// Modify the time value
						double ModifiedTime = TimeRange[i];
						ModifiedTime = round(ModifiedTime,0);
						
						if (daysNo$ == "initial") // If daysNo$ is "Initial" then write "0" in the cell.
							daysNo$ = 0;
						else
							ModifiedTime = %(daysNo$)*24*60+ModifiedTime; // Add the No of days to the elapsed time
						
						
						if (ModifiedTime >> col(A)[wks.maxrows])
							wks.insertRows(wks.maxrows+1, ModifiedTime-col(A)[wks.maxrows]);
						
						col(A)[wks.maxrows] = ModifiedTime;
						col(B)[wks.maxrows] = %(daysNo$);
						col(C)[wks.maxrows] = Idon[i];
						col(D)[wks.maxrows] = Idoff[i];
						col(E)[wks.maxrows] = Igon[i];
						col(F)[wks.maxrows] = Igoff[i];
						
					};
					
					
					// Graphs on time axis of a single experiment
					
					// Idon graph
					TemplateGeneric$ = "%(templatepath$)Generic_Idon-Time.otpu";
					graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Idon-Time_Vd=%(Vdsat$)V";
					Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_duration_%(Duration$)-min_comparison_Idon-Time_Vd=%(Vdsat$)V.otpu"; // This is the template path
					Layers = {1};
					Columns = {10};
					LineTypes = {1}; // 1 for line plot, 2 for scatter plot
					PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 1, 0);
					
					
					// Idoff graph
					TemplateGeneric$ = "%(templatepath$)Generic_Idoff-Time.otpu";
					graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Idoff-Time_Vd=%(Vdsat$)V";
					Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_duration_%(Duration$)-min_comparison_Idoff-Time_Vd=%(Vdsat$)V.otpu"; // This is the template path
					Layers = {1};
					Columns = {11};
					LineTypes = {1}; // 1 for line plot, 2 for scatter plot
					PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 1, 0);
					
					
					// Igon graph
					TemplateGeneric$ = "%(templatepath$)Generic_Igon-Time.otpu";
					graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Igon-Time_Vd=%(Vdsat$)V";
					Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_duration_%(Duration$)-min_comparison_Igon-Time_Vd=%(Vdsat$)V.otpu"; // This is the template path
					Layers = {1};
					Columns = {12};
					LineTypes = {1}; // 1 for line plot, 2 for scatter plot
					PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 1, 0);
					
					
					// Igoff graph
					TemplateGeneric$ = "%(templatepath$)Generic_Igoff-Time.otpu";
					graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Igoff-Time_Vd=%(Vdsat$)V";
					Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_duration_%(Duration$)-min_comparison_Igoff-Time_Vd=%(Vdsat$)V.otpu"; // This is the template path
					Layers = {1};
					Columns = {13};
					LineTypes = {1}; // 1 for line plot, 2 for scatter plot
					PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 1, 0);
				}
				
				int p = sheetname.Find("plunger"); // It will yield a value different than 0 if the filename contains "plunger".
				if (p!=0) // If the filename contains "plunger", then
				{
					// Plot Plunger position vs time								
					col(A)[L]$ = "Time"; // Long name
					col(A)[U]$ = "Minutes"; // Units
					
					col(B)[L]$ = "Absolute plunger position"; // Units
					col(B)[U]$ = "Steps"; // Units
					
					col(C)[L]$ = "Volume of solution in syringe"; // Units
					col(C)[U]$ = "ul"; // Units
					col(C)[O]$ = "col(B)/3"; // Function
					
					
					// Plot Syringe Volume columns in all graphs, in Layer 2.
					
					// Idon graph
					TemplateGeneric$ = "%(templatepath$)Generic_Idon-Time.otpu";
					graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Idon-Time_Vd=%(Vdsat$)V";
					Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_duration_%(Duration$)-min_comparison_Idon-Time_Vd=%(Vdsat$)V.otpu"; // This is the template path
					Layers = {2};
					Columns = {3};
					LineTypes = {1}; // 1 for line plot, 2 for scatter plot
					PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 0, 1, 0);							
					
					// Idoff graph
					TemplateGeneric$ = "%(templatepath$)Generic_Idoff-Time.otpu";
					graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Idoff-Time_Vd=%(Vdsat$)V";
					Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_duration_%(Duration$)-min_comparison_Idoff-Time_Vd=%(Vdsat$)V.otpu"; // This is the template path
					Layers = {2};
					Columns = {3};
					LineTypes = {1}; // 1 for line plot, 2 for scatter plot
					PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 0, 1, 0);
					
					// Igon graph
					TemplateGeneric$ = "%(templatepath$)Generic_Igon-Time.otpu";
					graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Igon-Time_Vd=%(Vdsat$)V";
					Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_duration_%(Duration$)-min_comparison_Igon-Time_Vd=%(Vdsat$)V.otpu"; // This is the template path
					Layers = {2};
					Columns = {3};
					LineTypes = {1}; // 1 for line plot, 2 for scatter plot
					PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 0, 1, 0);
					
					// Igoff graph
					TemplateGeneric$ = "%(templatepath$)Generic_Igoff-Time.otpu";
					graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Igoff-Time_Vd=%(Vdsat$)V";
					Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_duration_%(Duration$)-min_comparison_Igoff-Time_Vd=%(Vdsat$)V.otpu"; // This is the template path
					Layers = {2};
					Columns = {3};
					LineTypes = {1}; // 1 for line plot, 2 for scatter plot
					PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 0, 1, 0);
					
					v = 1; // "volume vs time graph" has been plotted
				}
			};
	}
	
	win -a %(uid2name(range2uid(["%(IonIoffTimeAIOWorkbook$)"]))$); // activate the workbook
	
	// Fill any missing values in col(A), so that the time axis is continuous
	col(A)[1] = 0;
	
	loop(i,2,wks.maxrows)
	{
		if (col(A)[i]-col(A)[i-1]!=1)
			col(A)[i] = col(A)[i-1] + 1;
	}
	
	// Metrics
	
	// Steady state time (Tss), and Degradation slope (dIdon/dt)
	
	col(G)[L]$ = "Moving slope of Id on (Saturation)"; // Long name
	col(G) = abs(movslope(col(A),col(C),20)); // moving slope of col(C) with 20 points average. I do not use the point derivative because it is very sensitive to noise.
	
	Tssindex = StabilityMetrics(7, 8, Twaterinjected, minRangeLengthTss, Tsswindow);
	Tss = col(A)[Tssindex]; // The steady state time
	slopeIdon = abs(fitLR.b); // The degradation slope.
	
	col(H)[L]$ = "Linear fit on Id on (Saturation)"; // Long name
	col(H)[C]$ = "Linear fit"; // Long name
	
	col(I)[L]$ = "Steady state time of Id on"; // Long name
	col(I)[U]$ = min; // Units
	//col(I)[1] = Tss;
	cell(1,9) = Tss;
	
	col(J)[L]$ = "Degradation slope of Id on"; // Long name
	col(J)[U]$ = A/min; // Units
	//col(J)[1] = slopeIdon;
	cell(1,10) = slopeIdon;
	
	
	// Mean Id on, Standard Deviation, and Range at the steady state, calculated on Idon, NOT on the averaged Idon
	IdonSSMean = mean(col(C)[Tssindex:wks.maxrows]);
	IdonSSSD = StdDev(col(C)[Tssindex:wks.maxrows]);
	IdonSSRange = max(col(C)[Tssindex:wks.maxrows]) - min(col(C)[Tssindex:wks.maxrows]);
	
	col(K)[L]$ = "Mean Id on at steady state"; // Long name
	col(K)[U]$ = A; // Units
	//col(K)[1] = IdonSSMean;
	cell(1,11) = IdonSSMean;
	
	col(L)[L]$ = "Standard deviation of Id on at steady state"; // Long name
	col(L)[U]$ = A; // Units
	//col(L)[1] = IdonSSSD;
	cell(1,12) = IdonSSSD;
	
	col(M)[L]$ = "Range of Id on at steady state"; // Long name
	col(M)[U]$ = A; // Units
	//col(M)[1] = IdonSSRange;
	cell(1,13) = IdonSSRange;	
	
	
	// AIO graphs (unified time axis)
	
	// Idon graph
	TemplateGeneric$ = "%(templatepath$)Generic_Idon-Time-AIO.otpu";
	graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Idon-Time-AIO_Vd=%(Vdsat$)V";
	Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_duration_%(Duration$)-min_comparison_Idon-Time-AIO_Vd=%(Vdsat$)V.otpu"; // This is the template path
	Layers = {1};
	Columns = {3};
	LineTypes = {1}; // 1 for line plot, 2 for scatter plot
	PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, IonIoffTimeAIOWorkbook$, 1, 1, 0);
	
	if (exist(Text3,16)==16) Text3.text$ = T\-(ss) = $(Tss) min; // If the label exists, update it
	if (exist(Text4,16)==16) Text4.text$ = d(Id\-(on,SS))/dt = $(slopeIdon, P*2) A/min; // If the label exists, update it
	if (exist(Text5,16)==16) Text5.text$ = Id\-(on,SS,mean) = $(IdonSSMean, P*2) A; // If the label exists, update it
	if (exist(Text6,16)==16) Text6.text$ = Id\-(on,SS,SD) = $(IdonSSSD, P*2) A; // If the label exists, update it
	if (exist(Text7,16)==16) Text7.text$ = Id\-(on,SS,Ran) = $(IdonSSRange, P*2) A; // If the label exists, update it
	plot -c; // refresh the graph to update the labels	
	
	// Idoff graph
	TemplateGeneric$ = "%(templatepath$)Generic_Idoff-Time-AIO.otpu";
	graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Idoff-Time-AIO_Vd=%(Vdsat$)V";
	Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_duration_%(Duration$)-min_comparison_Idoff-Time-AIO_Vd=%(Vdsat$)V.otpu"; // This is the template path
	Layers = {1};
	Columns = {4};
	LineTypes = {1}; // 1 for line plot, 2 for scatter plot
	PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, IonIoffTimeAIOWorkbook$, 1, 1, 0);
	
	// Igon graph
	TemplateGeneric$ = "%(templatepath$)Generic_Igon-Time-AIO.otpu";
	graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Igon-Time-AIO_Vd=%(Vdsat$)V";
	Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_duration_%(Duration$)-min_comparison_Igon-Time-AIO_Vd=%(Vdsat$)V.otpu"; // This is the template path
	Layers = {1};
	Columns = {5};
	LineTypes = {1}; // 1 for line plot, 2 for scatter plot
	PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, IonIoffTimeAIOWorkbook$, 1, 1, 0);
	
	// Igoff graph
	TemplateGeneric$ = "%(templatepath$)Generic_Igoff-Time-AIO.otpu";
	graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_comparison_Igoff-Time-AIO_Vd=%(Vdsat$)V";
	Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_duration_%(Duration$)-min_comparison_Igoff-Time-AIO_Vd=%(Vdsat$)V.otpu"; // This is the template path
	Layers = {1};
	Columns = {6};
	LineTypes = {1}; // 1 for line plot, 2 for scatter plot
	PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, IonIoffTimeAIOWorkbook$, 1, 1, 0);
	
	win -a %(uid2name(range2uid(["%(IonIoffTimeAIOWorkbook$)"]))$); // activate the workbook
	window -ch 1; // hide the workbook that was processed
}