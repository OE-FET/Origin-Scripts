// This script is used on QCM data and plots the frequency, temperature, plunger, and valve port vs time.
// Author: Dimitrios Simatos
// Version: 0.3
// Current status: Works well.
// Changes: Placed the variables for all scripts in the Library file.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// Call libraries.

	Library.Main; // Run Main section of Library file

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// Set variables for all loops
	string PlungerWorkbook$;
	string QCMGraph$; // The long name of the QCM graph
	string QCMGraph5000$; // The long name of the QCM graph (0-5000 min)
	string QCMGraph40000$; // The long name of the QCM graph (0-40000 min)

	doc -ef LB { // loop over all workbooks in folder
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		
		string sheetname$=page.longname$; // Get the name of worksheet
		
		int i = sheetname.Find("script"); // It will yield a value different than 0 if the filename contains "script".
		if (i!=0) continue; // If the filename contains "script", then just continue to the next workbook.
		
		string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
		string architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
		string material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material
		
		string concentration$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
		string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
		string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units
		
		string solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content
		
		string annealing$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive
		
		string additive$ = sheetname.GetToken(7,"_")$; // Get the string that shows the additive
		string additivetype$ = additive.GetToken(1,"-")$; // Get the string that shows the additive type
		//string addthickness$ = additive.GetToken(2,"-")$; // Get the string that shows the additive thickness
		//string addthicknessunits$ = additive.GetToken(3,"-")$; // Get the string that shows the additive thickness units
		
		string sampleNo$ = sheetname.GetToken(8,"_")$; // Get the string that shows the sample number
		
		string stepNo$ = sheetname.GetToken(10,"_")$; // Get the string that shows the step number in the cycling process
		string condition$ = sheetname.GetToken(11,"_")$; // Get the string that shows the conditions (air/type of liquid)
		string timelength$ = sheetname.GetToken(12,"_")$; // get the string, which shows the number of days
		string daysNo$ = timelength.GetToken(1,"-")$; // get the string, which shows the number of days
		string meastype$ = sheetname.GetToken(13,"_")$; // get the string, which shows the type of measurement
		meastype$=meastype.GetToken(1,".")$; // Remove ".txt" from the type of measurement
		
		
		// Parameters
		string Rate$="30-mlmin"; // The flow rate (e.g. "40-ulmin" or "none")
		int toffset = 0; // The time difference between the start of the QCM (which starts first) and the start of the SPM pump [sec]
		
		
		string conunitslegend$; // This string will depend on "concunits" and it will display the concentration for the graph legend
		string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
		string condgraphlegend$; // This string will depend on "condition" and it will display the type of condition for the graph legend
		string timegraphlegend$; // This string will depend on "minutesNo" and it will display the number of minutes for the graph legend
		string legend$;  // This string will depend on all legend string and it will display the graph legend
		
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------
		
		string previousworkbook$=%H; // Get the name of the previous window
		
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------
		
		// NOTE: If this is written with case structures instead of if-then structures, the program will crash due to Origin restrictions
		
		int j = sheetname.Find("QCM"); // It will yield a value different than 0 if the filename contains "QCM".
		if (j!=0) // If the filename contains "QCM", then
		{
			// Plot frequency, temperature, plunger, and valve port vs time
			//colswap (1,2); // Swap the columns A and B, so that "Time" becomes column A and "Date" becomes column B.
			//			
			//wks.col2.type=1; // Set column B as Y
			
			
			// Frequency vs temperature graph
			wks.col4.type=4; // Set column D (Temperature) as X
			
			TemplateGeneric$ = "%(templatepath$)Generic_QCM_DFreq-Temp.otpu";
			graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(timelength$)_DFreq-Temp";
			Template$ = "%(templatepath$)QCM_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_DFreq-Temp.otpu"; // This is the template path
			Layers = {1};
			Columns = {5};
			LineTypes = {1}; // 1 for line plot, 2 for scatter plot
			PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, previousworkbook$, 0, 0, 1);			
			
			win -a %(previousworkbook$);  // activate the previous window (workbook)
			window -ch 1; // hide the workbook that was processed
		};
}