// This script is used on text files saved by mMass.
// NOTE: Place each file in an individual folder and run the script twice on it. If you only run it once, the smart labels will not show up.

// Author: Dimitrios Simatos
// Version: 0.3
// Current status: Untested.
// Changes: Turned plotting and the making of the figure legend into functions.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;
	

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// Call libraries.

	Library.Main; // Run Main section of Library file

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// Set variables for all loops
	string GraphNameSingle$; // The long name of the Graph for the plot of a single MS spectrum
	string TemplateNameSingle$; // The long name of the Graph Template for the plot of a single MS spectrum


	doc -ef LB { // loop over all workbooks in folder
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		
		string sheetname$=page.longname$; // Get the name of worksheet
		
		string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
		string sampleNo$ = sheetname.GetToken(2,"_")$; // Get the string that shows the sample number
		string method$ = sheetname.GetToken(3,"_")$; // Get the string that shows the experimental method (e.g. LCMS, GCNS)
		string sampleType$ = sheetname.GetToken(4,"_")$; // Get the string that shows the sample type (e.g. Priming Waste, Experiment Waste)
		string architecture$ = sheetname.GetToken(5,"_")$; // Get the string that shows the architecture		
		
		string material$ = sheetname.GetToken(6,"_")$; // Get the string that shows the material
		string concentration$ = sheetname.GetToken(7,"_")$; // Get the string that shows the concentration
		string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
		string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units
		
		string solvent$ = sheetname.GetToken(8,"_")$; // Get the string that shows the solvent content (of the material, NOT the deuterated solvent used to dissolve the film)
		
		string annealing$ = sheetname.GetToken(9,"_")$; // Get the string that shows the additive
		
		string additive$ = sheetname.GetToken(10,"_")$; // Get the string that shows the additive
		string additivetype$ = additive.GetToken(1,"-")$; // Get the string that shows the additive type
		//string addthickness$ = additive.GetToken(2,"-")$; // Get the string that shows the additive thickness
		//string addthicknessunits$ = additive.GetToken(3,"-")$; // Get the string that shows the additive thickness units
		
		string condition$ = sheetname.GetToken(11,"_")$; // Get the string that shows the conditions (air/type of liquid)
		string dayslength$ = sheetname.GetToken(12,"_")$; // get the string, which shows the number of days
		string daysNo$ = dayslength.GetToken(1,"-")$; // get the string, which shows the number of days
		string measNo$ = sheetname.GetToken(13,"_")$; // Get the string that shows the measurement number
		string IonMode$ = sheetname.GetToken(14,"_")$; // Get the string that shows the ion measurement mode
		IonMode$ = IonMode.GetToken(1,".")$; // Remove ".txt" from the scale
		
		
		string conunitslegend$; // This string will depend on "concunits" and it will display the concentration for the graph legend
		string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
		string condgraphlegend$; // This string will depend on "condition" and it will display the type of condition for the graph legend
		string timegraphlegend$; // This string will depend on "daysNo" and it will display the type of liquid for the graph legend
		string ionmodegraphlegend$; // This string will depend on "IonMode" and it will display the measurement mode for the graph legend
		
		
		GraphNameSingle$="%(batch$)_%(sampleNo$)_%(method$)_%(sampleType$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(condition$)_%(dayslength$)_%(measNo$)_%(IonMode$)";
		TemplateNameSingle$="%(templatepath$)%(method$)_%(sampleType$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(IonMode$)";

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	// Check for NaN columns
		range rb = [%H]1!wcol(2);  // data range of (Is) (Vd=Vdlin) column (col(B))
		range rc = [%H]1!wcol(3);  // data range of (Is) (Vd=Vdsat) column (col(C))
		
		string NaNb$ = Lookup("NaN", rb)$;
		string NaNc$ = Lookup("NaN", rc)$;
		
		if (Nanb$=="NaN" || Nanc$=="NaN" || exist(%H,2)==0) continue; // If object does not exist or if "NaN" is present, then just continue to the next workbook. When LabVIEW measurements are interrupted, they yield NaN values.
			else
			{
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				// Case structures from filenames (used for legends).
				
				conunitslegend$ = MakeConcUnitsLegend(concunits$)$; // Note ending '$'
				additivegraphlegend$ = MakeAdditiveLegend(additivetype$)$; // Note ending '$'
				condgraphlegend$ = MakeConditionLegend(condition$)$; // Note ending '$'
				timegraphlegend$ = MakeTimeLegend(timelength$)$; // Note ending '$'
				ionmodegraphlegend$ = MakeMeasModeLegend(mode$)$; // Note ending '$'
				
				//string legend$ = "%(material$) %(concnumber$) %(conunitslegend$) %(additivegraphlegend$), %(condgraphlegend$), %(timegraphlegend$), %(minutesgraphlegend$), %(modegraphlegend$), %(intimegraphlegend$)"; // Legend
				string legend$ = "%(condgraphlegend$), %(timegraphlegend$)"; // Legend		
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				
				string activeworkbook$=%H; // Get the name of the (active) workbook to be processed
				
				wks.name$=method$; // Change the sheet name to the method used (e.g. LCMS)
				wks.ncols=5; // set total column number to 5
				wks.colwidth = 12;// set all col width to 12
				
				
				// Write long name, units, comments, and parameters of columns
				col(A)[L]$ = "m/z"; // Long name
				//col(A)[U]$ = ppm; // Units
				col(B)[L]$ = "Intensity"; // Long name
				col(B)[U]$ = AU; // Units				
				
				
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				// Column legends
				
				col(B)[C]$ = legend$;
				
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				// Peak analysis
				
				pkfind iy:=[%H]1!col(B) method:=max dir:=p npts:=1 filter:=h value:=2E4 ocenter:=col(3) ocenter_x:=col(4) ocenter_y:=col(5); // Max peaks are filtered by height				
				
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				// Plot graphs
				
				// Plot mass spectrometry spectrum (single)
				TemplateGeneric$ = "%(templatepath$)Generic_%(method$).otpu";
				graphname$ = GraphNameSingle$;
				Template$="%(TemplateNameSingle$).otpu"; // This is the template path
				Layers = {1};
				Columns = {2};
				LineTypes = {1}; // 1 for line plot, 2 for scatter plot
				PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 0, 1);
				
				set %c -q 1; // Turn the data label on
				set %c -qc 17; // Set label form as pink
				set %c -ql 1; // Set label leader line as straight
				set %c -qm 1; // Set label form as X
				set %C -qmi [activeworkbook$]1!col(C); // Label only the peaks, NOT all data points
				set %C -qr 90; // Set label rotation to 90 degrees
				set %C -qs 16; // Set label font size to 16
			};
	};
}