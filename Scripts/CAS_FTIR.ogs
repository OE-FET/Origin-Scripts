// This script is used on text files exported by OPUS. It processes them so that they end up having, the absorbance at column B, the normalized absorbance at column C, and also fixes the longnames.
// This script is intended for OFETs and WG-OFETs.
// NOTE: First process the files in OPUS (atmospheric compensation, cutting, baseline correction), then export them as data point tables, then import them in Origin.

// Author: Dimitrios Simatos
// Version: 0.4
// Current status: Untested.
// Changes: Turned plotting and the making of the figure legend into functions.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;
	

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// Set variables for all loops
	string GraphNameAbs$; // The long name of the Graph for the Absorbance plot of all FTIR spectra
	string TemplateNameAbs$; // The long name of the Graph Template for the Absorbance plot of all FTIR spectra
	string GraphNameSingleAbs$; // The long name of the Graph for the Absorbance plot of a single FTIR spectrum
	string TemplateNameSingleAbs$; // The long name of the Graph Template for the Absorbance plot of a single FTIR spectrum
	
	string GraphNameInt$; // The long name of the Graph for the Intensity plot of all FTIR spectra
	string TemplateNameInt$; // The long name of the Graph Template for the Intensity plot of all FTIR spectra
	string GraphNameSingleInt$; // The long name of the Graph for the Intensity plot of a single FTIR spectrum
	string TemplateNameSingleInt$; // The long name of the Graph Template for the Intensity plot of a single FTIR spectrum

	doc -ef LB { // loop over all workbooks in folder
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		
		string sheetname$=page.longname$; // Get the name of worksheet
		
		string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
		string method$ = sheetname.GetToken(2,"_")$; // Get the string that shows the experimental method (e.g. FTIR, CAS-FTIR)
		string architecture$ = sheetname.GetToken(3,"_")$; // Get the string that shows the architecture
		string material$ = sheetname.GetToken(4,"_")$; // Get the string that shows the material

		string concentration$ = sheetname.GetToken(5,"_")$; // Get the string that shows the concentration
		string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
		string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units

		string solvent$ = sheetname.GetToken(6,"_")$; // Get the string that shows the solvent content

		string annealing$ = sheetname.GetToken(7,"_")$; // Get the string that shows the additive

		string additive$ = sheetname.GetToken(8,"_")$; // Get the string that shows the additive
		string additivetype$ = additive.GetToken(1,"-")$; // Get the string that shows the additive type
		//string addthickness$ = additive.GetToken(2,"-")$; // Get the string that shows the additive thickness
		//string addthicknessunits$ = additive.GetToken(3,"-")$; // Get the string that shows the additive thickness units
		
		switch (%(architecture$)) // Case study
		{
			case "BGBC-OFET": // If the string is "BGBC-OFET"
				
				string dielectric$ = sheetname.GetToken(9,"_")$; // Get the string that shows the dielectric
				string dielectricconc$ = sheetname.GetToken(10,"_")$; // Get the string that shows the dielectric concentration or ratio
				
				string sampleNo$ = sheetname.GetToken(11,"_")$; // Get the string that shows the sample number
				
				string stepNo$ = sheetname.GetToken(12,"_")$; // Get the string that shows the step number in the cycling process
				string condition$ = sheetname.GetToken(13,"_")$; // Get the string that shows the conditions (air/type of liquid)
				string time$ = sheetname.GetToken(14,"_")$; // get the string, which shows the elapsed time
				
				string pressure$ = sheetname.GetToken(15,"_")$; // get the string, which shows the pressure
				string temperature$ = sheetname.GetToken(16,"_")$; // get the string, which shows the temperature
				string measNo$=sheetname.GetToken(17,"_")$; // Get the string that shows the measurement number
				string meastype$=sheetname.GetToken(18,"_")$; // Get the string "A", "S" or "B", which shows if the curve is an "Absorbance" spectrum or a "Sample"/"Background" intensity spectrum
				string Vg$=sheetname.GetToken(19,"_")$; // Get the string that shows the gate voltage
				string Vd$=sheetname.GetToken(20,"_")$; // Get the string that shows the drain voltage
				Vd$=Vd.GetToken(1,".")$; // Remove ".txt" from the drain voltage
				
				
				GraphNameAbs$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_A_W_all";
				TemplateNameAbs$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$).otpu";
				GraphNameSingleAbs$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(stepNo$)_%(condition$)_%(time$)_%(pressure$)_%(temperature$)_%(measNo$)_%(Vg$)_%(Vd$)_A_W";
				TemplateNameSingleAbs$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$).otpu";
				
				GraphNameInt$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_I_W_all";
				TemplateNameInt$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$).otpu";
				GraphNameSingleInt$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(stepNo$)_%(condition$)_%(time$)_%(pressure$)_%(temperature$)_%(measNo$)_%(Vg$)_%(Vd$)_I_W";
				TemplateNameSingleInt$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$).otpu";
				
				break;
				
				
			case "SGBC-EGOFET": // If the string is "SGBC-EGOFET"
				string sampleNo$ = sheetname.GetToken(9,"_")$; // Get the string that shows the sample number
				
				string stepNo$ = sheetname.GetToken(10,"_")$; // Get the string that shows the step number in the cycling process
				string condition$ = sheetname.GetToken(11,"_")$; // Get the string that shows the conditions (air/type of liquid)
				string time$ = sheetname.GetToken(12,"_")$; // get the string, which shows the elapsed time
				
				string pressure$ = sheetname.GetToken(13,"_")$; // get the string, which shows the pressure
				string presNo$ = pressure.GetToken(1,"-")$; // get the string, which shows the pressure No
				string presUnits$ = pressure.GetToken(2,"-")$; // get the string, which shows the pressure units
				string temperature$ = sheetname.GetToken(14,"_")$; // get the string, which shows the temperature
				string measNo$=sheetname.GetToken(15,"_")$; // Get the string that shows the measurement number
				string meastype$=sheetname.GetToken(16,"_")$; // Get the string "A", "S" or "B", which shows if the curve is an "Absorbance" spectrum or a "Sample"/"Background" intensity spectrum
				string Vg$=sheetname.GetToken(17,"_")$; // Get the string that shows the gate voltage
				string Vd$=sheetname.GetToken(18,"_")$; // Get the string that shows the drain voltage
				Vd$=Vd.GetToken(1,".")$; // Remove ".txt" from the drain voltage
				
				
				// Parameters
				string Rate$="none";
				string CycleLength$="800";
				
				
				GraphNameAbs$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(pressure$)_%(temperature$)_A_W_all";
				TemplateNameAbs$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min.otpu";
				GraphNameSingleAbs$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(stepNo$)_%(condition$)_%(time$)_%(pressure$)_%(temperature$)_%(measNo$)_%(Vg$)_%(Vd$)_A_W";
				TemplateNameSingleAbs$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min.otpu";
				
				GraphNameInt$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(pressure$)_%(temperature$)_I_W_all";
				TemplateNameInt$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min.otpu";
				GraphNameSingleInt$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(stepNo$)_%(condition$)_%(time$)_%(pressure$)_%(temperature$)_%(measNo$)_%(Vg$)_%(Vd$)_I_W";
				TemplateNameSingleInt$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min.otpu";
				
				break;
				
			default: // For all other cases
				break;
		};
			
		
		string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
		string condgraphlegend$; // This string will depend on "condition" and it will display the type of condition for the graph legend
		string timegraphlegend$; // This string will depend on "timeNo" and it will display the type of liquid for the graph legend
		string meastypegraphlegend$; // This string will depend on "meastype" and it will display the measurement type (sample or background intensity spectrum) for the graph legend		

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				// Case structures from filenames (used for legends).				
				
				conunitslegend$ = MakeConcUnitsLegend(concunits$)$; // Note ending '$'
				additivegraphlegend$ = MakeAdditiveLegend(additivetype$)$; // Note ending '$'
				condgraphlegend$ = MakeConditionLegend(condition$)$; // Note ending '$'
				timegraphlegend$ = MakeTimeLegend(timelength$)$; // Note ending '$'
				
				//string legend$ = "%(material$) %(concnumber$) %(conunitslegend$) %(additivegraphlegend$), %(condgraphlegend$), %(timegraphlegend$), %(minutesgraphlegend$), %(modegraphlegend$), %(intimegraphlegend$)"; // Legend
				//string legend$ = "%(condgraphlegend$), %(timegraphlegend$), Meas. No %(measNo$), Vg=%(Vg$), Vd=%(Vd$), %(pressure$), %(temperature$)"; // Legend
				string legend$ = "%(condgraphlegend$), %(timegraphlegend$), Meas. %(measNo$), Vg=%(Vg$), Vd=%(Vd$)"; // Legend
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				
				string activeworkbook$=%H; // Get the name of the (active) workbook to be processed
				
				if (meastype$ == "A") // if this is an absorbance spectrum then
				{
						wks.name$=method$; // Change the sheet name to the method used (e.g. CAS-FTIR)
						wks.ncols=3; // set total column number to 3
						wks.colwidth = 12;// set all col width to 12
						
						
						// Write long name, units, comments, and parameters of columns
						col(A)[L]$ = "Wavenumber"; // Long name
						col(A)[U]$ = "cm\+(-1)"; // Units
						col(B)[L]$ = "Absorbance"; // Long name
						col(B)[U]$ = AU; // Units
						col(C)[L]$ = "Transmittance"; // Long name
						col(C)[U]$ = AU; // Units
						col(C)[O]$ = "(1/log(2-col(B)))/100";
						
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						// Column legends
						
						col(B)[C]$ = legend$;
						col(C)[C]$ = col(B)[C]$; // Comment field (graph legend)
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						// Plot graphs
						
						// Plot FTIR spectrum (global)
						TemplateGeneric$ = "%(templatepath$)Generic_%(method$).otpu";
						graphname$ = GraphNameAbs$;
						Template$ = TemplateNameAbs$; // This is the template path
						Layers = {1};
						Columns = {2};
						LineTypes = {1}; // 1 for line plot, 2 for scatter plot
						PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 1, 1);
						
						
						// Plot FTIR spectrum (single)
						TemplateGeneric$ = "%(templatepath$)Generic_%(method$).otpu";
						graphname$ = GraphNameSingleAbs$;
						Template$ = TemplateNameSingleAbs$; // This is the template path
						Layers = {1};
						Columns = {2};
						LineTypes = {1}; // 1 for line plot, 2 for scatter plot
						PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 1, 1);
					}						
				
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				else // if this is an intensity spectrum (sample or background)
				{	
						meastypegraphlegend$ = MakeCASFTIRMeasTypeLegend(meastype$)$; // Note ending '$'
							
						string legend$ = "%(condgraphlegend$), %(timegraphlegend$), Meas. %(measNo$), Vg=%(Vg$), Vd=%(Vd$), %(meastypegraphlegend$)"; // Legend
						
						wks.name$=method$; // Change the sheet name to the method used (e.g. CAS-FTIR)
						wks.colwidth = 12;// set all col width to 12
						
						
						// Write long name, units, comments, and parameters of columns
						col(A)[L]$ = "Wavenumber"; // Long name
						col(A)[U]$ = "cm\+(-1)"; // Units
						col(B)[L]$ = "Intensity"; // Long name
						col(B)[U]$ = AU; // Units
						
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						// Column legends
						
						col(B)[C]$ = legend$;
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						// Plot graphs
						
						// Plot FTIR spectrum (global)
						TemplateGeneric$ = "%(templatepath$)Generic_%(method$).otpu";
						graphname$ = GraphNameInt$;
						Template$ = TemplateNameInt$; // This is the template path
						Layers = {1};
						Columns = {2};
						LineTypes = {1}; // 1 for line plot, 2 for scatter plot
						PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 1, 1);
						
						
						// Plot FTIR spectrum (single)
						TemplateGeneric$ = "%(templatepath$)Generic_%(method$).otpu";
						graphname$ = GraphNameSingleInt$;
						Template$ = TemplateNameSingleInt$; // This is the template path
						Layers = {1};
						Columns = {2};
						LineTypes = {1}; // 1 for line plot, 2 for scatter plot
						PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 1, 1);
				};
			};
		};