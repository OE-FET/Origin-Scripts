// This script is used on EG-OFETs and recalculates the metrics of the graphs of Idon, Idoff, Igon, Igoff and transfer curves vs time.
// Author: Dimitrios Simatos
// Version: 0.4
// Current status: Works well.
// Changes: Updated the Duration variable.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// Call libraries.

	Library.Main; // Run Main section of Library file

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// Parameters
	string Vdsat$="-1";
	string VgStart$="0";
	string VgStop$="-1";
	string Rate$="40-ulmin";
	string Duration$="769"; // [min] The total duration of the measurement.
	
	double slopeIdon; // The degradation slope of Id on
	double Tss; // The steady state time
	int Tssindex; // The row index of the steady state time
	double Tsswindow = 1E-9; // Window for extracting the steady state time
	int minRangeLengthTss = 200; // [min] The minimum range of minutes over which the linear fit will be applied.
	int Twaterinjected = 8; // [min] The time in which water has already been injected.
	
	double IdonSSMean; // Mean Id on at steady state
	double IdonSSSD; // Standard deviation of Id on at steady state
	double IdonSSRange; // Range of Id on at steady state
	

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	// Metrics
	
	// Steady state time (Tss), and Degradation slope (dIdon/dt)
	
	//col(G)[L]$ = "Moving slope of Id on (Saturation)"; // Long name
	//col(G) = abs(movslope(col(A),col(C),20)); // moving slope of col(C) with 20 points average. I do not use the point derivative because it is very sensitive to noise.
	
	Tssindex = StabilityMetrics(7, 8, Twaterinjected, minRangeLengthTss, Tsswindow);
	Tss = col(A)[Tssindex]; // The steady state time
	slopeIdon = abs(fitLR.b); // The degradation slope.

	
	col(H)[L]$ = "Linear fit on Id on (Saturation)"; // Long name
	col(H)[C]$ = "Linear fit"; // Long name
	
	col(I)[L]$ = "Steady state time of Id on"; // Long name
	col(I)[U]$ = min; // Units
	col(I)[1] = Tss;
	
	col(J)[L]$ = "Degradation slope of Id on"; // Long name
	col(J)[U]$ = A/min; // Units
	col(J)[1] = slopeIdon;
	
	
	// Mean Id on, Standard Deviation, and Range at the steady state
	IdonSSMean = mean(col(C)[Tssindex:wks.maxrows]);
	IdonSSSD = StdDev(col(C)[Tssindex:wks.maxrows]);
	IdonSSRange = max(col(C)[Tssindex:wks.maxrows]) - min(col(C)[Tssindex:wks.maxrows]);
	
	col(K)[L]$ = "Mean Id on at steady state"; // Long name
	col(K)[U]$ = A; // Units
	col(K)[1] = IdonSSMean;
	
	col(L)[L]$ = "Standard deviation of Id on at steady state"; // Long name
	col(L)[U]$ = A; // Units
	col(L)[1] = IdonSSSD;
	
	col(M)[L]$ = "Range of Id on at steady state"; // Long name
	col(M)[U]$ = A; // Units
	col(M)[1] = IdonSSRange;
	
	window -ch 1; // hide the workbook that was processed
	if (exist(Text3,16)==16) Text3.text$ = T\-(ss) = $(Tss) min; // If the label exists, update it
	if (exist(Text4,16)==16) Text4.text$ = d(Id\-(on,SS))/dt = $(slopeIdon, P*2) A/min; // If the label exists, update it
	if (exist(Text5,16)==16) Text5.text$ = Id\-(on,SS,mean) = $(IdonSSMean, P*2) A; // If the label exists, update it
	if (exist(Text6,16)==16) Text6.text$ = Id\-(on,SS,SD) = $(IdonSSSD, P*2) A; // If the label exists, update it
	if (exist(Text7,16)==16) Text7.text$ = Id\-(on,SS,Ran) = $(IdonSSRange, P*2) A; // If the label exists, update it
	plot -c; // refresh the graph to update the labels	
	
}