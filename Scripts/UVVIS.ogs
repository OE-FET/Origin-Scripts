// This script is used to plot UV-VIS spectra. It loops over all the workbooks in the folder and creates four new columns, one pair for the abs(Id) and one pair for abs(Ig).

// Author: Dimitrios Simatos
// Version: 0.8
// Current status: Untested.
// Changes: Turned the making of the figure legend into functions.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// Call libraries.

	Library.Main; // Run Main section of Library file

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
	wks.colwidth = 12;// set all col width to 12
	page.active = 1; // Switch to the first worksheet. I do not want the metadata worksheets to be parsed.
	
	string sheetname$=page.longname$; // Get the name of worksheet
	
	string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
	string architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
	string material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material
	
	string concentration$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
	string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
	string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units

	string solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content
	string additive$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive
	
	string liquidtype$ = sheetname.GetToken(7,"_")$; // Get the string that shows the conditions (air/type of liquid)
	string liquidinfo$ = sheetname.GetToken(8,"_")$; // Get the string that shows the conditions (air/type of liquid) (if necessary)
	string daysNo$ = sheetname.GetToken(9,"_")$; // get the string, which shows the number of days
	
	string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
	string condgraphlegend$; // This string will depend on "liquidtype" and it will display the type of liquid for the graph legend
	string timegraphlegend$; // This string will depend on "daysNo" and it will display the type of liquid for the graph legend

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	// Create the UV-VIS graph
	string activeworkbook$=%H; // Get the name of the (active) workbook to be processed
	win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_UV-VIS.otpu" UVVIS;  // create a graph window using template
	win -a %(activeworkbook$);  // activate the previous window (workbook)
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

doc -ef LB { // loop over all workbooks in folder
	page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
	wks.colwidth = 12;// set all col width to 12
	page.active = 1; // Switch to the first worksheet. I do not want the metadata worksheets to be parsed.
	
	string sheetname$=page.longname$; // Get the name of worksheet
	
	string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
	string architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
	string material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material
	
	string concentration$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
	string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
	string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units

	string solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content
	string additive$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive
	
	string liquidtype$ = sheetname.GetToken(7,"_")$; // Get the string that shows the conditions (air/type of liquid)
	string liquidinfo$ = sheetname.GetToken(8,"_")$; // Get the string that shows the conditions (air/type of liquid) (if necessary)
	string daysNo$ = sheetname.GetToken(9,"_")$; // get the string, which shows the number of days
	
	string conunitslegend$; // This string will depend on "concunits" and it will display the concentration for the graph legend
	string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
	string condgraphlegend$; // This string will depend on "condition" and it will display the type of condition for the graph legend
	string timegraphlegend$; // This string will depend on "minutesNo" and it will display the number of minutes for the graph legend
	string legend$;  // This string will depend on all legend string and it will display the graph legend

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
		// Check for NaN columns
		range rb = [%H]1!wcol(2);  // data range of (Is max) column (col(B))
		
		string NaNb$ = Lookup("NaN", rb)$;
		
		if (Nanb$=="NaN" || exist(%H,2)==0) continue; // If object does not exist or if "NaN" is present, then just continue to the next workbook. When LabVIEW measurements are interrupted (they yield NaN values)
			else
			{
				conunitslegend$ = MakeConcUnitsLegend(concunits$)$; // Note ending '$'
				additivegraphlegend$ = MakeAdditiveLegend(additivetype$)$; // Note ending '$'
				condgraphlegend$ = MakeConditionLegend(condition$)$; // Note ending '$'
				timegraphlegend$ = MakeTimeLegend(timelength$)$; // Note ending '$'
				
				legend$ = "%(material$), %(concnumber$) %(conunitslegend$), %(additivegraphlegend$), %(condgraphlegend$), %(timegraphlegend$)"; // Legend
			};
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
		
			col(A)[L]$ = "Wavelength"; // Long name
			col(A)[U]$ = nm; // Units
			
			col(B)[L]$ = "Intensity"; // Long name
			col(B)[U]$ = AU; // Units
			col(B)[C]$ = legend$; // Comments
			
			col(C)[L]$ = "Normalized intensity"; // Long name
			col(C)[U]$ = AU; // Units
			col(C)[C]$ = legend$; // Comments
			col(C)[O]$ = "col(B)-min(col(B))";
			
			// Plot column
			range r1 = [%H]1!wcol(3);  // data range of column
			
			// Single I vs t graph
			win -a UVVIS;  // activate the graph window
			//page.active = nActive;  // activate the layer for plot
			layer.include(r1);  // plot in the active layer
			
			layer -a;  // rescale the layer
			layer -g; // Group the datasets in the layer to %(we$)to-color increment
			win -a %(activeworkbook$);  // activate the previous window (workbook)
	}
	
	win -a UVVIS;  // activate the graph window
	page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(liquidtype$)_%(liquidinfo$)_UV-VIS"; //this renames the active window (long name)
	win -r UVVIS %(material$)_%(additive$)_UVVIS; //this renames the active window (short name); //this renames the active window (short name)
	layer -gu; // Ungroup the datasets in the layer
	legend; // Update the legend
}
