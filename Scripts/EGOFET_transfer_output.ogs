// This script is used in EG-OFET operational stability experiments. It plots transfer and output curves taken with the low noise rig in the saturation drain voltage.
// It loops over all the workbooks in the folder and creates four new columns, one pair for the abs(Id) and one pair for abs(Ig).
// NOTE: The program expects that the OverviewTimePoints and the IndividualGraphTimePoints are subsets of the PlottedTimePoints.

// Author: Dimitrios Simatos
// Version: 3.5
// Current status: Works well.
// Changes: Replaced additivetype$ with additive$.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;
	

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// Call libraries.

	Library.Main; // Run Main section of Library file

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
	
	// Define time points to plot
	Dataset PlottedTimePoints = {20,30,40,50,60,100,120,140,160,180,200,250,300,400,500,600,700,800};
	Dataset OverviewTimePoints = {100,200,300,400,500,600};
	Dataset IndividualGraphTimePoints = {100,400};
	//Dataset Graph1Limits = {10,200};
	//Dataset Graph2Limits = {200,800};
	
	// Parameters
	string Rate$="40-ulmin"; // The flow rate (e.g. "40-ulmin" or "none")
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	doc -ef LB { // loop over all workbooks in folder
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		
		string sheetname$ = page.longname$; // Get the name of worksheet
		
		string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
		string architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
		string material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material
		
		string concentration$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
		string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
		string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units
		
		string solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content
		
		string annealing$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive
		
		string additive$ = sheetname.GetToken(7,"_")$; // Get the string that shows the additive
		
		//string dielectric$ = sheetname.GetToken(7,"_")$; // Get the string that shows the dielectric
		//string dielectricconc$ = sheetname.GetToken(8,"_")$; // Get the string that shows the dielectric concentration or ratio
		
		string sampleNo$ = sheetname.GetToken(8,"_")$; // Get the string that shows the sample number
		
		//string deviceNo$ = sheetname.GetToken(10,"_")$; // Get the string that shows the device number
		
		//string length$ = sheetname.GetToken(11,"_")$; // Get the string that shows the channel length
		//string lengthnumber$ = length.GetToken(1,"-")$; // Get the string that shows the length number
		//string lengthunits$ = length.GetToken(2,"-")$; // Get the string that shows the length units
		
		string stepNo$ = sheetname.GetToken(10,"_")$; // Get the string that shows the step number in the cycling process
		string condition$ = sheetname.GetToken(11,"_")$; // Get the string that shows the conditions (air/type of liquid)
		string dayslength$ = sheetname.GetToken(12,"_")$; // get the string, which shows the number of days
		string daysNo$ = dayslength.GetToken(1,"-")$; // get the string, which shows the number of days
		string timelength$ = sheetname.GetToken(13,"_")$; // get the string, which shows the elapsed time
		string minutesNo$ = timelength.GetToken(1,"-")$; // get the string, which shows the number of minutes
		string meastype$ = sheetname.GetToken(14,"_")$; // Get the string "T" or "O", which shows if the curve is a transfer or output curve
		string measNo$ = sheetname.GetToken(15,"_")$; // Get the string that shows the measurement number
		string mode$ = sheetname.GetToken(16,"_")$; // Get the string that shows the measurement mode
		string intime$ = sheetname.GetToken(17,"_")$; // Get the string that shows the integration time
		intime$ = intime.GetToken(1,".")$; // Remove ".txt" from the integration time
		
		
		//// Transfer curve parameters
		//double W=1000; // Width [um]
		////double L=20; // Length [um]
		//double L=%(lengthnumber$); // Length [um] (extracted from the file name)
		//double d=3; // Thickness of accumulation layer [nm]
		//double er=2.1; // Dielectric constant (CYTOP: 2.1, PMMA: 3.6, SiO2: 3.9)
		//double e0=8.854E-12; // Vacuum permittivity [F/m]
		//double dielectricthickness = DielectricThicknessCalc(dielectric$, dielectricconc$); // Dielectric thickness [nm]
		//double Ci=e0*er/(dielectricthickness*10^(-9)); // Insulator capacitance per area [F/m^2]
		////double Ci=5.2E-5; // Ci for Cytop (Mark: 3.2 nF, 5.2 is for PMMA)
		
		
		//double jmaxlin; // Max channel current density (Linear)
		//double jmaxsat; // Max channel current density (Saturation)
		//double Pmaxlin; // Max channel power density (Linear)
		//double Pmaxsat; // Max channel power density (Saturation)
		
		//string Vdlin$; // Vd in the linear regime
		string Vdsat$; // Vd in the saturation regime
		//double Vtlin; // Threshold voltage (Linear)
		//double Vtsat; // Threshold voltage (Saturation)
		//double rlin; // Reliability factor (Linear)
		//double rsat; // Reliability factor (Saturation)
		
		string conunitslegend$; // This string will depend on "concunits" and it will display the concentration for the graph legend
		string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
		string condgraphlegend$; // This string will depend on "condition" and it will display the type of condition for the graph legend
		string daysgraphlegend$; // This string will depend on "daysNo" and it will display the type of liquid for the graph legend
		string minutesgraphlegend$; // This string will depend on "minutesNo" and it will display the number of minutes for the graph legend
		string modegraphlegend$; // This string will depend on "mode" and it will display the measurement mode for the graph legend
		string intimegraphlegend$; // This string will depend on "intime" and it will display the integration time for the graph legend
		
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
		// Check for NaN columns
		range rb = [%H]1!wcol(2);  // data range of (Is) (Vd=Vdlin) column (col(B))
		
		string NaNb$ = Lookup("NaN", rb)$;
		
		if (Nanb$=="NaN" || exist(%H,2)==0) continue; // If object does not exist or if "NaN" is present, then just continue to the next workbook. When LabVIEW measurements are interrupted (they yield NaN values)
			else
			{
				conunitslegend$ = MakeConcUnitsLegend(concunits$)$; // Note ending '$'
				additivegraphlegend$ = MakeAdditiveLegend(additive$)$; // Note ending '$'
				condgraphlegend$ = MakeConditionLegend(condition$)$; // Note ending '$'
				daysgraphlegend$ = MakeTimeLegend(dayslength$)$; // Note ending '$'
				minutesgraphlegend$ = MakeTimeLegend(timelength$)$; // Note ending '$'
				modegraphlegend$ = MakeMeasModeLegend(mode$)$; // Note ending '$'
				intimegraphlegend$ = MakeInTimeLegend(intime$)$; // Note ending '$'
				
				//string legend$ = "%(material$) %(concnumber$) %(conunitslegend$) %(additivegraphlegend$), %(condgraphlegend$), %(daysgraphlegend$), %(minutesgraphlegend$), %(modegraphlegend$), %(intimegraphlegend$)"; // Legend
				string legend$ = "%(condgraphlegend$), %(daysgraphlegend$), %(minutesgraphlegend$)"; // Legend
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				
				string activeworkbook$ = %H; // Get the name of the (active) workbook to be processed
				
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				
				// NOTE: If this is written with case structures instead of if-then structures, the program will crash due to Origin restrictions
				
				if (meastype$ == "T") // if this is an transfer curve then
				{
					wks.name$=Transfer; // Change the sheet name to "Transfer"
					wks.ncols=6; // set total column number to 6
					wks.colwidth = 10;// set all col width to 10
					
					// Extract Vdlin and Vdsat
					//string Vdlin$=col(D)[L]$;
					//Vdlin$=Vdlin.GetToken(2,"=")$; // Take the string on the right of the "=" sign
					//Vdlin$=Vdlin.GetToken(1,"V")$; // Take the string on the left of the "V" (units)
					//if (Vdlin.Find('.')!=0 && Vdlin.GetToken(2,".")$ == "0")
						//Vdlin$=Vdlin.GetToken(1,".")$; // Take the string on the left of the "." (this line gets rid of the decimal points if the right digit is 0)
					
					
					Vdsat$=col(C)[L]$;
					Vdsat$=Vdsat.GetToken(2,"=")$; // Take the string on the right of the "=" sign
					Vdsat$=Vdsat.GetToken(1,"V")$; // Take the string on the left of the "V" (units)
					if (Vdsat.Find('.')!=0 && Vdsat.GetToken(2,".")$ == "0")
						Vdsat$=Vdsat.GetToken(1,".")$; // Take the string on the left of the "." (this line gets rid of the decimal points if the right digit is 0)
					
					
					// Extract VgStart and VgStop
					string VgStart$=$(col(A)[1]); // VgStart is the value of the first cell of col(A)						
					string VgStop$=$(col(A)[wks.maxrows/2]); // VgStop is the middle cell of col(A) (assuming the gate voltage has a forward and reverse sweep) - wks.maxrows is the total number of (non-empty) rows
					
					
					// Write long name, units, comments, and parameters of columns
					col(E)[L]$ = col(C)[L]$; // Long name
					col(E)[U]$ = col(C)[U]$; // Units
					col(E)[O]$ = "abs(col(C))";
					col(F)[L]$ = col(D)[L]$; // Long name
					col(F)[U]$ = col(D)[U]$; // Units
					col(F)[O]$ = "abs(col(D))";
					
					//col(H)[L]$ = col(D)[L]$; // Long name
					//col(H)[U]$ = col(D)[U]$; // Units
					//col(H)[O]$ = "abs(col(D))";
					//col(I)[L]$ = col(E)[L]$; // Long name
					//col(I)[U]$ = col(E)[U]$; // Units
					//col(I)[O]$ = "abs(col(E))";
					//col(J)[L]$ = col(F)[L]$; // Long name
					//col(J)[U]$ = col(F)[U]$; // Units
					//col(J)[O]$ = "abs(col(F))";
					//col(K)[L]$ = col(G)[L]$; // Long name
					//col(K)[U]$ = col(G)[U]$; // Units
					//col(K)[O]$ = "abs(col(G))";
					
					
					
					//col(L)[L]$ = "gm (Linear)"; // Long name
					//col(L)[U]$ = S; // Units
					//differentiate iy:=Col(H) oy:=Col(L) order:=1;
					//col(L)[O]$ = "abs(col(L))";
					//col(L)[C]$ = "abs(d(Id (Vd=%(Vdlin$)V)/dV)";
					//
					//col(M)[L]$ = "Mobility (Linear)"; // Long name
					//col(M)[U]$ = cm^2/V*s; // Units
					//col(M) = 10000*L*col(L)/(W*Ci*abs(%(Vdlin$))); // The multiplication by 10000 is done to get the mobility in cm^2/Vs, instead of m^2/Vs.
					//
					//
					//
					//col(N)[L]$ = "SQRT(Id (Vd=%(Vdsat$)V))"; // Long name
					//col(N)[U]$ = A; // Units
					//col(N)[O]$ = "sqrt(col(I))";
					//
					//col(O)[L]$ = "gm (Saturation)"; // Long name
					//col(O)[U]$ = S; // Units
					//differentiate iy:=Col(N) oy:=Col(O) order:=1;
					//col(O)[O]$ = "abs(col(O))";
					//col(O)[C]$ = "abs(d(SQRT(Id (Vd=%(Vdsat$)V))/dV)";
					//
					//col(P)[L]$ = "Mobility (Saturation)"; // Long name
					//col(P)[U]$ = cm^2/V*s; // Units
					//col(P) = 10000*2*L*col(O)^2/(W*Ci); // The multiplication by 10000 is done to get the mobility in cm^2/Vs, instead of m^2/Vs.						
					//
					//
					//
					//col(Q)[L]$ = "Linear fit on SQRT(Id (Vd=%(Vdsat$)V))"; // Long name
					//col(Q)[U]$ = A; // Units
					//int lastrow=wks.maxrows/2; // The upper limit of the integration will be equal to the half of the total number of rows. The total number of rows does not include the empty rows (use "maxrows" command instead of "nRows").
					//int firstrow=lastrow-round(lastrow/6); // The lower limit of the integration will extend at a certain number of points from the last row.
					//fitLR iy:=[%H]1!(1,14)[firstrow:lastrow] oy:=col(Q); // Linear fit
					//Vt=-fitLR.a/fitLR.b; // To find the threshold voltage, divide the intercept with the slope.
					//Vt=round(Vt,1); // Round the threshold voltage
					//
					//// Linear extrapolation of the linear fit, to find the intercept with the X axis
					//range rq=(1,17); // Define XYrange
					//col(Q)=rq(col(A)); // Extrapolate for new X axis (col(A))
					//
					//
					//col(R)[L]$ = "Threshold voltage"; // Long name
					//col(R)[U]$ = V; // Units
					//Col(R)[1]=Vt; // Threshold voltage
					//
					//
					////-----------------------------------------------------------------------------------------------------------------------------------------------------------
					//
					//// Reliability factors
					//
					//// Find the average linear drain current for Vg=0V: Id,lin (Vd=0V)
					//col(S)[L]$ = "Row number for Vg=0"; // Long name
					//vfind ix:=col(A) value:=0 ox:=Col(S); // Find all indices for which Vg=0
					//
					//
					//
					//col(T)[L]$ = "Id,lin (Vg=0V)"; // Long name
					//col(T)[U]$ = A; // Units
					//col(T)[1]=col(H)[col(S)[1]];
					//col(T)[2]=col(H)[col(S)[2]];
					//double IdlinVg0=mean(col(T));
					//col(T)[3]=IdlinVg0; // The average Id,lin (Vg=0V)
					//wcellcolor col(T)[3] color(yellow); // Color the cell with the average value yellow
					//
					//
					//col(U)[L]$ = "Id,sat (Vg=0V)"; // Long name
					//col(U)[U]$ = A; // Units
					//col(U)[1]=col(I)[col(S)[1]];
					//col(U)[2]=col(I)[col(S)[2]];
					//double IdsatVg0=mean(col(U));
					//col(U)[3]=IdsatVg0; // The average Id,sat (Vg=0V)
					//wcellcolor col(U)[3] color(yellow); // Color the cell with the average value yellow
					//
					//
					//// Reliability factor (Linear)
					//col(V)[L]$ = "Reliability factor (Linear)"; // Long name
					//col(V)[U]$ = %; // Units
					//rlin=100*(max(col(H))-IdlinVg0)/max(abs(col(A)))/max(abs(col(L))); // Multiply by 100, since the units are %
					//rlin=round(rlin,1);
					//
					//// Write rlin on the first cell of col(V)
					//col(V)[1]=rlin;
					//
					//// Reliability factor (Saturation)
					//col(W)[L]$ = "Reliability factor (Saturation)"; // Long name
					//col(W)[U]$ = %; // Units
					//rsat=100*((max(col(N))-SQRT(IdsatVg0)))^2/max(abs(col(A)))^2/max(abs(col(O)))^2; // Multiply by 100, since the units are %
					//rsat=round(rsat,1);
					//
					//// Write rsat on the first cell of col(W)
					//col(W)[1]=rsat;
					//
					//
					////-----------------------------------------------------------------------------------------------------------------------------------------------------------
					//
					//// Current density and power density
					//col(X)[L]$ = "Max channel current density (Linear)"; // Long name
					//col(X)[U]$ = A/cm^2; // Units
					//col(X)[1] = max(col(H))/(W*10^(-4)*d*10^(-7)); // W is in um and d in nm. They are both converted to cm.
					//jmaxlin=col(X)[1];
					//
					//col(Y)[L]$ = "Max channel current density (Saturation)"; // Long name
					//col(Y)[U]$ = A/cm^2; // Units
					//col(Y)[1] = max(col(I))/(W*10^(-4)*d*10^(-7)); // W is in um and d in nm. They are both converted to cm.
					//jmaxsat=col(Y)[1];
					//
					//col(Z)[L]$ = "Max channel power density (Linear)"; // Long name
					//col(Z)[U]$ = W/cm^2; // Units
					//col(Z)[1] = max(col(H))*abs(%(Vdlin$))/(W*10^(-4)*L*10^(-4)); // W and L are in um, and are both converted to cm.
					//Pmaxlin=col(Z)[1];
					//
					//col(AA)[L]$ = "Max channel power density (Saturation)"; // Long name
					//col(AA)[U]$ = W/cm^2; // Units
					//col(AA)[1] = max(col(I))*abs(%(Vdsat$))/(W*10^(-4)*L*10^(-4)); // W and L are in um, and are both converted to cm.
					//Pmaxsat=col(AA)[1];
					//
					//-----------------------------------------------------------------------------------------------------------------------------------------------------------
					// Max source-drain electric field (Saturation)
					// NOTE: This should be smaller than 3*10^4 V/cm (see: DOI:10.1038/nmat5035)
					
					//col(AB)[L]$ = "Max source-drain electric field (Saturation)"; // Long name
					//col(AB)[U]$ = V/cm; // Units
					//col(AB)[1] = abs(%(Vdsat$))/(L*10^(-4)); // W and L are in um, and are both converted to cm.
					//Esd=col(AB)[1];
					
					//-----------------------------------------------------------------------------------------------------------------------------------------------------------
					// Column legends
					
					col(E)[C]$ = legend$;
					col(F)[C]$ = col(E)[C]$ + ", Leakage"; // Comment field (graph legend)
					
					//col(H)[C]$ = legend$;
					//col(I)[C]$ = col(H)[C]$; // Comment field (graph legend)
					//col(J)[C]$ = col(H)[C]$ + ", Leakage"; // Comment field (graph legend)
					//col(K)[C]$ = col(H)[C]$ + ", Leakage"; // Comment field (graph legend)
					
					//-----------------------------------------------------------------------------------------------------------------------------------------------------------
					// Plot graphs
					
					int TimePointIndexInPlottedTimePointsDataset;
					int TimePointIndexInOverviewTimePointsDataset;
					
					TimePointIndexInPlottedTimePointsDataset = list(%(minutesNo$), PlottedTimePoints); // Find if the time point of the measurement is one of the time points to be plotted (i.e. if it exists in the PlottedTimePoints dataset).
					if (TimePointIndexInPlottedTimePointsDataset != 0) // If the output of the list function is not 0 (i.e. this time point exists in the dataset) then plot the graphs for this time point.
						{
							// Id graph (Transfer curves)
							TemplateGeneric$ = "%(templatepath$)Generic_Transfer.otpu";
							graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Transfer_Vd=%(Vdsat$)V";
							Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_Transfer_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V.otpu"; // This is the template path
							Layers = {1};
							Columns = {5};
							LineTypes = {1}; // 1 for line plot, 2 for scatter plot
							PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 1, 0);
							
							// Ig graph
							TemplateGeneric$ = "%(templatepath$)Generic_Leakage.otpu";
							graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Leakage_Vd=%(Vdsat$)V";
							Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_Leakage_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V.otpu"; // This is the template path
							Layers = {1};
							Columns = {6};
							LineTypes = {1}; // 1 for line plot, 2 for scatter plot
							PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 1, 0);						
							
							// Plot the "10-200 minutes" graphs
							if (%(minutesNo$) >= 10 && %(minutesNo$) <= 200)
								{
									// Id graph (Transfer curves)
									TemplateGeneric$ = "%(templatepath$)Generic_Transfer.otpu";
									graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Transfer_Vd=%(Vdsat$)V_10-200_min";
									Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_Transfer_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_10-200_min.otpu"; // This is the template path
									Layers = {1};
									Columns = {5};
									LineTypes = {1}; // 1 for line plot, 2 for scatter plot
									PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 0, 0);
									
									// Ig graph
									TemplateGeneric$ = "%(templatepath$)Generic_Leakage.otpu";
									graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Leakage_Vd=%(Vdsat$)V_10-200_min";
									Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_Leakage_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_10-200_min.otpu"; // This is the template path
									Layers = {1};
									Columns = {6};
									LineTypes = {1}; // 1 for line plot, 2 for scatter plot
									PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 0, 0);
								};		
								
							// Plot the "200-800 minutes" graphs
							if (%(minutesNo$) >= 200 && %(minutesNo$) <= 800)
								{
									// Id graph (Transfer curves)
									TemplateGeneric$ = "%(templatepath$)Generic_Transfer.otpu";
									graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Transfer_Vd=%(Vdsat$)V_200-800_min";
									Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_Transfer_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_200-800_min.otpu"; // This is the template path
									Layers = {1};
									Columns = {5};
									LineTypes = {1}; // 1 for line plot, 2 for scatter plot
									PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 0, 0);
									
									// Ig graph
									TemplateGeneric$ = "%(templatepath$)Generic_Leakage.otpu";
									graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Leakage_Vd=%(Vdsat$)V_200-800_min";
									Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_Leakage_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_200-800_min.otpu"; // This is the template path
									Layers = {1};
									Columns = {6};
									LineTypes = {1}; // 1 for line plot, 2 for scatter plot
									PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 0, 0);
								};
								
								
							// Plot the "100-600 minutes" graph (Overview graph). Only the points in the OverviewTimePoints dataset are plotted. These time points should also exist in the PlottedTimePoints dataset.
							
							TimePointIndexInOverviewTimePointsDataset = list(%(minutesNo$), OverviewTimePoints); // Find if the time point of the measurement is one of the time points to be plotted (i.e. if it exists in the PlottedTimePoints dataset).
							if (TimePointIndexInOverviewTimePointsDataset != 0) // If the output of the list function is not 0 (i.e. this time point exists in the dataset) then plot the graphs for this time point.
								{
									// Id, Ig graph (Transfer curves)
									TemplateGeneric$ = "%(templatepath$)Generic_Transfer_Leakage.otpu";
									graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Transfer_Leakage_Vd=%(Vdsat$)V_100-600_min";
									Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_Transfer_Leakage_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_100-600_min.otpu"; // This is the template path
									Layers = {1, 1};
									Columns = {5, 6};
									LineTypes = {1, 1}; // 1 for line plot, 2 for scatter plot
									PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 2, Columns, LineTypes, activeworkbook$, 1, 0, 0);
								};
								
							// Plot the graphs at individual time points
							
							loop(i,1,IndividualGraphTimePoints.GetSize()) // Loop over each element of the IndividualGraphTimePoints dataset (each time point to be individually plotted)
								{
									if (%(minutesNo$) == IndividualGraphTimePoints(i))
										{
											// Id, Ig graph (Transfer curves)
											TemplateGeneric$ = "%(templatepath$)Generic_Transfer_Leakage_single.otpu";
											graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Transfer_Leakage_Vd=%(Vdsat$)V_%(minutesNo$)_min";
											Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_Transfer_Leakage_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // This is the template path
											Layers = {1, 1};
											Columns = {5, 6};
											LineTypes = {1, 1}; // 1 for line plot, 2 for scatter plot
											PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 2, Columns, LineTypes, activeworkbook$, 1, 0, 0);
										};
								};
						};
				};
				
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				else // if this is an output curve
				{						
					wks.name$=Output; // Change the sheet name to "Output"
					int NoofVgs = (wks.ncols-1)/3; // The number of different Vg voltages is going to be equal to the total No of columns, minus the gate voltage column, divided by 3 (as there are three currents for each Vg: Is, Id, Ig).
					wks.ncols = wks.ncols + NoofVgs*2;  // The number of columns will be equal to the old one plus two new columns for each Vg (one for abs(Id) and one for abs(Ig)).						
					wks.colwidth = 8;// set all col width to 8
					
					
					// Extract VdStart and VdStop
					string VdStart$=$(col(A)[1]); // VdStart is the value of the first cell of col(A)						
					string VdStop$=$(col(A)[wks.maxrows/2]); // VdStop is the middle cell of col(A) (assuming the gate voltage has a forward and reverse sweep) - wks.maxrows is the total number of (non-empty) rows
					
					
					loop(i,1,NoofVgs)
						{
							activeworkbook$ = %H; // Get the name of the (active) workbook to be processed
							
							// Extract Vg							
							string Vg$=wcol(i+1)[L]$; // Start from column 2
							Vg$=Vg.GetToken(2,"=")$; // Take the string on the right of the "=" sign
							Vg$=Vg.GetToken(1,"V")$; // Take the string on the left of the "V" (units)
							if (Vg.Find('.')!=0 && Vg.GetToken(2,".")$ == "0")
								Vg$=Vg.GetToken(1,".")$; // Take the string on the left of the "." (this line gets rid of the decimal points if the right digit is 0)
							
							
							// Create a new column for abs(Id)
							wcol(i+NoofVgs+1+2*NoofVgs)[L]$ = col(%(i+NoofVgs+1))[L]$; // First Id column is i+NoofVgs+1. First empty column on the right is i+NoofVgs+1+2*NoofVgs. abs(Id(Vg)) and Id(Vg) will have a distance of 2*NoofVgs (e.g. col(N) will be ans(col(F)) if NoofVgs is 4)
							wcol(i+NoofVgs+1+2*NoofVgs)[U]$ = A; // Units
							wcol(i+NoofVgs+1+2*NoofVgs)[O]$ = "abs(col(%(i+NoofVgs+1)))";
							wcol(i+NoofVgs+1+2*NoofVgs)[C]$ =  "Vg=%(Vg$)V, %(legend$)";
							
							
							// Create a new column for abs(Ig)
							wcol(i+NoofVgs+1+3*NoofVgs)[L]$ = col(%(i+2*NoofVgs+1))[L]$; // abs(Ig) column will be NoofVgs further away from abs(Id)
							wcol(i+NoofVgs+1+3*NoofVgs)[U]$ = A; // Units
							wcol(i+NoofVgs+1+3*NoofVgs)[O]$ = "abs(col(%(i+2*NoofVgs+1)))";
							wcol(i+NoofVgs+1+3*NoofVgs)[C]$ =  "Vg=%(Vg$)V, %(legend$), Leakage";
							
							// Output plot with all the Id
							TemplateGeneric$ = "%(templatepath$)Generic_Output.otpu";
							graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Output";
							Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_Output_Vd=%(VdStart$)V to %(VdStop$)V.otpu"; // This is the template path
							Layers = {1};
							Columns = {i+NoofVgs+1+2*NoofVgs};
							LineTypes = {1}; // 1 for line plot, 2 for scatter plot
							PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 1, Columns, LineTypes, activeworkbook$, 1, 1, 0);
							
							
							// Individual output plot with a single Id and Ig
							TemplateGeneric$ = "%(templatepath$)Generic_Output_single.otpu";
							graphname$ = "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Output_leakage_Vg=%(Vg$)V";
							Template$ = "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_Output_Leakage_Vg=%(Vg$)V_Vd=%(VdStart$)V to %(VdStop$)V_single.otpu"; // This is the template path
							Layers = {1, 1};
							Columns = {i+NoofVgs+1+2*NoofVgs, i+NoofVgs+1+3*NoofVgs};
							LineTypes = {1, 1}; // 1 for line plot, 2 for scatter plot
							PlotSingle(graphname$, Template$, TemplateGeneric$, Layers, 2, Columns, LineTypes, activeworkbook$, 1, 0, 0);
						};
				};
				
				win -a %(activeworkbook$);  // activate the previous window (workbook)
				window -ch 1; // hide the workbook that was processed
			};
}