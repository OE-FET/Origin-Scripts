// This script is used in transfer curves taken with the low noise rig in two drain voltages. It loops over all the workbooks in the folder and creates four new columns, one pair for the abs(Id) and one pair for abs(Ig).
// NOTE: The saturation curve is best measured by short-circuiting the drain and gate and sweeping them simultaneously. This eliminates any chance of minority carriers participating in the mobility calculations.
// Author: Dimitrios Simatos
// Version: 1.0
// Current status: Works well.
// Changes: Added mobility and gm  plots.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	doc -ef LB { // loop over all workbooks in folder
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		
		string sheetname$=page.longname$; // Get the name of worksheet
		
		string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
		string architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
		string material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material

		string concentration$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
		string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
		string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units

		string solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content
		
		string additive$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive
		//string addthickness$ = additive.GetToken(2,"-")$; // Get the string that shows the additive thickness
		//string addthicknessunits$ = additive.GetToken(3,"-")$; // Get the string that shows the additive thickness units
		
		string dielectric$ = sheetname.GetToken(7,"_")$; // Get the string that shows the dielectric
		string dielectricconc$ = sheetname.GetToken(8,"_")$; // Get the string that shows the dielectric concentration or ratio

		string sampleNo$ = sheetname.GetToken(9,"_")$; // Get the string that shows the sample number

		string deviceNo$ = sheetname.GetToken(10,"_")$; // Get the string that shows the device number

		string length$ = sheetname.GetToken(11,"_")$; // Get the string that shows the concentration
		string lengthnumber$ = length.GetToken(1,"-")$; // Get the string that shows the length number
		string lengthunits$ = length.GetToken(2,"-")$; // Get the string that shows the length units

		//string stepNo$ = sheetname.GetToken(8,"_")$; // Get the string that shows the step number in the cycling process
		string condtype$ = sheetname.GetToken(12,"_")$; // Get the string that shows the conditions (air/type of liquid)
		//string condinfo$ = sheetname.GetToken(10,"_")$; // Get the string that shows the conditions (air/type of liquid) (if necessary)
		string dayslength$ = sheetname.GetToken(13,"_")$; // get the string, which shows the number of days
		string daysNo$ = dayslength.GetToken(1,"-")$; // get the string, which shows the number of days
		//string minutesNo$ = sheetname.GetToken(12,"_")$; // get the string, which shows the number of minutes
		string workbooktype$=sheetname.GetToken(14,"_")$; // Get the string "T" or "O", which shows if the curve is a transfer or output curve
		string workbookNo$=sheetname.GetToken(15,"_")$; // Get the string that shows the workbook number
		workbookNo$=workbookNo.GetToken(1,".")$; // Remove ".txt" from the workbook number

		// Transfer curve parameters
		double W=1000; // Width [um]
		//double L=20; // Length [um]
		double L=%(lengthnumber$); // Length [um] (extracted from the file name)
		double er=2.1; // Dielectric constant (CYTOP: 2.1, PMMA: 3.6)
		double e0=8.854E-12; // Vacuum permittivity
		double dielectricthickness=500; // Dielectric thickness [nm] (CYTOP: 500, PMMA: 300)
		double Ci=e0*er/(dielectricthickness*10^(-9)); // Insulator capacitance
		double beta=1.28; // Parameter for power law dependence of the mobility
		double Vt; // Threshold voltage
		double LinearFitPoints=wks.maxrows/8; // Points of the linear fit
		LinearFitPoints=round(LinearFitPoints);
		
		
		string condgraphlegend$; // This string will depend on "condtype" and it will display the type of condition for the graph legend
		string daysgraphlegend$; // This string will depend on "daysNo" and it will display the type of liquid for the graph legend

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
		if(exist(%H,2)==0) continue; // not a workbook, must be a matrix
			else
			{
				switch (%(condtype$)) // Case study
					{
						case "ultrapure": // If the string is "ultrapure", write "ultrapure water" in the comment field
							condgraphlegend$ = "Ultrapure water"; // Comment field (graph legend)
							break;
						
						case "town": // If the string is "town", write "town water" in the comment field
							condgraphlegend$ = "Town water"; // Comment field (graph legend)
							break;
						
						case "pbuffer": // If the string is "phosphatebuffer", write "Phosphate buffer (pH="pHValue", "buffer concentration" "buffer concentration units")" in the comment field
							string pH$ = condinfo.GetToken(2,"-")$; // get the string, which shows the pH
							pH$ = pH.Substitute(".", ",", 0)$; // Substitute comma with dot
							string bufferconcentration$ = condinfo.GetToken(3,"-")$; // get the string, which shows the buffer concentration
							string bufferconcunits$ = condinfo.GetToken(4,"-")$; // get the string, which shows the buffer concentration
							condgraphlegend$ = "Phosphate buffer (pH= %(pH$), %(bufferconcentration$) %(bufferconcunits$)"; // Comment field (graph legend)
							break;
						
						case "N2": // If the string is "N2", write "N2" in the comment field
							condgraphlegend$ = "N2"; // Comment field (graph legend)
							break;
						
						default: // For all other strings, write "air" in the comment field
							condgraphlegend$ = "air"; // Comment field (graph legend)
							break;
					}
						
				switch (%(daysNo$)) // Case study
					{
						case "initial": // If the string is "initial", write "initial" in the comment field
							daysgraphlegend$ = "initial"; // Comment field (graph legend)
							break;
						
						case "1": // If the number is 1, use single form
							daysgraphlegend$ = "1 day"; // Comment field (graph legend)
							break;
						
						default: // For all other numbers, use plural form
							daysgraphlegend$ = "%(daysNo$) days"; // Comment field (graph legend)
							break;
					}

				//switch (%(minutesNo$)) // Case study
					//{
						//case "air": // If the string is "air", write "air in the comment field
							//col(E)[C]$ = "%(condgraphlegend$)"; // Comment field (graph legend)
							//break;
						//
						//case "1": // If the number is 1, use single form
							//col(E)[C]$ = "%(condgraphlegend$), %(daysgraphlegend$), %(minutesNo$) minute"; // Comment field (graph legend)
							//break;
						//
						//default: // For all other numbers, use plural form
							//col(E)[C]$ = "%(condgraphlegend$), %(daysgraphlegend$), %(minutesNo$) minutes"; // Comment field (graph legend)
							//break;
					//}
					
				if (workbooktype$ == "T") // if this is an transfer curve then
				{
						wks.ncols=14; // set total column number to 14
						wks.colwidth = 8;// set all col width to 8
						
						// Extract Vdlin and Vdsat
						string Vdlin$=col(D)[L]$;
						Vdlin$=Vdlin.GetToken(2,"=")$; // Take the string on the right of the "=" sign
						Vdlin$=Vdlin.GetToken(1,"V")$; // Take the string on the left of the "V" (units)
						int Vdlinint = %(Vdlin$); // Convert string to integer
						Vdlin$= $(Vdlinint); // Convert integer to string (these two lines get rid of the decimal points)
						
						string Vdsat$=col(E)[L]$;
						Vdsat$=Vdsat.GetToken(2,"=")$; // Take the string on the right of the "=" sign
						Vdsat$=Vdsat.GetToken(1,"V")$; // Take the string on the left of the "V" (units)
						int Vdsatint = %(Vdsat$); // Convert string to integer
						Vdsat$= $(Vdsatint); // Convert integer to string (these two lines get rid of the decimal points)						
						
						
						// Extract VgStart and VgStop
						range ra = col(A);						
						string VgStart$= $(ra[1]); // VgStart is the value of the first cell of col(A)						
						string VgStop$=$(ra[wks.maxrows/2]); // VgStop is the middle cell of col(A) (assuming the gate voltage has a forward and reverse sweep) - wks.maxrows is the total number of rows
						
						
						// Write long name, units, comments, and parameters of column B
						col(H)[L]$ = col(D)[L]$; // Long name
						col(H)[U]$ = col(D)[U]$;; // Units
						col(H)[O]$ = "abs(col(D))";
						col(I)[L]$ = col(E)[L]$; // Long name
						col(I)[U]$ = col(E)[U]$; // Units
						col(I)[O]$ = "abs(col(E))";
						col(J)[L]$ = col(F)[L]$; // Long name
						col(J)[U]$ = col(F)[U]$;; // Units
						col(J)[O]$ = "abs(col(F))";
						col(K)[L]$ = col(G)[L]$; // Long name
						col(K)[U]$ = col(G)[U]$; // Units
						col(K)[O]$ = "abs(col(G))";
						
						
						
						col(L)[L]$ = "gm (Linear)"; // Long name
						col(L)[U]$ = S; // Units
						differentiate iy:=Col(8) oy:=Col(12) order:=1;
						col(L)[O]$ = "abs(col(L))";
						col(L)[C]$ = "abs(d(Id (Vd=%(Vdlin$)V)/dV)";
						
						col(M)[L]$ = "Mobility (Linear)"; // Long name
						col(M)[U]$ = cm^2/V*s; // Units
						col(M) = 10000*L*col(L)/(W*Ci*%(Vdlin$)); // The multiplication by 10000 is done to get the mobility in cm^2/Vs, instead of m^2/Vs.
						
						
						
						col(N)[L]$ = "SQRT(Id (Vd=%(Vdsat$)V) /A)"; // Long name
						col(N)[U]$ = A; // Units
						col(N)[O]$ = "sqrt(col(I))";
						
						col(O)[L]$ = "gm (Saturation)"; // Long name
						col(O)[U]$ = S; // Units
						differentiate iy:=Col(14) oy:=Col(15) order:=1;
						col(O)[O]$ = "abs(col(O))";
						col(O)[C]$ = "abs(d(SQRT(Id (Vd=%(Vdsat$)V))/dV)";
						
						col(P)[L]$ = "Mobility (Saturation)"; // Long name
						col(P)[U]$ = cm^2/V*s; // Units
						col(P) = 10000*2*L*col(O)^2/(W*Ci); // The multiplication by 10000 is done to get the mobility in cm^2/Vs, instead of m^2/Vs.						
						
						
						
						col(Q)[L]$ = "Linear fit on SQRT(Id (Vd=%(Vdsat$)V) /A)"; // Long name
						col(Q)[U]$ = A; // Units
						int lastrow=wks.maxrows/2; // The upper limit of the integration will be equal to the half of the total number of rows. The total number of rows does not include the empty rows (use "maxrows" command instead of "nRows").
						int firstrow=lastrow-LinearFitPoints; // The lower limit of the integration will extend at a certain number of points from the last row.
						fitLR iy:=[%H]1!(1,14)[firstrow:lastrow] oy:=col(17); // Linear fit
						Vt=-fitLR.a/fitLR.b; // To find the threshold voltage, divide the intercept with the slope.
						
						col(R)[L]$ = "Threshold voltage"; // Long name
						col(R)[U]$ = V; // Units
						range rr = Col(R);
						rr[1]=Vt; // Threshold voltage
						
						
						// Find the average linear drain current for Vg=0V: Id,lin (Vd=0V)
						col(S)[L]$ = "Row number for Vg=0"; // Long name
						vfind ix:=col(A) value:=0 ox:=Col(S); // Find all indices for which Vg=0
						
						col(T)[L]$ = "Id,lin (Vg=0V) /A"; // Long name
						col(T)[U]$ = A; // Units
						range rs=col(S);
						range rt=col(T);
						rt[1]=col(H)[rs[1]];
						rt[2]=col(H)[rs[2]];
						double IdlinVg0=mean(col(T));
						rt[3]=IdlinVg0; // The average Id,lin (Vg=0V)
						
						
						col(U)[L]$ = "Id,sat (Vg=0V) /A"; // Long name
						col(U)[U]$ = A; // Units
						range ruu=col(U);
						ruu[1]=col(I)[rs[1]];
						ruu[2]=col(I)[rs[2]];
						double IdsatVg0=mean(col(U));
						ruu[3]=IdsatVg0; // The average Id,sat (Vg=0V)
						
						
						col(V)[L]$ = "Reliability factor (Linear)"; // Long name
						col(V)[U]$ = %; // Units
						double rlin=(max(col(H))-IdlinVg0)/max(col(A))/max(col(L));
						rlin=round(rlin,1);
						%A=$(rlin);
						
						range rv=col(V);
						rv[1]=rlin;
						
						
						col(W)[L]$ = "Reliability factor (Saturation)"; // Long name
						col(W)[U]$ = %; // Units
						double rsat=(SQRT(max(col(H)))-SQRT(IdsatVg0))^2/max(col(A))^2/max(col(O))^2;
						rsat=round(rsat,1);
						%B=$(rsat);
						
						range rw=col(W);
						rw[1]=rsat;
						
						
						
						col(H)[C]$ = "%(condgraphlegend$), %(daysgraphlegend$)";
						col(I)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(J)[C]$ = col(H)[C]$ + ", Leakage"; // Comment field (graph legend)
						col(K)[C]$ = col(H)[C]$ + ", Leakage"; // Comment field (graph legend)
						col(L)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(M)[C]$ = col(H)[C]$; // Comment field (graph legend)
						//col(N)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(O)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(P)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(Q)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(R)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(S)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(T)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(U)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(V)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(W)[C]$ = col(H)[C]$; // Comment field (graph legend)
						
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						// Plot graphs
						// Set range variables
						range r1 = [%H]1!wcol(8);  // data range of abs(Id) (Vd=Vdlin) column (col(H))
						range r2 = [%H]1!wcol(9);  // data range of abs(Id) (Vd=Vdsat) column (col(I))
						range r3 = [%H]1!wcol(10);  // data range of abs(Ig) (Vd=Vdlin) column (col(J))
						range r4 = [%H]1!wcol(11);  // data range of abs(Ig) (Vd=Vdsat) column (col(K))
						
						range r5 = [%H]1!wcol(12);  // data range of gm (Linear) column (col(L))
						range r6 = [%H]1!wcol(13);  // data range of Mobility (Linear) column (col(M))
						range r7 = [%H]1!wcol(14);  // data range of SQRT(Id (Vd=Vdsat) /A) column (col(N))
						range r8 = [%H]1!wcol(15);  // data range of gm (Saturation) column (col(O))
						range r9 = [%H]1!wcol(16);  // data range of Mobility (Saturation) column (col(P))
						range r10 = [%H]1!wcol(17);  // data range of Linear fit on SQRT(Id (Vd=Vdsat) /A) column (col(Q))
						range r11 = [%H]1!wcol(18);  // data range of Threshold voltage column (col(R))
						range r12 = [%H]1!wcol(19);  // data range of Row number for Vg=0 column (col(S))
						range r13 = [%H]1!wcol(20);  // data range of Id,lin (Vg=0V) /A column (col(T))
						range r14 = [%H]1!wcol(21);  // data range of Id,sat (Vg=0V) /A column (col(U))
						range r15 = [%H]1!wcol(22);  // data range of Reliability factor (Linear) column (col(V))
						range r16 = [%H]1!wcol(23);  // data range of Reliability factor (Saturation) column (col(W))
						
						// Plot linear transfer curve
						if(exist(%(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vdlin$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							// create a graph window using template	
							win -t p "%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Transfer_Leakage_Vd=%(Vdlin$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu" TransferIglin;
							layer.include(r1);  // plot in the active layer
							layer.include(r3);  // plot in the active layer
							
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condtype$)_%(dayslength$)_Transfer_Vd=%(Vdlin$)V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							win -r TransferIglin %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vdlin$); //this renames the active window (short name);
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							
						};
						else
						{
							// create a graph window using template	
							win -a %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vdlin$); // activate the graph window
							layer.include(r1);  // plot in the active layer
							layer.include(r3);  // plot in the active layer
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend													
							
						};
						
						// Plot saturation transfer curve
						if(exist(%(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vdsat$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							
							// create a graph window using template	
							win -t p "%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Transfer_Leakage_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu" TransferIgsat;
							layer.include(r2);  // plot in the active layer
							layer.include(r4);  // plot in the active layer
						
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condtype$)_%(dayslength$)_Transfer_Vd=%(Vdsat$)V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							win -r TransferIgsat %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vdsat$); //this renames the active window (short name);
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend							
							
						};
						else
						{
							// create a graph window using template	
							win -a %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vdsat$); // activate the graph window
							layer.include(r2);  // plot in the active layer
							layer.include(r4);  // plot in the active layer
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
						};
							
							
							
							
						// Plot mobility, gm (Linear)
						if(exist(%(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)ugm%(Vdlin$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							
							// create a graph window using template	
							win -t p "%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_u-gm_Vd=%(Vdlin$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu" ugmlin;
							page.active = 1; // activate Layer 1
							layer.include(r6);  // plot in the active layer
							page.active = 2; // activate Layer 2
							layer.include(r5);  // plot in the active layer							
							
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condtype$)_%(dayslength$)_u-gm-lin_Vd=%(Vdlin$)V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							win -r ugmlin %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)ugm%(Vdlin$); //this renames the active window (short name);
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend							
							
						};
						else
						{
							// create a graph window using template	
							win -a %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)ugm%(Vdlin$); // activate the graph window
							page.active = 1; // activate Layer 1
							layer.include(r6);  // plot in the active layer
							page.active = 2; // activate Layer 2
							layer.include(r5);  // plot in the active layer							
							
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend			
							
							
							
						};
						
						// Plot mobility, gm (Saturation)
						if(exist(%(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)ugm%(Vdsat$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							
							// create a graph window using template	
							win -t p "%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_u-gm_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu" ugmsat;
							page.active = 1; // activate Layer 1
							layer.include(r9);  // plot in the active layer
							page.active = 2; // activate Layer 2
							layer.include(r8);  // plot in the active layer							
							
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condtype$)_%(dayslength$)_u-gm-sat_Vd=%(Vdsat$)V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							win -r ugmsat %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)ugm%(Vdsat$); //this renames the active window (short name);
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend							
							
						};
						else
						{
							// create a graph window using template
							win -a %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)ugm%(Vdsat$); // activate the graph window
							page.active = 1; // activate Layer 1
							layer.include(r9);  // plot in the active layer
							page.active = 2; // activate Layer 2
							layer.include(r8);  // plot in the active layer							
							
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend			
							
							
							
						};
				};
				
				else // if this is an output curve
				{
						
						wks.ncols=21; // set total column number to 21
						wks.colwidth = 8;// set all col width to 8
						
						// Extract Vg
						string Vg1$=col(F)[L]$;
						Vg1$=Vg1.GetToken(2,"=")$; // Take the string on the right of the "=" sign
						Vg1$=Vg1.GetToken(1,"V")$; // Take the string on the left of the "V" (units)
						int Vg1int = %(Vg1$); // Convert string to integer
						Vg1$= $(Vg1int); // Convert integer to string (these two lines get rid of the decimal points)
						
						
						string Vg2$=col(G)[L]$;
						Vg2$=Vg2.GetToken(2,"=")$; // Take the string on the right of the "=" sign
						Vg2$=Vg2.GetToken(1,"V")$; // Take the string on the left of the "V" (units)
						int Vg2int = %(Vg2$); // Convert string to integer
						Vg2$= $(Vg2int); // Convert integer to string (these two lines get rid of the decimal points)
						
						
						string Vg3$=col(H)[L]$;
						Vg3$=Vg3.GetToken(2,"=")$; // Take the string on the right of the "=" sign
						Vg3$=Vg3.GetToken(1,"V")$; // Take the string on the left of the "V" (units)
						int Vg3int = %(Vg3$); // Convert string to integer
						Vg3$= $(Vg3int); // Convert integer to string (these two lines get rid of the decimal points)
						
						
						string Vg4$=col(I)[L]$;
						Vg4$=Vg4.GetToken(2,"=")$; // Take the string on the right of the "=" sign
						Vg4$=Vg4.GetToken(1,"V")$; // Take the string on the left of the "V" (units)
						int Vg4int = %(Vg4$); // Convert string to integer
						Vg4$= $(Vg4int); // Convert integer to string (these two lines get rid of the decimal points)
						
						
						// Extract VdStart and VdStop
						range rcola = col(A);						
						string VdStart$= $(rcola[1]); // VdStart is the value of the first cell of col(A)						
						string VdStop$=$(rcola[wks.maxrows/2]); // VdStop is the middle cell of col(A) (assuming the gate voltage has a forward and reverse sweep) - wks.maxrows is the total number of rows
						
						// Write long name, units, comments, and parameters of column B
						col(N)[L]$ = col(F)[L]$; // Long name
						col(N)[U]$ = A; // Units
						col(N)[O]$ = "abs(col(F))";
						col(O)[L]$ = col(G)[L]$; // Long name
						col(O)[U]$ = A; // Units
						col(O)[O]$ = "abs(col(G))";
						col(P)[L]$ = col(H)[L]$; // Long name
						col(P)[U]$ = A; // Units
						col(P)[O]$ = "abs(col(H))";
						col(Q)[L]$ = col(I)[L]$; // Long name
						col(Q)[U]$ = A; // Units
						col(Q)[O]$ = "abs(col(I))";
						
						col(R)[L]$ = col(J)[L]$; // Long name
						col(R)[U]$ = A; // Units
						col(R)[O]$ = "abs(col(J))";
						col(S)[L]$ = col(K)[L]$; // Long name
						col(S)[U]$ = A; // Units
						col(S)[O]$ = "abs(col(K))";
						col(T)[L]$ = col(L)[L]$; // Long name
						col(T)[U]$ = A; // Units
						col(T)[O]$ = "abs(col(L))";
						col(U)[L]$ = col(M)[L]$; // Long name
						col(U)[U]$ = A; // Units
						col(U)[O]$ = "abs(col(M))";
						
						// <------------ Add contact resistance calculation...
						
						col(N)[C]$ = "%(condgraphlegend$), %(daysgraphlegend$)";
						col(O)[C]$ = col(N)[C]$; // Comment field (graph legend)
						col(P)[C]$ = col(N)[C]$; // Comment field (graph legend)
						col(Q)[C]$ = col(N)[C]$; // Comment field (graph legend)
						col(R)[C]$ = col(N)[C]$ + ", Leakage"; // Comment field (graph legend)
						col(S)[C]$ = col(N)[C]$ + ", Leakage"; // Comment field (graph legend)
						col(T)[C]$ = col(N)[C]$ + ", Leakage"; // Comment field (graph legend)
						col(U)[C]$ = col(N)[C]$ + ", Leakage"; // Comment field (graph legend)
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						// Plot graphs
						// Set range variables
						range r1 = [%H]1!wcol(14);  // data range of abs(Id) (Vg=-0.0V) column
						range r2 = [%H]1!wcol(15);  // data range of abs(Id) (Vg=-20.0V) column
						range r3 = [%H]1!wcol(16);  // data range of abs(Id) (Vg=-40.0V) column
						range r4 = [%H]1!wcol(17);  // data range of abs(Id) (Vg=-60.0V) column
						
						range r5 = [%H]1!wcol(18);  // data range of abs(Ig) (Vg=-0.0V) column
						range r6 = [%H]1!wcol(19);  // data range of abs(Ig) (Vg=-20.0V) column
						range r7 = [%H]1!wcol(20);  // data range of abs(Ig) (Vg=-40.0V) column
						range r8 = [%H]1!wcol(21);  // data range of abs(Ig) (Vg=-60.0V) column
						
						if(%(workbookNo$)==1) // if this is the first workbook for this type of measurement then create a new graph
						{
							// Plot 1st output curve
							// create a graph window using template	
							win -t p "%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Output_Leakage_Vg=%(Vg1$)V_Vd=%(VdStart$)V to %(VdStop$)V_single.otpu" OutputIg1;
							layer.include(r1);  // plot in the active layer
							layer.include(r5);  // plot in the active layer
							
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condtype$)_%(dayslength$)_Output_Vg=%(Vg1$)V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							win -r OutputIg1 %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vg1$); //this renames the active window (short name);
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							
							// Plot 2nd output curve
							// create a graph window using template	
							win -t p "%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Output_Leakage_Vg=%(Vg2$)V_Vd=%(VdStart$)V to %(VdStop$)V_single.otpu" OutputIg2;
							layer.include(r2);  // plot in the active layer
							layer.include(r6);  // plot in the active layer
							
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condtype$)_%(dayslength$)_Output_Vg=%(Vg2$)V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							win -r OutputIg2 %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vg2$); //this renames the active window (short name);
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							
							// Plot 3rd output curve
							// create a graph window using template	
							win -t p "%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Output_Leakage_Vg=%(Vg3$)V_Vd=%(VdStart$)V to %(VdStop$)V_single.otpu" OutputIg3;
							layer.include(r3);  // plot in the active layer
							layer.include(r7);  // plot in the active layer
							
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condtype$)_%(dayslength$)_Output_Vg=%(Vg3$)V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							win -r OutputIg3 %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vg3$); //this renames the active window (short name);
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							
							// Plot 4th output curve
							// create a graph window using template	
							win -t p "%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Output_Leakage_Vg=%(Vg4$)V_Vd=%(VdStart$)V to %(VdStop$)V_single.otpu" OutputIg4;
							layer.include(r4);  // plot in the active layer
							layer.include(r8);  // plot in the active layer
							
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condtype$)_%(dayslength$)_Output_Vg=%(Vg4$)V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							win -r OutputIg4 %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vg4$); //this renames the active window (short name);
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						};
						else
						{
							// Plot 1st output curve
							// create a graph window using template	
							win -a %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vg1$); // activate the graph window
							layer.include(r1);  // plot in the active layer
							layer.include(r5);  // plot in the active layer
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							
							// Plot 2nd output curve
							// create a graph window using template	
							win -a %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vg2$); // activate the graph window
							layer.include(r2);  // plot in the active layer
							layer.include(r6);  // plot in the active layer
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							// Plot 3rd output curve
							// create a graph window using template	
							win -a %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vg3$); // activate the graph window
							layer.include(r3);  // plot in the active layer
							layer.include(r7);  // plot in the active layer
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							// Plot 4th output curve
							// create a graph window using template	
							win -a %(dielectric$)%(dielectricconc$)%(sampleNo$)%(deviceNo$)%(workbooktype$)%(Vg4$); // activate the graph window
							layer.include(r4);  // plot in the active layer
							layer.include(r8);  // plot in the active layer
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						};
				};
			};

plot -c; // refresh the graphs to update the labels

}