// This script is used in transfer curves taken with the low noise rig in two drain voltages. It loops over all the workbooks in the folder and plots the transfer and output curves.
// It then calculates and plots the (linear and saturation) mobility, transconductance, threshold voltage, and reliability factor.
// NOTE: The saturation curve is best measured by short-circuiting the drain and gate and sweeping them simultaneously. This eliminates any chance of minority carriers participating in the mobility calculations.

// How to use:
// 1. Set the capacitance per area value from impedance analysis measurements (or the thickness of the dielectric from profilometry).
// 2. Run the script.
// 3. Check that the Vt linear fitting is correct. Otherwise adjust the "int firstrow=lastrow-round(lastrow/6)" row. Reduce the denominator (e.g. to 3) to get a linear fit with more points if needed. Then re-run the script.
// NOTE: Usually the more straight the SQRT(Id), the smaller the denominator should be.

// Author: Dimitrios Simatos
// Version: 4.4
// Current status: Works well.
// Changes: Added a "hide workbook" command.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	string templatepath$="C:\Users\Administrator\Documents\OriginLab\2018\User Files\Templates\"; // define the template path

	doc -ef LB { // loop over all workbooks in folder
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		
		string sheetname$=page.longname$; // Get the name of worksheet
		
		string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
		string architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
		string material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material

		string concentration$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
		string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
		string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units

		string solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content

		string annealing$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive

		string additive$ = sheetname.GetToken(7,"_")$; // Get the string that shows the additive
		string additivetype$ = additive.GetToken(1,"-")$; // Get the string that shows the additive type
		//string addthickness$ = additive.GetToken(2,"-")$; // Get the string that shows the additive thickness
		//string addthicknessunits$ = additive.GetToken(3,"-")$; // Get the string that shows the additive thickness units
		
		string dielectric$ = sheetname.GetToken(8,"_")$; // Get the string that shows the dielectric
		string dielectricconc$ = sheetname.GetToken(9,"_")$; // Get the string that shows the dielectric concentration or ratio

		string sampleNo$ = sheetname.GetToken(10,"_")$; // Get the string that shows the sample number

		string deviceNo$ = sheetname.GetToken(11,"_")$; // Get the string that shows the device number

		string length$ = sheetname.GetToken(12,"_")$; // Get the string that shows the channel length
		string lengthnumber$ = length.GetToken(1,"-")$; // Get the string that shows the length number
		string lengthunits$ = length.GetToken(2,"-")$; // Get the string that shows the length units

		//string stepNo$ = sheetname.GetToken(8,"_")$; // Get the string that shows the step number in the cycling process
		string condition$ = sheetname.GetToken(13,"_")$; // Get the string that shows the conditions (air/type of liquid)
		string dayslength$ = sheetname.GetToken(14,"_")$; // get the string, which shows the number of days
		string daysNo$ = dayslength.GetToken(1,"-")$; // get the string, which shows the number of days
		//string minutesNo$ = sheetname.GetToken(12,"_")$; // get the string, which shows the number of minutes
		string meastype$=sheetname.GetToken(15,"_")$; // Get the string "T" or "O", which shows if the curve is a transfer or output curve
		string measNo$=sheetname.GetToken(16,"_")$; // Get the string that shows the measurement number
		string mode$=sheetname.GetToken(17,"_")$; // Get the string that shows the measurement mode
		string intime$=sheetname.GetToken(18,"_")$; // Get the string that shows the integration time
		intime$=intime.GetToken(1,".")$; // Remove ".txt" from the integration time
		
		
		// Transfer curve parameters
		double W=1000; // Width [um]
		//double L=20; // Length [um]
		double L=%(lengthnumber$); // Length [um] (extracted from the file name)
		double d=3; // Thickness of accumulation layer [nm]
		double er=2.1; // Dielectric constant (CYTOP: 2.1, PMMA: 3.6, SiO2: 3.9)
		double e0=8.854E-12; // Vacuum permittivity [F/m]
		double dielectricthickness=550; // Dielectric thickness [nm]
		double Ci=e0*er/(dielectricthickness*10^(-9)); // Insulator capacitance per area [F/m^2]
		//double beta=1.28; // Parameter for power law dependence of the mobility
		//double Ci=5.2E-5; // Ci for Cytop (Mark: 3.2 nF, 5.2 is for PMMA)

		// Thickness
		// CYTOP-M 3-1: 550 nm
		// CYTOP-M 1-5: 25 nm
		// CYTOP-S 3-1: 860 nm
		// CYTOP-S 1.5-1: 490 nm
		// CYTOP-S 1-1: 370 nm
		// CYTOP-S 1-2: 140 nm
		// CYTOP-S 1-3: 100 nm
		// PMMA: 300 nm
		
		double jmaxlin; // Max channel current density (Linear)
		double jmaxsat; // Max channel current density (Saturation)
		double Pmaxlin; // Max channel power density (Linear)
		double Pmaxsat; // Max channel power density (Saturation)
		
		string Vdlin$; // Vd in the linear regime
		string Vdsat$; // Vd in the saturation regime
		double Vt; // Threshold voltage
		double rlin; // Reliability factor (Linear)
		double rsat; // Reliability factor (Saturation)
		
		string condgraphlegend$; // This string will depend on "condition" and it will display the type of condition for the graph legend
		string daysgraphlegend$; // This string will depend on "daysNo" and it will display the type of liquid for the graph legend
		string minutesgraphlegend$; // This string will depend on "minutesNo" and it will display the number of minutes for the graph legend
		string modegraphlegend$; // This string will depend on "mode" and it will display the measurement mode for the graph legend
		string intimegraphlegend$; // This string will depend on "intime" and it will display the integration time for the graph legend

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
		// Check for NaN columns
		range rb = [%H]1!wcol(2);  // data range of (Is) (Vd=Vdlin) column (col(B))
		range rc = [%H]1!wcol(3);  // data range of (Is) (Vd=Vdsat) column (col(C))
		
		string NaNb$ = Lookup("NaN", rb)$;
		string NaNc$ = Lookup("NaN", rc)$;
		
		if(Nanb$=="NaN" || Nanc$=="NaN" || exist(%H,2)==0) continue; // If object does not exist or if "NaN" is present, then just continue to the next workbook. When LabVIEW measurements are interrupted, they yield NaN values.
			else
			{
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				// Case structures from filenames (used for legends).
				
				switch (%(concunits$)) // Case study
					{
						case "gl": // If the string is "gl", write "g/l" in the comment field
							conunitslegend$ = "g/l"; // Comment field (graph legend)
							break;
						
						default: // For all other numbers, use plural form
							conunitslegend$ = "mg/ml"; // Comment field (graph legend)
							break;
					}
					
				switch (%(additivetype$)) // Case study
					{
						case "Pristine": // If the string is "TCNQ", write "TCNQ" in the comment field
							additivegraphlegend$ = "Pristine"; // Comment field (graph legend)
							break;
						
						case "TCNQ": // If the string is "TCNQ", write "TCNQ" in the comment field
							additivegraphlegend$ = "+ TCNQ"; // Comment field (graph legend)
							break;
						
						case "F2TCNQ": // If the string is "F2TCNQ", write "F2TCNQ" in the comment field
							//string pH$ = condinfo.GetToken(1,"-")$; // get the string, which shows the pH
							additivegraphlegend$ = "+ F2TCNQ"; // Comment field (graph legend)
							break;
						
						case "SAM-1OCT-v": // If the string is "SAM-1OCT-v", write "1-Octanethiol (vapor)" in the comment field
							additivegraphlegend$ = "+ 1-Octanethiol (vapor)"; // Comment field (graph legend)
							break;
						
						case "SAM-1OCT-i": // If the string is "SAM-1OCT-i", write "1-Octanethiol (immersion)" in the comment field
							additivegraphlegend$ = "+ 1-Octanethiol (immersion)"; // Comment field (graph legend)
							break;
						
						case "SAM-TDF1OCT-v": // If the string is "SAM-TDF1OCT-v", write "3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (vapor)" in the comment field
							additivegraphlegend$ = "+ 3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (vapor)"; // Comment field (graph legend)
							break;
						
						case "SAM-TDF1OCT-i": // If the string is "SAM-TDF1OCT-i", write "3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (immersion)" in the comment field
							additivegraphlegend$ = "+ 3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (immersion)"; // Comment field (graph legend)
							break;
						
						default: // For all other strings, write "Pristine" in the comment field
							additivegraphlegend$ = "Pristine"; // Comment field (graph legend)
							break;
					}
							
				switch (%(condition$)) // Case study
					{
						case "DI-H2O": // If the string is "ultrapure", write "ultrapure water" in the comment field
							condgraphlegend$ = "DI water"; // Comment field (graph legend)
							break;
						
						case "up-H2O": // If the string is "ultrapure", write "ultrapure water" in the comment field
							condgraphlegend$ = "Ultrapure water"; // Comment field (graph legend)
							break;
						
						case "t-H2O": // If the string is "town", write "town water" in the comment field
							condgraphlegend$ = "Town water"; // Comment field (graph legend)
							break;
						
						case "ss": // If the string is "town", write "town water" in the comment field
							condgraphlegend$ = "Saline solution"; // Comment field (graph legend)
							break;
						
						case "pbuffer": // If the string is "phosphatebuffer", write "Phosphate buffer (pH="pHValue", "buffer concentration" "buffer concentration units")" in the comment field
							string pH$ = condition.GetToken(2,"-")$; // get the string, which shows the pH
							pH$ = pH.Substitute(".", ",", 0)$; // Substitute comma with dot
							string bufferconcentration$ = condition.GetToken(3,"-")$; // get the string, which shows the buffer concentration
							string bufferconcunits$ = condition.GetToken(4,"-")$; // get the string, which shows the buffer concentration
							condgraphlegend$ = "Phosphate buffer (pH= %(pH$), %(bufferconcentration$) %(bufferconcunits$)"; // Comment field (graph legend)
							break;
						
						case "IPA": // If the string is "IPA", write "IPA" in the comment field
							condgraphlegend$ = "IPA"; // Comment field (graph legend)
							break;
						
						case "N2": // If the string is "N2", write "N2" in the comment field
							condgraphlegend$ = "N2"; // Comment field (graph legend)
							break;
						
						case "air": // If the string is "air", write "air" in the comment field
							condgraphlegend$ = "air"; // Comment field (graph legend)
							break;
							
						default: // For all other strings, write "air" in the comment field
							condgraphlegend$ = "air"; // Comment field (graph legend)
							break;
					}
						
				switch (%(daysNo$)) // Case study
					{
						case "initial": // If the string is "initial", write "initial" in the comment field
							daysgraphlegend$ = "initial"; // Comment field (graph legend)
							break;
						
						case "1": // If the number is 1, use single form
							daysgraphlegend$ = "1 day"; // Comment field (graph legend)
							break;
						
						default: // For all other numbers, use plural form
							daysgraphlegend$ = "%(daysNo$) days"; // Comment field (graph legend)
							break;
					}
					
				//switch (%(minutesNo$)) // Case study
							//{
								//case "1": // If the number is 1, use single form
									//minutesgraphlegend$ = "%(minutesNo$) minute"; // Comment field (graph legend)
									//break;
								//
								//default: // For all other numbers, use plural form
									//minutesgraphlegend$ = "%(minutesNo$) minutes"; // Comment field (graph legend)
									//break;
							//}
						
						switch (%(mode$)) // Case study
							{
								case "P": // If the string is "P", write "Pulsed" in the comment field
									modegraphlegend$ = "Pulsed"; // Comment field (graph legend)
									break;
								
								case "C": // If the string is "C", write "Continuous" in the comment field
									modegraphlegend$ = "Continuous"; // Comment field (graph legend)
									break;
								
								default: // For all other cases, write "Continuous" in the comment field
									modegraphlegend$ = "Continuous"; // Comment field (graph legend)
									break;
							}
							
						switch (%(intime$)) // Case study
							{
								case "S": // If the string is "S", write "Short" in the comment field
									intimegraphlegend$ = "Short"; // Comment field (graph legend)
									break;
								
								case "M": // If the string is "M", write "Medium" in the comment field
									intimegraphlegend$ = "Medium"; // Comment field (graph legend)
									break;
								
								case "L": // If the string is "L", write "Long" in the comment field
									intimegraphlegend$ = "Long"; // Comment field (graph legend)
									break;
								
								default: // For all other cases, write "Long" in the comment field
									intimegraphlegend$ = "Long"; // Comment field (graph legend)
									break;
							}
						
					//string legend$ = "%(material$) %(concnumber$) %(conunitslegend$) %(additivegraphlegend$), %(condgraphlegend$), %(daysgraphlegend$), %(minutesgraphlegend$), %(modegraphlegend$), %(intimegraphlegend$)"; // Legend
					string legend$ = "%(condgraphlegend$), %(daysgraphlegend$)"; // Legend
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				
				string previousworkbook$=%H; // Get the name of the current window and store it in previousworkbook$
				
				if (meastype$ == "T") // if this is an transfer curve then
				{
						wks.name$=Transfer; // Change the sheet name to "Transfer"
						wks.ncols=14; // set total column number to 14
						wks.colwidth = 10;// set all col width to 10
						
						
						
						// Extract Vdlin and Vdsat
						Vdlin$=col(D)[L]$;
						Vdlin$=Vdlin.GetToken(2,"=")$; // Take the string on the right of the "=" sign
						Vdlin$=Vdlin.GetToken(1,"V")$; // Take the string on the left of the "V" (units)
						if (Vdlin.Find('.')!=0)
						{
							Vdlin$=Vdlin.GetToken(1,".")$; // Take the string on the left of the "." (this line gets rid of the decimal points)
						};
						
						
						Vdsat$=col(E)[L]$;
						Vdsat$=Vdsat.GetToken(2,"=")$; // Take the string on the right of the "=" sign
						Vdsat$=Vdsat.GetToken(1,"V")$; // Take the string on the left of the "V" (units)
						if (Vdsat.Find('.')!=0)
						{
							Vdsat$=Vdsat.GetToken(1,".")$; // Take the string on the left of the "." (this line gets rid of the decimal points)
						};
						
						
						// Extract VgStart and VgStop
						string VgStart$=$(col(A)[1]); // VgStart is the value of the first cell of col(A)						
						string VgStop$=$(col(A)[wks.maxrows/2]); // VgStop is the middle cell of col(A) (assuming the gate voltage has a forward and reverse sweep) - wks.maxrows is the total number of (non-empty) rows
						
						
						// Write long name, units, comments, and parameters of columns
						col(H)[L]$ = col(D)[L]$; // Long name
						col(H)[U]$ = col(D)[U]$; // Units
						col(H)[O]$ = "abs(col(D))";
						col(I)[L]$ = col(E)[L]$; // Long name
						col(I)[U]$ = col(E)[U]$; // Units
						col(I)[O]$ = "abs(col(E))";
						col(J)[L]$ = col(F)[L]$; // Long name
						col(J)[U]$ = col(F)[U]$; // Units
						col(J)[O]$ = "abs(col(F))";
						col(K)[L]$ = col(G)[L]$; // Long name
						col(K)[U]$ = col(G)[U]$; // Units
						col(K)[O]$ = "abs(col(G))";
						
						
						
						col(L)[L]$ = "gm (Linear)"; // Long name
						col(L)[U]$ = S; // Units
						differentiate iy:=Col(H) oy:=Col(L) order:=1;
						col(L)[O]$ = "abs(col(L))";
						col(L)[C]$ = "abs(d(Id (Vd=%(Vdlin$)V)/dV)";
						
						col(M)[L]$ = "Mobility (Linear)"; // Long name
						col(M)[U]$ = cm^2/V*s; // Units
						col(M) = 10000*L*col(L)/(W*Ci*abs(%(Vdlin$))); // The multiplication by 10000 is done to get the mobility in cm^2/Vs, instead of m^2/Vs.
						
						
						
						col(N)[L]$ = "SQRT(Id (Vd=%(Vdsat$)V))"; // Long name
						col(N)[U]$ = A^(1/2); // Units
						col(N)[O]$ = "sqrt(col(I))";
						
						col(O)[L]$ = "gm (Saturation)"; // Long name
						col(O)[U]$ = S; // Units
						differentiate iy:=Col(N) oy:=Col(O) order:=1;
						col(O)[O]$ = "abs(col(O))";
						col(O)[C]$ = "abs(d(SQRT(Id (Vd=%(Vdsat$)V))/dV)";
						
						col(P)[L]$ = "Mobility (Saturation)"; // Long name
						col(P)[U]$ = cm^2/V*s; // Units
						col(P) = 10000*2*L*col(O)^2/(W*Ci); // The multiplication by 10000 is done to get the mobility in cm^2/Vs, instead of m^2/Vs.
						
						
						
						col(Q)[L]$ = "Linear fit on SQRT(Id (Vd=%(Vdsat$)V))"; // Long name
						col(Q)[U]$ = A^(1/2); // Units
						int lastrow=wks.maxrows/2; // The upper limit of the integration will be equal to the half of the total number of rows. The total number of rows does not include the empty rows (use "maxrows" command instead of "nRows").
						int firstrow=lastrow-round(lastrow/3); // The lower limit of the integration will extend at a certain number of points from the last row.
						fitLR iy:=[%H]1!(1,14)[firstrow:lastrow] oy:=col(Q); // Linear fit
						Vt=-fitLR.a/fitLR.b; // To find the threshold voltage, divide the intercept with the slope.
						Vt=round(Vt,1); // Round the threshold voltage
						
						// Linear extrapolation of the linear fit, to find the intercept with the X axis
						range rq=(1,17); // Define XYrange
						col(Q)=rq(col(A)); // Extrapolate for new X axis (col(A))
						
						
						col(R)[L]$ = "Threshold voltage"; // Long name
						col(R)[U]$ = V; // Units
						Col(R)[1]=Vt; // Threshold voltage
						
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						
						// Reliability factors
						
						// Find the average linear drain current for Vg=0V: Id,lin (Vd=0V)
						col(S)[L]$ = "Row number for Vg=0"; // Long name
						vfind ix:=col(A) value:=0 ox:=Col(S); // Find all indices for which Vg=0
						
						
						
						col(T)[L]$ = "Id,lin (Vg=0V)"; // Long name
						col(T)[U]$ = A; // Units
						col(T)[1]=col(H)[col(S)[1]];
						col(T)[2]=col(H)[col(S)[2]];
						double IdlinVg0=mean(col(T));
						col(T)[3]=IdlinVg0; // The average Id,lin (Vg=0V)
						wcellcolor col(T)[3] color(yellow); // Color the cell with the average value yellow
						
						
						col(U)[L]$ = "Id,sat (Vg=0V)"; // Long name
						col(U)[U]$ = A; // Units
						col(U)[1]=col(I)[col(S)[1]];
						col(U)[2]=col(I)[col(S)[2]];
						double IdsatVg0=mean(col(U));
						col(U)[3]=IdsatVg0; // The average Id,sat (Vg=0V)
						wcellcolor col(U)[3] color(yellow); // Color the cell with the average value yellow
						
						
						// Reliability factor (Linear)
						col(V)[L]$ = "Reliability factor (Linear)"; // Long name
						col(V)[U]$ = %; // Units
						rlin=100*(max(col(H))-IdlinVg0)/max(abs(col(A)))/max(abs(col(L))); // Multiply by 100, since the units are %
						rlin=round(rlin,1);
						
						// Write rlin on the first cell of col(V)
						col(V)[1]=rlin;
						
						// Reliability factor (Saturation)
						col(W)[L]$ = "Reliability factor (Saturation)"; // Long name
						col(W)[U]$ = %; // Units
						rsat=100*((max(col(N))-SQRT(IdsatVg0)))^2/max(abs(col(A)))^2/max(abs(col(O)))^2; // Multiply by 100, since the units are %
						rsat=round(rsat,1);
						
						// Write rsat on the first cell of col(W)
						col(W)[1]=rsat;
						
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						
						// Current density and power density
						col(X)[L]$ = "Max channel current density (Linear)"; // Long name
						col(X)[U]$ = A/cm^2; // Units
						col(X)[1] = max(col(H))/(W*10^(-4)*d*10^(-7)); // W is in um and d in nm. They are both converted to cm.
						jmaxlin=col(X)[1];
						
						col(Y)[L]$ = "Max channel current density (Saturation)"; // Long name
						col(Y)[U]$ = A/cm^2; // Units
						col(Y)[1] = max(col(I))/(W*10^(-4)*d*10^(-7)); // W is in um and d in nm. They are both converted to cm.
						jmaxsat=col(Y)[1];
						
						col(Z)[L]$ = "Max channel power density (Linear)"; // Long name
						col(Z)[U]$ = W/cm^2; // Units
						col(Z)[1] = max(col(H))*abs(%(Vdlin$))/(W*10^(-4)*L*10^(-4)); // W and L are in um, and are both converted to cm.
						Pmaxlin=col(Z)[1];
						
						col(AA)[L]$ = "Max channel power density (Saturation)"; // Long name
						col(AA)[U]$ = W/cm^2; // Units
						col(AA)[1] = max(col(I))*abs(%(Vdsat$))/(W*10^(-4)*L*10^(-4)); // W and L are in um, and are both converted to cm.
						Pmaxsat=col(AA)[1];
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						// Max source-drain electric field (Saturation)
						// NOTE: This should be smaller than 3*10^4 V/cm (see: DOI:10.1038/nmat5035)
						
						col(AB)[L]$ = "Max source-drain electric field (Saturation)"; // Long name
						col(AB)[U]$ = V/cm; // Units
						col(AB)[1] = abs(%(Vdsat$))/(L*10^(-4)); // W and L are in um, and are both converted to cm.
						Esd=col(AB)[1];
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						
						// Contact resistance (Riccardo di Pietro's model)
						
						col(AC)[L]$ = "Average linear current"; // Long name
						col(AC)[U]$ = A; // Units
						col(AC)[O]$ = "abs(col(B)-col(D))/2";
						
						col(AD)[L]$ = "Error"; // Long name
						col(AD)[U]$ = A; // Units
						col(AD)[O]$ = "col(F)/2 + col(AC)*0.01";
						
						col(AE)[L]$ = "Average saturation current"; // Long name
						col(AE)[U]$ = A; // Units
						col(AE)[O]$ = "abs(col(C)-col(E))/2";
						
						col(AF)[L]$ = "Error"; // Long name
						col(AF)[U]$ = A; // Units
						col(AF)[O]$ = "col(G)/2 + col(AE)*0.01";
						
						//col(AG)[L]$ = "d(Id (Vd=%(Vdsat$)V)/dV"; // Long name
						//col(AG)[U]$ = S; // Units
						//differentiate iy:=Col(AE) oy:=Col(AG) order:=1;
						
						col(AG)[L]$ = "d(Id (Vd=%(Vdsat$)V)/dV"; // Long name
						col(AG)[U]$ = S; // Units
						differentiate iy:=Col(I) oy:=Col(AG) order:=1;
						
						col(AH)[L]$ = "Rc"; // Long name
						col(AH)[U]$ = Ohm; // Units
						col(AH)[O]$ = "abs(%(Vdlin$)/col(AC) - 1/col(AG))";
						
						//col(AH)[L]$ = "Contact resistance"; // Long name
						//col(AH)[U]$ = Ohm; // Units
						//col(AH)[O]$ = "abs(%(Vdlin$)/col(H) - 1/col(AG))";
						
						col(AI)[L]$ = "Error"; // Long name
						col(AI)[U]$ = A; // Units
						col(AI)[O]$ = "col(AH)*2*sqrt((col(AF)/col(AE))^2+(col(AD)/col(AC))^2)";
						
						col(AJ)[L]$ = "Channel voltage"; // Long name
						col(AJ)[U]$ = V; // Units
						col(AJ)[O]$ = "col(AC)/col(AG)";
						
						//col(AJ)[L]$ = "Channel voltage"; // Long name
						//col(AJ)[U]$ = V; // Units
						//col(AJ)[O]$ = "col(H)/col(AG)";
						
						col(AK)[L]$ = "Error"; // Long name
						col(AK)[U]$ = A; // Units
						col(AK)[O]$ = "col(AJ)*2*sqrt((col(AF)/col(AE))^2+(col(AD)/col(AC))^2)";
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						// Column legends
						
						col(H)[C]$ = legend$;
						col(I)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(J)[C]$ = col(H)[C]$ + ", Leakage"; // Comment field (graph legend)
						col(K)[C]$ = col(H)[C]$ + ", Leakage"; // Comment field (graph legend)
						col(L)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(M)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(N)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(O)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(P)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(Q)[C]$ = col(N)[C]$ + ", Linear fit"; // Comment field (graph legend)
						col(R)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(S)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(T)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(U)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(V)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(W)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(X)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(Y)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(Z)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(AA)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(AB)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(AC)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(AD)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(AE)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(AF)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(AG)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(AH)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(AI)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(AJ)[C]$ = col(H)[C]$; // Comment field (graph legend)
						col(AK)[C]$ = col(H)[C]$; // Comment field (graph legend)
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						// Plot graphs
						// Set range variables
						range r1 = [%H]1!col(H);  // data range of abs(Id) (Vd=Vdlin) column
						range r2 = [%H]1!col(I);  // data range of abs(Id) (Vd=Vdsat) column
						range r3 = [%H]1!col(J);  // data range of abs(Ig) (Vd=Vdlin) column
						range r4 = [%H]1!col(K);  // data range of abs(Ig) (Vd=Vdsat) column
						
						range r5 = [%H]1!col(L);  // data range of gm (Linear) column
						range r6 = [%H]1!col(M);  // data range of Mobility (Linear) column
						range r7 = [%H]1!col(N);  // data range of SQRT(Id (Vd=Vdsat) /A) column
						range r8 = [%H]1!col(O);  // data range of gm (Saturation) column
						range r9 = [%H]1!col(P);  // data range of Mobility (Saturation) column
						range r10 = [%H]1!col(Q);  // data range of Linear fit on SQRT(Id (Vd=Vdsat) /A) column
						range r11 = [%H]1!col(R);  // data range of Threshold voltage column
						range r12 = [%H]1!col(S);  // data range of Row number for Vg=0 column
						range r13 = [%H]1!col(T);  // data range of Id,lin (Vg=0V) /A column
						range r14 = [%H]1!col(U);  // data range of Id,sat (Vg=0V) /A column
						range r15 = [%H]1!col(V);  // data range of Reliability factor (Linear) column
						range r16 = [%H]1!col(W);  // data range of Reliability factor (Saturation) column
						range r17 = [%H]1!col(AH);  // data range of Contact resistance column
						
						
						
						// Plot joint transfer curve - SQRT(Idsat) graph
						string graphname$="%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condition$)_%(dayslength$)_Transfer_Vd=%(Vdlin$),%(Vdsat$)V_Vt-sat_Vd=%(Vdsat$)V";
						if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							
							// Check if the template exists, otherwise, use a generic one
							string Template$="%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Transfer_Vd=%(Vdlin$),%(Vdsat$)V_Vt-sat_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // This is the template path
							if (exist(Template$)!=-1)// if the template exists
								win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Transfer_Vd=%(Vdlin$),%(Vdsat$)V_Vt-sat_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // create a graph window using template
							else
							{
								win -t p "%(templatepath$)Generic_Transfer_Vt-sat.otpu"; // create a graph window using a generic template
							};
							
							page.active = 1; // activate Layer 1
							layer.include(r1);  // plot in the active layer
							layer.include(r2);  // plot in the active layer
							
							
							page.active = 2; // activate Layer 2
							layer.include(r7);  // plot in the active layer
							layer.include(r10);  // plot in the active layer							
							
							//layer -a;  // rescale the layer
							
							layer.y.from=0; // place the "From" scale of the Y axis from 0, to show clearly the intercept of the linear fit with the X axis
							
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= graphname$; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							//layer -gu; // Ungroup the datasets in the layer
							//legend; // Update the legend
							
							page.active = 1; // activate Layer 1
							if (exist(Text3,16)==16) Text3.text$ = (V\-(d) = %(Vdlin$)V);
							if (exist(Text4,16)==16) Text4.text$ = (V\-(d) = %(Vdsat$)V);
							if (exist(Text5,16)==16) Text5.text$ = at V\-(d) = %(Vdsat$)V;
							if (exist(Text,16)==16) Text.text$ = V\-(t) = $(Vt)V; //(NOTE: The "Vt" label of the template is assumed to be on Layer 1.)
							plot -c; // refresh the graph to update the labels
							
							
						};
						else
						{
							// create a graph window using template	
							win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
							//layer.include(r1);  // plot in the active layer
							//layer.include(r2);  // plot in the active layer
							////layer -a;  // rescale the layer
							////layer -g; // Group the datasets in the layer to auto-color increment
							////layer -gu; // Ungroup the datasets in the layer
							////legend; // Update the legend
							//
							//page.active = 2; // activate Layer 2
							//layer.include(r7);  // plot in the active layer
							//layer.include(r10);  // plot in the active layer							
							//
							////layer -a;  // rescale the layer
							//layer.y.from=0; // place the "From" scale of the Y axis from 0, to show clearly the intercept of the linear fit with the X axis
							////layer -g; // Group the datasets in the layer to auto-color increment
							////layer -gu; // Ungroup the datasets in the layer
							//legend; // Update the legend
							//
							page.active = 1; // activate Layer 1
							if (exist(Text3,16)==16) Text3.text$ = (V\-(d) = %(Vdlin$)V);
							if (exist(Text4,16)==16) Text4.text$ = (V\-(d) = %(Vdsat$)V);
							if (exist(Text5,16)==16) Text5.text$ = at V\-(d) = %(Vdsat$)V;
							if (exist(Text,16)==16) Text.text$ = V\-(t) = $(Vt)V; //(NOTE: The "Vt" label of the template is assumed to be on Layer 1.)
							plot -c; // refresh the graph to update the labels
							//
						};
						
						
						
						// Plot linear transfer curve
						string graphname$="%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condition$)_%(dayslength$)_Transfer_Vd=%(Vdlin$)V";
						if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							
							// Check if the template exists, otherwise, use a generic one
							string Template$="%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Transfer_Leakage_Vd=%(Vdlin$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // This is the template path
							if (exist(Template$)!=-1)// if the template exists
								win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Transfer_Leakage_Vd=%(Vdlin$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // create a graph window using template
							else
							{
								win -t p "%(templatepath$)Generic_Transfer_single.otpu"; // create a graph window using a generic template
							};
							
							page.active = 1; // activate Layer 1
							layer.include(r1);  // plot in the active layer
							layer.include(r3);  // plot in the active layer
							
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= graphname$; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							
						};
						else
						{
							// create a graph window using template	
							win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
							layer.include(r1);  // plot in the active layer
							layer.include(r3);  // plot in the active layer
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
						};
						
						// Plot saturation transfer curve
						string graphname$="%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condition$)_%(dayslength$)_Transfer_Vd=%(Vdsat$)V";
						if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							// Check if the template exists, otherwise, use a generic one
							string Template$="%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Transfer_Leakage_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // This is the template path
							if (exist(Template$)!=-1)// if the template exists
								win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Transfer_Leakage_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // create a graph window using template
							else
							{
								win -t p "%(templatepath$)Generic_Transfer_single.otpu"; // create a graph window using a generic template
							};
							
							page.active = 1; // activate Layer 1
							layer.include(r2);  // plot in the active layer
							layer.include(r4);  // plot in the active layer
						
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= graphname$; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
						};
						else
						{
							// create a graph window using template	
							win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window							
							page.active = 1; // activate Layer 1
							layer.include(r2);  // plot in the active layer
							layer.include(r4);  // plot in the active layer
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
						};
							
							
							
							
						// Plot gm (Linear)
						string graphname$="%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condition$)_%(dayslength$)_gm-lin_Vd=%(Vdlin$)V";
						if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
						{
						
							// Check if the template exists, otherwise, use a generic one
							string Template$="%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_gm-lin_Vd=%(Vdlin$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // This is the template path
							if (exist(Template$)!=-1)// if the template exists
								win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_gm-lin_Vd=%(Vdlin$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // create a graph window using template
							else
							{
								win -t p "%(templatepath$)Generic_gm-lin.otpu"; // create a graph window using a generic template
							};							
							
							page.active = 1; // activate Layer 1
							layer.include(r5);  // plot in the active layer							
							
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= graphname$; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							if (exist(Text2,16)==16) Text2.text$ = r\-(lin)=$(rlin) %; // If the label exists, update it
							if (exist(Text3,16)==16) Text3.text$ = J\-(ch,max,lin)=$(jmaxlin, .1) A/cm\+(2); // If the label exists, update it
							if (exist(Text4,16)==16) Text4.text$ = P\-(ch,max,lin)=$(Pmaxlin, .1) W/cm\+(2); // If the label exists, update it
							
							plot -c; // refresh the graph to update the labels
							
						};
						else
						{
							// create a graph window using template	
							win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
							page.active = 1; // activate Layer 1
							layer.include(r5);  // plot in the active layer							
							
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							if (exist(Text2,16)==16) Text2.text$ = r\-(lin)=$(rlin) %; // If the label exists, update it
							if (exist(Text3,16)==16) Text3.text$ = J\-(ch,max,lin)=$(jmaxlin, .1) A/cm\+(2); // If the label exists, update it
							if (exist(Text4,16)==16) Text4.text$ = P\-(ch,max,lin)=$(Pmaxlin, .1) W/cm\+(2); // If the label exists, update it
							
							plot -c; // refresh the graph to update the labels				
							
							
						};
						
						// Plot mobility (Linear)
						string graphname$="%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condition$)_%(dayslength$)_u-lin_Vd=%(Vdlin$)V";
						if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							
							// Check if the template exists, otherwise, use a generic one
							string Template$="%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_u-lin_Vd=%(Vdlin$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // This is the template path
							if (exist(Template$)!=-1)// if the template exists
								win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_u-lin_Vd=%(Vdlin$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // create a graph window using template
							else
							{
								win -t p "%(templatepath$)Generic_u-lin.otpu"; // create a graph window using a generic template
							};
							
							page.active = 1; // activate Layer 1
							layer -i201 r6;  // plot in the active layer as scatter plot
							
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= graphname$; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							if (exist(Text2,16)==16) Text2.text$ = r\-(lin)=$(rlin) %; // If the label exists, update it
							if (exist(Text3,16)==16) Text3.text$ = J\-(ch,max,lin)=$(jmaxlin, .1) A/cm\+(2); // If the label exists, update it
							if (exist(Text4,16)==16) Text4.text$ = P\-(ch,max,lin)=$(Pmaxlin, .1) W/cm\+(2); // If the label exists, update it
							
							plot -c; // refresh the graph to update the labels
							
						};
						else
						{
							// create a graph window using template	
							win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
							page.active = 1; // activate Layer 1
							layer -i201 r6;  // plot in the active layer as scatter plot
							
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							if (exist(Text2,16)==16) Text2.text$ = r\-(lin)=$(rlin) %; // If the label exists, update it
							if (exist(Text3,16)==16) Text3.text$ = J\-(ch,max,lin)=$(jmaxlin, .1) A/cm\+(2); // If the label exists, update it
							if (exist(Text4,16)==16) Text4.text$ = P\-(ch,max,lin)=$(Pmaxlin, .1) W/cm\+(2); // If the label exists, update it
							
							plot -c; // refresh the graph to update the labels
							
							
							
						};
						
						// Plot gm (Saturation)
						string graphname$="%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condition$)_%(dayslength$)_gm-sat_Vd=%(Vdsat$)V";
						if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							
							// Check if the template exists, otherwise, use a generic one
							string Template$="%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_gm-sat_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // This is the template path
							if (exist(Template$)!=-1)// if the template exists
								win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_gm-sat_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // create a graph window using template
							else
							{
								win -t p "%(templatepath$)Generic_gm-sat.otpu"; // create a graph window using a generic template
							};
							
							page.active = 1; // activate Layer 1
							layer.include(r8);  // plot in the active layer							
							
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= graphname$; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							if (exist(Text2,16)==16) Text2.text$ = r\-(sat)=$(rsat) %; // If the label exists, update it
							if (exist(Text3,16)==16) Text3.text$ = J\-(ch,max,sat)=$(jmaxsat, .1) A/cm\+(2); // If the label exists, update it
							if (exist(Text4,16)==16) Text4.text$ = P\-(ch,max,sat)=$(Pmaxsat, .1) W/cm\+(2); // If the label exists, update it
							
							plot -c; // refresh the graph to update the labels
							
						};
						else
						{
							// create a graph window using template
							win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
							page.active = 1; // activate Layer 1
							layer.include(r8);  // plot in the active layer							
							
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							if (exist(Text2,16)==16) Text2.text$ = r\-(sat)=$(rsat) %; // If the label exists, update it
							if (exist(Text3,16)==16) Text3.text$ = J\-(ch,max,sat)=$(jmaxsat, .1) A/cm\+(2); // If the label exists, update it
							if (exist(Text4,16)==16) Text4.text$ = P\-(ch,max,sat)=$(Pmaxsat, .1) W/cm\+(2); // If the label exists, update it
							
							plot -c; // refresh the graph to update the labels
							
						};
						
						// Plot mobility (Saturation)
						string graphname$="%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condition$)_%(dayslength$)_u-sat_Vd=%(Vdsat$)V";
						if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							
							// Check if the template exists, otherwise, use a generic one
							string Template$="%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_u-sat_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // This is the template path
							if (exist(Template$)!=-1)// if the template exists
								win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_u-sat_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // create a graph window using template
							else
							{
								win -t p "%(templatepath$)Generic_u-sat.otpu"; // create a graph window using a generic template
							};
							
							page.active = 1; // activate Layer 1
							layer -i201 r9;  // plot in the active layer as scatter plot
							
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= graphname$; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							if (exist(Text2,16)==16) Text2.text$ = r\-(sat)=$(rsat) %; // If the label exists, update it
							if (exist(Text3,16)==16) Text3.text$ = J\-(ch,max,sat)=$(jmaxsat, .1) A/cm\+(2); // If the label exists, update it
							if (exist(Text4,16)==16) Text4.text$ = P\-(ch,max,sat)=$(Pmaxsat, .1) W/cm\+(2); // If the label exists, update it
							
							plot -c; // refresh the graph to update the labels
							
						};
						else
						{
							// create a graph window using template
							win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
							page.active = 1; // activate Layer 1
							layer -i201 r9;  // plot in the active layer as scatter plot
							
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							if (exist(Text2,16)==16) Text2.text$ = r\-(sat)=$(rsat) %; // If the label exists, update it
							if (exist(Text3,16)==16) Text3.text$ = J\-(ch,max,sat)=$(jmaxsat, .1) A/cm\+(2); // If the label exists, update it
							if (exist(Text4,16)==16) Text4.text$ = P\-(ch,max,sat)=$(Pmaxsat, .1) W/cm\+(2); // If the label exists, update it
							
							plot -c; // refresh the graph to update the labels
							
						};
						
						
						
						// Plot linear fit of SQRT(Idsat) and linear extrapolation (for Vt)
						string graphname$="%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condition$)_%(dayslength$)_Vt-sat_Vd=%(Vdsat$)V";
						if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							
							// Check if the template exists, otherwise, use a generic one
							string Template$="%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Vt-sat_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // This is the template path
							if (exist(Template$)!=-1)// if the template exists
								win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Vt-sat_Vd=%(Vdsat$)V_Vg=%(VgStart$)V to %(VgStop$)V_single.otpu"; // create a graph window using template
							else
							{
								win -t p "%(templatepath$)Generic_Vt-sat.otpu"; // create a graph window using a generic template
							};
							
							page.active = 1; // activate Layer 1
							layer.include(r7);  // plot in the active layer
							layer.include(r10);  // plot in the active layer							
							
							//layer -a;  // rescale the layer
							
							layer.y.from=0; // place the "From" scale of the Y axis from 0, to show clearly the intercept of the linear fit with the X axis
							
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= graphname$; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							if (exist(Text2,16)==16) Text2.text$ = V\-(t) = $(Vt)V;
							plot -c; // refresh the graph to update the labels
							
						};
						else
						{
							// create a graph window using template
							win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
							page.active = 1; // activate Layer 1
							layer.include(r7);  // plot in the active layer
							layer.include(r10);  // plot in the active layer							
							
							//layer -a;  // rescale the layer
							layer.y.from=0; // place the "From" scale of the Y axis from 0, to show clearly the intercept of the linear fit with the X axis
							//layer -g; // Group the datasets in the layer to auto-color increment
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							if (exist(Text2,16)==16) Text2.text$ = V\-(t)= $(Vt)V;
							plot -c; // refresh the graph to update the labels
							
						};
						
						
						
						// Plot contact resistance (Linear)
						string graphname$="%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condition$)_%(dayslength$)_Rc-lin_Vd=%(Vdlin$)V";
						if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							
							// Check if the template exists, otherwise, use a generic one
							string Template$="%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Rc-lin_Vd=%(Vdlin$)V_Vg=%(VgStart$)V to %(VgStop$)V.otpu"; // This is the template path
							if (exist(Template$)!=-1)// if the template exists
								win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Rc-lin_Vd=%(Vdlin$)V_Vg=%(VgStart$)V to %(VgStop$)V.otpu"; // create a graph window using template
							else
							{
								win -t p "%(templatepath$)Generic_Rc-lin.otpu"; // create a graph window using a generic template
							};
							
							page.active = 1; // activate Layer 1
							layer.include(r17);  // plot in the active layer
							
							//layer -a;  // rescale the layer
							
							
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= graphname$; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							//layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							
						};
						else
						{
							// create a graph window using template
							win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
							page.active = 1; // activate Layer 1
							layer.include(r17);  // plot in the active layer
							
							//layer -a;  // rescale the layer
							layer -g; // Group the datasets in the layer to auto-color increment
							layer -gu; // Ungroup the datasets in the layer
							legend; // Update the legend
							
							
						};
				};
				
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				else // if this is an output curve
				{						
						wks.name$=Output; // Change the sheet name to "Output"
						int NoofVgs = (wks.ncols-1)/3; // The number of different Vg voltages is going to be equal to the total No of columns, minus the gate voltage column, divided by 3 (as there are three currents for each Vg: Is, Id, Ig).
						wks.ncols = wks.ncols + NoofVgs*2;  // The number of columns will be equal to the old one plus two new columns for each Vg (one for abs(Id) and one for abs(Ig)).						
						wks.colwidth = 8;// set all col width to 8
						
						
						// Extract VdStart and VdStop
						string VdStart$= $(col(A)[1]); // VdStart is the value of the first cell of col(A)						
						string VdStop$=$(col(A)[wks.maxrows/2]); // VdStop is the middle cell of col(A) (assuming the gate voltage has a forward and reverse sweep) - wks.maxrows is the total number of (non-empty) rows
						
						
						loop(i,1,NoofVgs)
							{
								string previousworkbook$=%H; // Get the name of the previous window
								
								// Extract Vg
								int colNo=i+1; // Start from column 2
								
								string Vg$=wcol(colNo)[L]$;
								Vg$=Vg.GetToken(2,"=")$; // Take the string on the right of the "=" sign
								Vg$=Vg.GetToken(1,"V")$; // Take the string on the left of the "V" (units)
								int Vgint = %(Vg$); // Convert string to integer
								Vg$= $(Vgint); // Convert integer to string (these two lines get rid of the decimal points)
								
							
								// Create a new column for abs(Id)
								wcol(i+NoofVgs+1+2*NoofVgs)[L]$ = col(%(i+NoofVgs+1))[L]$; // First Id column is i+NoofVgs+1. First empty column on the right is i+NoofVgs+1+2*NoofVgs. abs(Id(Vg)) and Id(Vg) will have a distance of 2*NoofVgs (e.g. col(N) will be ans(col(F)) if NoofVgs is 4)
								wcol(i+NoofVgs+1+2*NoofVgs)[U]$ = A; // Units
								wcol(i+NoofVgs+1+2*NoofVgs)[O]$ = "abs(col(%(i+NoofVgs+1)))";
								wcol(i+NoofVgs+1+2*NoofVgs)[C]$ =  "Vg=%(Vg$)V, %(condgraphlegend$), %(daysgraphlegend$)";
								
								
								// Create a new column for abs(Ig)
								wcol(i+NoofVgs+1+3*NoofVgs)[L]$ = col(%(i+2*NoofVgs+1))[L]$; // abs(Ig) column will be NoofVgs further away from abs(Id)
								wcol(i+NoofVgs+1+3*NoofVgs)[U]$ = A; // Units
								wcol(i+NoofVgs+1+3*NoofVgs)[O]$ = "abs(col(%(i+2*NoofVgs+1)))";
								wcol(i+NoofVgs+1+3*NoofVgs)[C]$ =  "Vg=%(Vg$)V, %(condgraphlegend$), %(daysgraphlegend$), Leakage";
								
								
								// Plot output curve
								range rId = [%H]1!wcol(i+NoofVgs+1+2*NoofVgs);  // data range of abs(Id) column
								range rIg = [%H]1!wcol(i+NoofVgs+1+3*NoofVgs);  // data range of abs(Ig) column
								
								// Output plot with all the Id
								string graphname$="%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condition$)_%(dayslength$)_Output";
								if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
								{
									// Check if the template exists, otherwise, use a generic one
									string Template$="%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Output_Vd=%(VdStart$)V to %(VdStop$)V.otpu"; // This is the template path
									if (exist(Template$)!=-1)// if the template exists
										win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Output_Vd=%(VdStart$)V to %(VdStop$)V.otpu"; // create a graph window using template
									else
									{
										win -t p "%(templatepath$)Generic_Output.otpu"; // create a graph window using a generic template
									};
									
									page.active = 1; // activate Layer 1
									layer.include(rId);  // plot in the active layer
									
									//layer -a;  // rescale the layer
									layer -g; // Group the datasets in the layer to auto-color increment
									page.longname$= graphname$; //this renames the active window (long name)
									page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
									layer -gu; // Ungroup the datasets in the layer
									legend; // Update the legend
									
								};
								
								else
								{
									// create a graph window using template	
									win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
									page.active = 1; // activate Layer 1
									layer.include(rId);  // plot in the active layer
									//layer -a;  // rescale the layer
									layer -g; // Group the datasets in the layer to auto-color increment
									layer -gu; // Ungroup the datasets in the layer
									legend; // Update the legend						
									
								};
								
								
								// Individual output plot with a single Id and Ig
								string graphname$="%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(deviceNo$)_%(length$)_%(condition$)_%(dayslength$)_Output_leakage_Vg=%(Vg$)V";
								if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
								{
									// Check if the template exists, otherwise, use a generic one
									string Template$="%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Output_Leakage_Vg=%(Vg$)V_Vd=%(VdStart$)V to %(VdStop$)V_single.otpu"; // This is the template path
									if (exist(Template$)!=-1)// if the template exists
										win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_Output_Leakage_Vg=%(Vg$)V_Vd=%(VdStart$)V to %(VdStop$)V_single.otpu"; // create a graph window using template
									else
									{
										win -t p "%(templatepath$)Generic_Output_single.otpu"; // create a graph window using a generic template
									};
									
									page.active = 1; // activate Layer 1
									layer.include(rId);  // plot in the active layer
									layer.include(rIg);  // plot in the active layer
									
									//layer -a;  // rescale the layer
									//layer -g; // Group the datasets in the layer to auto-color increment
									page.longname$= graphname$; //this renames the active window (long name)
									page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
									//layer -gu; // Ungroup the datasets in the layer
									legend; // Update the legend
									
								};
								
								else
								{
									// create a graph window using template	
									win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
									page.active = 1; // activate Layer 1
									layer.include(rId);  // plot in the active layer
									layer.include(rIg);  // plot in the active layer
									//layer -a;  // rescale the layer
									//layer -g; // Group the datasets in the layer to auto-color increment
									//layer -gu; // Ungroup the datasets in the layer
									legend; // Update the legend						
									
								};
								
								win -a %(previousworkbook$);  // activate the previous window (workbook)								
							};
				window -ch 1; // hide the output workbook that was processed
				};
			};
}