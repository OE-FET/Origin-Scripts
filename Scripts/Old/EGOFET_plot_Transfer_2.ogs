// This script is used on WG-OFETs and plots the Idon, Idoff, Igon, Igoff, plunger, and valve port vs time.
// Author: Dimitrios Simatos
// Version: 0.1
// Current status: Works only for the first plot
// Changes: ???

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;
	del -al *;// Delete all the local and session variables

	string sheetname$=page.longname$; // Get the name of worksheet
		
	string material$ = sheetname.GetToken(2,"_")$; // Get the string that shows the material
	string materialwodash$=material$;
	materialwodash.Remove("-"); // Remove the dashes, as these will create a problem with the template names in the win -t p command
	
	//string additive$=sheetname.GetToken(3,"_")$; // Get the string that shows the additive (with percentage)
	//%J = additive.GetToken(1,"p")$; // Get the string that shows the additive percentage
	//%B = additive.GetToken(2,"p")$; // Get the string that shows the additive
	string architecture$ = sheetname.GetToken(1,"_")$; // Get the string that shows the architecture
	string solvent$ = sheetname.GetToken(4,"_")$; // Get the string that shows the solvent content
	string addthickness$ = sheetname.GetToken(5,"_")$; // Get the string that shows the additive thickness
	string addthicknessunits$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive thickness units
	string additive$ = sheetname.GetToken(7,"_")$; // Get the string that shows the additive
	string step$ = sheetname.GetToken(9,"_")$; // Get the string that shows the step number in the cycling process
	string liquid1$ = sheetname.GetToken(10,"_")$; // Get the string that shows the conditions (air/type of liquid)
	string liquid2$ = sheetname.GetToken(11,"_")$; // Get the string that shows the conditions (air/type of liquid) (if necessary)
	string liquidgraphlegend$; // This string will depend on "liquid 1" and it will display the type of liquid for the graph legend
	string nodays$ = sheetname.GetToken(12,"_")$; // get the string, which shows the number of days
	string nominutes$ = sheetname.GetToken(13,"_")$; // get the string, which shows the number of minutes
		
	win -t p TGBC_WGOFET_IDTBT_10gl_Pristine_75pDCB_F2TCNQ_20_nm_Transfer_minus_1V.otpu Transfer;  // create a graph window using template (NOTE: The %(material$) and %(solvent$) values should not have dashes)

	win -t p TGBC_WGOFET_IDTBT_10gl_Pristine_75pDCB_F2TCNQ_20_nm_Ig_minus_1V.otpu Ig;  // create a graph window using template (NOTE: The %(material$) and %(solvent$) values should not have dashes)

	doc -ef LB { // loop over all workbooks in folder
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		wks.colwidth = 8;// set all col width to 8
		
		string sheetname$=page.longname$; // Get the name of worksheet
		string nominutes$ = sheetname.GetToken(13,"_")$; // get the string, which shows the number of minutes


		switch (%(liquid1$)) // Case study
			{
				case "ultrapure": // If the string is "air", write "air in the comment field
					liquidgraphlegend$ = "ultrapure water"; // Comment field (graph legend)
					break;
				
				case "town": // If the number is 1, use single form
					liquidgraphlegend$ = "town water"; // Comment field (graph legend)
					break;
				
				default: // For all other numbers, use plural form
					liquidgraphlegend$ = "air"; // Comment field (graph legend)
					break;
			}
		
		switch (%(nodays$)) // Case study
			{
				case "initial": // If the string is "air", write "air in the comment field
					%(nodays$) = "initial"; // Comment field (graph legend)
					break;
				
				case "1": // If the number is 1, use single form
					%(nodays$) = "1 day"; // Comment field (graph legend)
					break;
				
				default: // For all other numbers, use plural form
					%(nodays$) = "%(nodays$) days"; // Comment field (graph legend)
					break;
			}
		
		string previousworkbook$=%H; // Get the name of the previous window

		i = (%(nominutes$)==21 || %(nominutes$)==30); // Condition
		
		if(exist(%H,2)==0) continue; //not a workbook, must be a matrix
			else
				switch (i) // Case study
					{
						case 1: // If the string is "air", write "air in the comment field

						// Plot columns
							range r1 = [%H]1!wcol(5);  // data range of abs(Id) column
							range r2 = [%H]1!wcol(6);  // data range of abs(Ig) column

							// Id graph (Transfer curves)
							//page.active = nActive;  // activate the layer for plot
							win -a Transfer;  // activate the graph window
							layer.include(r1);  // plot in the active layer
								
							//layer -a;  // rescale the layer
							////layer -g; // Group the datasets in the layer to auto-color increment
							//page.longname$= "132nd_%(architecture$)_%(material$)_10gl_Pristine_%(solvent$)_%(additive$)_%(addthickness$)_%(addthicknessunits$)_%(liquid1$)_%(liquid2$)_%(nodays$)_Transfer_Vd=-1V"; //this renames the active window (long name)
							//page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							//win -r Transfer T_%(material$)_%(additive$)_%(nodays$)_%(nominutes$); //this renames the active window (short name); //this renames the active window (short name)
							////layer -gu; // Ungroup the datasets in the layer
							
							////win -a %(previousworkbook$);  // activate the previous window (workbook)
							
							// Ig graph
							//page.active = nActive;  // activate the layer for plot
							win -a Ig;  // activate the graph window
							layer.include(r2);  // plot in the active layer
								
							//layer -a;  // rescale the layer
							////layer -g; // Group the datasets in the layer to auto-color increment
							//win -a Ig;  // activate the graph window
							//page.longname$= "132nd_%(architecture$)_%(material$)_10gl_Pristine_%(solvent$)_%(additive$)_%(addthickness$)_%(addthicknessunits$)_%(liquid1$)_%(liquid2$)_%(nodays$)_Ig_Vd=-1V"; //this renames the active window (long name)
							//page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							//win -r Ig Ig_%(material$)_%(additive$)_%(nodays$)_%(nominutes$); //this renames the active window (short name); //this renames the active window (short name)
							////layer -gu; // Ungroup the datasets in the layer
							
							//win -a %(previousworkbook$);  // activate the previous window (workbook)

							break;
							
						default: // For all other cases, break
							break;
					};
	}
	
	win -a Transfer;  // activate the graph window
		
	layer -a;  // rescale the layer
	layer -g; // Group the datasets in the layer to auto-color increment
	page.longname$= "132nd_%(architecture$)_%(material$)_10gl_Pristine_%(solvent$)_%(additive$)_%(addthickness$)_%(addthicknessunits$)_%(liquid1$)_%(liquid2$)_%(nodays$)_Transfer_Vd=-1V"; //this renames the active window (long name)
	page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
	win -r Transfer T_%(material$)_%(additive$)_%(nodays$)_%(nominutes$); //this renames the active window (short name); //this renames the active window (short name)
	layer -gu; // Ungroup the datasets in the layer
	legend; // Update the legend

	
	win -a Ig;  // activate the graph window
		
	layer -a;  // rescale the layer
	layer -g; // Group the datasets in the layer to auto-color increment
	win -a Ig;  // activate the graph window
	page.longname$= "132nd_%(architecture$)_%(material$)_10gl_Pristine_%(solvent$)_%(additive$)_%(addthickness$)_%(addthicknessunits$)_%(liquid1$)_%(liquid2$)_%(nodays$)_Ig_Vd=-1V"; //this renames the active window (long name)
	page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
	win -r Ig Ig_%(material$)_%(additive$)_%(nodays$)_%(nominutes$); //this renames the active window (short name); //this renames the active window (short name)
	layer -gu; // Ungroup the datasets in the layer
	legend; // Update the legend

}