// This script is used in transfer curves taken with the low noise rig in two drain voltages. It loops over all the workbooks in the folder and creates four new columns, one pair for the abs(Id) and one pair for abs(Ig).
// Author: Dimitrios Simatos
// Version: 0.9
// Current status: Works well.
// Changes: Changed case structure.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	doc -ef LB { // loop over all workbooks in folder
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		
		string sheetname$=page.longname$; // Get the name of worksheet
		
		string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
		string architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
		string material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material

		string concentration$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
		string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
		string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units

		string solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content
		
		string additive$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive
		//string addthickness$ = additive.GetToken(2,"-")$; // Get the string that shows the additive thickness
		//string addthicknessunits$ = additive.GetToken(3,"-")$; // Get the string that shows the additive thickness units
		
		string sampleNo$ = sheetname.GetToken(7,"_")$; // Get the string that shows the sample number

		string stepNo$ = sheetname.GetToken(9,"_")$; // Get the string that shows the step number in the cycling process
		string condition$ = sheetname.GetToken(10,"_")$; // Get the string that shows the conditions (air/type of liquid)
		string daysNo$ = sheetname.GetToken(11,"_")$; // get the string, which shows the number of days
		string minutesNo$ = sheetname.GetToken(13,"_")$; // get the string, which shows the number of minutes
		string workbooktype$=sheetname.GetToken(15,"_")$; // Get the string "T" or "O", which shows if the curve is a transfer or output curve
		string workbookNo$=sheetname.GetToken(16,"_")$; // Get the string that shows the workbook number
		string mode$=sheetname.GetToken(17,"_")$; // Get the string that shows the measurement mode
		string intime$=sheetname.GetToken(18,"_")$; // Get the string that shows the integration time
		intime$=intime.GetToken(1,".")$; // Remove ".txt" from the integration time

		
		string condgraphlegend$; // This string will depend on "condtype" and it will display the type of condition for the graph legend
		string daysgraphlegend$; // This string will depend on "daysNo" and it will display the number of days for the graph legend
		string minutesgraphlegend$; // This string will depend on "minutesNo" and it will display the number of minutes for the graph legend
		string modegraphlegend$; // This string will depend on "mode" and it will display the measurement mode for the graph legend
		string intimegraphlegend$; // This string will depend on "intime" and it will display the integration time for the graph legend


		if(exist(%H,2)==0) continue; // not a workbook, must be a matrix
			else 
				if (workbooktype$ == "O") continue;	// if this is an output curve then break		
					else wks.ncols=6; // set total column number to 6
						wks.colwidth = 8;// set all col width to 8

						// Write long name, units, comments, and parameters of column B
						col(A)[L]$ = "Vg"; // Long name
						col(A)[U]$ = V; // Units
						col(E)[L]$ = col(C)[L]$; // Long name
						col(E)[U]$ = A; // Units
						col(E)[O]$ = "abs(C)";
						col(F)[L]$ = col(D)[L]$; // Long name
						col(F)[U]$ = A; // Units
						col(F)[O]$ = "abs(D)";
						
						switch (%(concunits$)) // Case study
							{
								case "gl": // If the string is "gl", write "g/l" in the comment field
									conunitslegend$ = "g/l"; // Comment field (graph legend)
									break;
								
								default: // For all other numbers, use plural form
									conunitslegend$ = "mg/ml"; // Comment field (graph legend)
									break;
							}
							
							
						switch (%(additive$)) // Case study
							{
								case "TCNQ": // If the string is "TCNQ", write "TCNQ" in the comment field
									additivegraphlegend$ = "+ TCNQ"; // Comment field (graph legend)
									break;
								
								case "F2TCNQ": // If the string is "F2TCNQ", write "F2TCNQ" in the comment field
									//string pH$ = condinfo.GetToken(1,"-")$; // get the string, which shows the pH
									additivegraphlegend$ = "+ F2TCNQ"; // Comment field (graph legend)
									break;
								
								case "SAM-1OCT-v": // If the number is 1, use single form
									additivegraphlegend$ = "+ 1-Octanethiol (vapor)"; // Comment field (graph legend)
									break;
								
								case "SAM-1OCT-i": // If the number is 1, use single form
									additivegraphlegend$ = "+ 1-Octanethiol (immersion)"; // Comment field (graph legend)
									break;
								
								case "SAM-TDF1OCT-v": // If the number is 1, use single form
									additivegraphlegend$ = "+ 3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (vapor)"; // Comment field (graph legend)
									break;
								
								case "SAM-TDF1OCT-i": // If the number is 1, use single form
									additivegraphlegend$ = "+ 3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (immersion)"; // Comment field (graph legend)
									break;
								
								default: // For all other strings, write "Pristine" in the comment field
									additivegraphlegend$ = "Pristine"; // Comment field (graph legend)
									break;
							}
							
						switch (%(condition$)) // Case study
							{
								case "ultrapure-H2O": // If the string is "ultrapure", write "ultrapure water" in the comment field
									condgraphlegend$ = "Ultrapure water"; // Comment field (graph legend)
									break;
								
								case "town": // If the string is "town", write "town water" in the comment field
									condgraphlegend$ = "Town water"; // Comment field (graph legend)
									break;
								
								case "ss": // If the string is "town", write "town water" in the comment field
									condgraphlegend$ = "Saline solution"; // Comment field (graph legend)
									break;
								
								case "pbuffer": // If the string is "phosphatebuffer", write "Phosphate buffer (pH="pHValue", "buffer concentration" "buffer concentration units")" in the comment field
									string pH$ = condition.GetToken(2,"-")$; // get the string, which shows the pH
									pH$ = pH.Substitute(".", ",", 0)$; // Substitute comma with dot
									string bufferconcentration$ = condition.GetToken(3,"-")$; // get the string, which shows the buffer concentration
									string bufferconcunits$ = condition.GetToken(4,"-")$; // get the string, which shows the buffer concentration
									condgraphlegend$ = "Phosphate buffer (pH= %(pH$), %(bufferconcentration$) %(bufferconcunits$)"; // Comment field (graph legend)
									break;
								
								case "IPA": // If the string is "town", write "town water" in the comment field
									condgraphlegend$ = "IPA"; // Comment field (graph legend)
									break;
								
								default: // For all other strings, write "air" in the comment field
									condgraphlegend$ = "Air"; // Comment field (graph legend)
									break;
							}
						
						switch (%(daysNo$)) // Case study
							{
								case "in": // If the string is "initial", write "initial" in the comment field
									daysgraphlegend$ = "initial"; // Comment field (graph legend)
									break;
								
								case "1": // If the number is 1, use single form
									daysgraphlegend$ = "1 day"; // Comment field (graph legend)
									break;
								
								default: // For all other numbers, use plural form
									daysgraphlegend$ = "%(daysNo$) days"; // Comment field (graph legend)
									break;
							}
							
						switch (%(minutesNo$)) // Case study
							{
								case "1": // If the number is 1, use single form
									minutesgraphlegend$ = "%(minutesNo$) minute"; // Comment field (graph legend)
									break;
								
								default: // For all other numbers, use plural form
									minutesgraphlegend$ = "%(minutesNo$) minutes"; // Comment field (graph legend)
									break;
							}
						
						switch (%(mode$)) // Case study
							{
								case "P": // If the string is "air", write "air in the comment field
									modegraphlegend$ = "Pulsed"; // Comment field (graph legend)
									break;
								
								case "C": // If the string is "air", write "air in the comment field
									modegraphlegend$ = "Continuous"; // Comment field (graph legend)
									break;
								
								default: // For all other numbers, use plural form
									modegraphlegend$ = "Continuous"; // Comment field (graph legend)
									break;
							}
							
						switch (%(intime$)) // Case study
							{
								case "S": // If the string is "air", write "air in the comment field
									intimegraphlegend$ = "Short"; // Comment field (graph legend)
									break;
								
								case "M": // If the string is "air", write "air in the comment field
									intimegraphlegend$ = "Medium"; // Comment field (graph legend)
									break;
								
								case "L": // If the string is "air", write "air in the comment field
									intimegraphlegend$ = "Long"; // Comment field (graph legend)
									break;
								
								default: // For all other numbers, use plural form
									intimegraphlegend$ = "Long"; // Comment field (graph legend)
									break;
							}
		
		string legend$ = "%(material$) %(concnumber$) %(conunitslegend$) %(additivegraphlegend$), %(condgraphlegend$), %(daysgraphlegend$), %(minutesgraphlegend$), %(modegraphlegend$), %(intimegraphlegend$)"; // Legend
		col(E)[C]$ = legend$;
		col(F)[C]$ = col(E)[C]$ + ", Leakage"; // Comment field (graph legend)
}