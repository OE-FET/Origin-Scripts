// This script is used on WG-OFETs and plots the Idon, Idoff, Igon, Igoff, plunger, and valve port vs time.
// Author: Dimitrios Simatos
// Version: 2.7
// Current status: Works well.
// Changes: Changed workbooktype to meastype.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	string templatepath$="C:\Users\Administrator\Documents\OriginLab\2018\User Files\Templates\"; // define the template path

	doc -ef LB { // loop over all workbooks in folder
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		
		string sheetname$=page.longname$; // Get the name of worksheet
		
		int i = sheetname.Find("script"); // It will yield a value different than 0 if the filename contains "script".
		if (i!=0) continue; // If the filename contains "script", then just continue to the next workbook.
		
		string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
		string architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
		string material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material

		string concentration$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
		string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
		string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units

		string solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content

		string annealing$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive

		string additive$ = sheetname.GetToken(7,"_")$; // Get the string that shows the additive
		string additivetype$ = additive.GetToken(1,"-")$; // Get the string that shows the additive type
		//string addthickness$ = additive.GetToken(2,"-")$; // Get the string that shows the additive thickness
		//string addthicknessunits$ = additive.GetToken(3,"-")$; // Get the string that shows the additive thickness units
		
		//string dielectric$ = sheetname.GetToken(7,"_")$; // Get the string that shows the dielectric
		//string dielectricconc$ = sheetname.GetToken(8,"_")$; // Get the string that shows the dielectric concentration or ratio

		string sampleNo$ = sheetname.GetToken(8,"_")$; // Get the string that shows the sample number

		string stepNo$ = sheetname.GetToken(10,"_")$; // Get the string that shows the step number in the cycling process
		string condition$ = sheetname.GetToken(11,"_")$; // Get the string that shows the conditions (air/type of liquid)
		string dayslength$ = sheetname.GetToken(12,"_")$; // get the string, which shows the number of days
		string daysNo$ = dayslength.GetToken(1,"-")$; // get the string, which shows the number of days
		string meastype$ = sheetname.GetToken(13,"_")$; // get the string, which shows the type of measurement

		
		// Parameters
		string Vd$="-1";
		string VgStart$="0";
		string VgStop$="-1";
		string Rate$="40-ulmin";
		string CycleLength$="900";

		string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
		string condgraphlegend$; // This string will depend on "condition" and it will display the type of liquid for the graph legend
		string daysgraphlegend$; // This string will depend on "daysNo" and it will display the type of liquid for the graph legend

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
		// Check for NaN columns
		range rb = [%H]1!wcol(2);  // data range of (Is max) column (col(B))
		
		string NaNb$ = Lookup("NaN", rb)$;
		
		if (Nanb$=="NaN" || exist(%H,2)==0) continue; // If object does not exist or if "NaN" is present, then just continue to the next workbook. When LabVIEW measurements are interrupted (they yield NaN values)
			else
			{
				switch (%(concunits$)) // Case study
					{
						case "gl": // If the string is "gl", write "g/l" in the comment field
							conunitslegend$ = "g/l"; // Comment field (graph legend)
							break;
						
						default: // For all other numbers, use plural form
							conunitslegend$ = "mg/ml"; // Comment field (graph legend)
							break;
					}
					
				switch (%(additivetype$)) // Case study
					{
						case "Pristine": // If the string is "TCNQ", write "TCNQ" in the comment field
							additivegraphlegend$ = "Pristine"; // Comment field (graph legend)
							break;
						
						case "TCNQ": // If the string is "TCNQ", write "TCNQ" in the comment field
							additivegraphlegend$ = "+ TCNQ"; // Comment field (graph legend)
							break;
						
						case "F2TCNQ": // If the string is "F2TCNQ", write "F2TCNQ" in the comment field
							//string pH$ = condinfo.GetToken(1,"-")$; // get the string, which shows the pH
							additivegraphlegend$ = "+ F2TCNQ"; // Comment field (graph legend)
							break;
						
						case "SAM-1OCT-v": // If the number is 1, use single form
							additivegraphlegend$ = "+ 1-Octanethiol (vapor)"; // Comment field (graph legend)
							break;
						
						case "SAM-1OCT-i": // If the number is 1, use single form
							additivegraphlegend$ = "+ 1-Octanethiol (immersion)"; // Comment field (graph legend)
							break;
						
						case "SAM-TDF1OCT-v": // If the number is 1, use single form
							additivegraphlegend$ = "+ 3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (vapor)"; // Comment field (graph legend)
							break;
						
						case "SAM-TDF1OCT-i": // If the number is 1, use single form
							additivegraphlegend$ = "+ 3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (immersion)"; // Comment field (graph legend)
							break;
						
						default: // For all other strings, write "Pristine" in the comment field
							additivegraphlegend$ = "Pristine"; // Comment field (graph legend)
							break;
					}
					
				switch (%(condition$)) // Case study
					{
						case "DI-H2O": // If the string is "ultrapure", write "ultrapure water" in the comment field
							condgraphlegend$ = "DI water"; // Comment field (graph legend)
							break;
						
						case "up-H2O": // If the string is "ultrapure", write "ultrapure water" in the comment field
							condgraphlegend$ = "Ultrapure water"; // Comment field (graph legend)
							break;
						
						case "t-H2O": // If the string is "town", write "town water" in the comment field
							condgraphlegend$ = "Town water"; // Comment field (graph legend)
							break;
						
						case "ss": // If the string is "town", write "town water" in the comment field
							condgraphlegend$ = "Saline solution"; // Comment field (graph legend)
							break;
						
						case "pbuffer": // If the string is "phosphatebuffer", write "Phosphate buffer (pH="pHValue", "buffer concentration" "buffer concentration units")" in the comment field
							string pH$ = condition.GetToken(2,"-")$; // get the string, which shows the pH
							pH$ = pH.Substitute(".", ",", 0)$; // Substitute comma with dot
							string bufferconcentration$ = condition.GetToken(3,"-")$; // get the string, which shows the buffer concentration
							string bufferconcunits$ = condition.GetToken(4,"-")$; // get the string, which shows the buffer concentration
							condgraphlegend$ = "Phosphate buffer (pH= %(pH$), %(bufferconcentration$) %(bufferconcunits$)"; // Comment field (graph legend)
							break;
						
						case "IPA": // If the string is "N2", write "N2" in the comment field
							condgraphlegend$ = "IPA"; // Comment field (graph legend)
							break;
							
						case "N2": // If the string is "N2", write "N2" in the comment field
							condgraphlegend$ = "N2"; // Comment field (graph legend)
							break;
						
						case "air": // If the string is "N2", write "N2" in the comment field
							condgraphlegend$ = "air"; // Comment field (graph legend)
							break;
							
						default: // For all other strings, write "air" in the comment field
							condgraphlegend$ = "air"; // Comment field (graph legend)
							break;
					}
						
				switch (%(daysNo$)) // Case study
					{
						case "initial": // If the string is "initial", write "initial" in the comment field
							daysgraphlegend$ = "initial"; // Comment field (graph legend)
							break;
						
						case "1": // If the number is 1, use single form
							daysgraphlegend$ = "1 day"; // Comment field (graph legend)
							break;
						
						default: // For all other numbers, use plural form
							daysgraphlegend$ = "%(daysNo$) days"; // Comment field (graph legend)
							break;
					}
					
				//switch (%(minutesNo$)) // Case study
					//{
						//case "1": // If the number is 1, use single form
							//minutesgraphlegend$ = "%(minutesNo$) minute"; // Comment field (graph legend)
							//break;
						//
						//default: // For all other numbers, use plural form
							//minutesgraphlegend$ = "%(minutesNo$) minutes"; // Comment field (graph legend)
							//break;
					//}

				string legend$ = "%(material$) %(concnumber$) %(conunitslegend$) %(additivegraphlegend$), %(condgraphlegend$), %(daysgraphlegend$)"; // Legend
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				
				string previousworkbook$=%H; // Get the name of the previous window

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------
		
				switch (%(meastype$)) // Case study
					{
						case "Imax": // If the string is "Imax", process and plot the Imax, Imin, Ion, Ioff vs time data
							
							// Plot Imax, Imin, Ion, Ioff vs time
							col(A)[L]$ = "Time"; // Long name
							col(A)[U]$ = "Minutes"; // Units
							
							col(B)[L]$ = "Is max"; // Units
							col(B)[U]$ = "A"; // Units
							
							col(C)[L]$ = "Is min"; // Units
							col(D)[L]$ = "Id max"; // Units
							col(E)[L]$ = "Id min"; // Units
							col(F)[L]$ = "Ig max"; // Units
							col(G)[L]$ = "Ig min"; // Units
							col(H)[L]$ = "Is on"; // Units
							col(I)[L]$ = "Is off"; // Units
							col(J)[L]$ = "Id on"; // Units
							col(K)[L]$ = "Id off"; // Units
							col(L)[L]$ = "Ig on"; // Units
							col(M)[L]$ = "Ig off"; // Units
							
							col(C)[U]$ = col(B)[U]$;
							col(D)[U]$ = col(B)[U]$;
							col(E)[U]$ = col(B)[U]$;
							col(F)[U]$ = col(B)[U]$;
							col(G)[U]$ = col(B)[U]$;
							col(H)[U]$ = col(B)[U]$;
							col(I)[U]$ = col(B)[U]$;
							col(J)[U]$ = col(B)[U]$;
							col(K)[U]$ = col(B)[U]$;
							col(L)[U]$ = col(B)[U]$;
							col(M)[U]$ = col(B)[U]$;
								
							//---------------------------------------------------------
							// Comment to prevent any changes to the graph legend
							col(B)[C]$ = %(legend$), %(col(B)[L]$); // Comment
							col(C)[C]$ = %(legend$), %(col(C)[L]$); // Comment
							col(D)[C]$ = %(legend$), %(col(D)[L]$); // Comment
							col(E)[C]$ = %(legend$), %(col(E)[L]$); // Comment
							col(F)[C]$ = %(legend$), %(col(F)[L]$); // Comment
							col(G)[C]$ = %(legend$), %(col(G)[L]$); // Comment
							col(H)[C]$ = %(legend$), %(col(H)[L]$); // Comment
							col(I)[C]$ = %(legend$), %(col(I)[L]$); // Comment
							col(J)[C]$ = %(legend$), %(col(J)[L]$); // Comment
							col(K)[C]$ = %(legend$), %(col(K)[L]$); // Comment
							col(L)[C]$ = %(legend$), %(col(L)[L]$); // Comment
							col(M)[C]$ = %(legend$), %(col(M)[L]$); // Comment
							//----------------------------------------------------------
							
							
							// Plot columns
							range r1 = [%(previousworkbook$)]1!wcol(10);  // data range of column (Id on)
							range r2 = [%(previousworkbook$)]1!wcol(11);  // data range of column (Id off)
							range r3 = [%(previousworkbook$)]1!wcol(12);  // data range of column (Ig on)
							range r4 = [%(previousworkbook$)]1!wcol(13);  // data range of column (Ig off)
							
							// Idon, Idoff, Igon, Igoff graph
							win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min_step_%(stepNo$)_%(condition$)_Idon_Idoff_Igon_Igoff_vs_time_Vd=%(Vd$)V.otpu";  // create a graph window using template
							layer.include(r1);  // plot in the active layer
							layer.include(r2);  // plot in the active layer
							layer.include(r3);  // plot in the active layer
							layer.include(r4);  // plot in the active layer
								
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Idon_Idoff_Igon_Igoff_vs_time_Vd=%(Vd$)V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							
							
							// Idoff graph
							win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min_step_%(stepNo$)_%(condition$)_Idoff_vs_time_Vd=%(Vd$)V.otpu";  // create a graph window using template
							layer.include(r2);  // plot in the active layer
								
							//layer.x.from = -75; // place the "From" scale of the X axis from -75
							//layer.x.to = 875; // place the "To" scale of the X axis from 875
							
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Idoff_vs_time_Vd=%(Vd$)V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							
							
							// Igon, Igoff graph
							win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min_step_%(stepNo$)_%(condition$)_Igon_Igoff_vs_time_Vd=%(Vd$)V.otpu";  // create a graph window using template
							layer.include(r3);  // plot in the active layer
							layer.include(r4);  // plot in the active layer
								
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Igon_Igoff_vs_time_Vd=%(Vd$)V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							
							
							// Igoff graph
							win -t p "%(templatepath$)%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min_step_%(stepNo$)_%(condition$)_Igoff_vs_time_Vd=%(Vd$)V.otpu";  // create a graph window using template
							layer.include(r4);  // plot in the active layer
								
							//layer.x.from = -75; // place the "From" scale of the X axis from -75
							//layer.x.to = 875; // place the "To" scale of the X axis from 875
							
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Igoff_vs_time_Vd=%(Vd$)V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							break;
							
							
						case "plunger": // If the string is "plunger", process and plot the plunger position vs time data
								
							// Plot Plunger position vs time								
							col(A)[L]$ = "Time"; // Long name
							col(A)[U]$ = "Minutes"; // Units
							
							col(B)[L]$ = "Absolute plunger position"; // Units
							col(B)[U]$ = "Steps"; // Units
							
							col(C)[L]$ = "Volume of solution in syringe"; // Units
							col(C)[U]$ = "ul"; // Units
							col(C)[O]$ = "col(B)/3"; // Function
							
							// Plot columns
							range r1 = [%(previousworkbook$)]1!wcol(2);  // data range of column
							range r2 = [%(previousworkbook$)]1!wcol(3);  // data range of column
							
							//// Plunger vs time graph
							//win -t p "%(templatepath$)Plunger_vs_time.otpu";  // create a graph window using template
							////page.active = nActive;  // activate the layer for plot
							//layer.include(r1);  // plot in the active layer
							//
							//layer -a;  // rescale the layer
							////layer -g; // Group the datasets in the layer to auto-color increment
							//page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Plunger_vs_time"; //this renames the active window (long name)
							//page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							////layer -gu; // Ungroup the datasets in the layer
							
							
							// Volume vs time graph
							win -t p "%(templatepath$)Volume_vs_time.otpu";  // create a graph window using template
							//page.active = nActive;  // activate the layer for plot
							layer.include(r2);  // plot in the active layer
							
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Volume_vs_time"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							//layer -gu; // Ungroup the datasets in the layer
							
							
							// Volume vs time (0-30 minutes) graph
							win -t p "%(templatepath$)Volume_vs_time_static_mode_0-30_min.otpu";  // create a graph window using template
							//page.active = nActive;  // activate the layer for plot
							layer.include(r2);  // plot in the active layer
							
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Volume_vs_time_0-30_min"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							//layer -gu; // Ungroup the datasets in the layer
							break;
							
							
						case "valve": // If the string is "valve", process and plot the plunger position vs time data
								
							// Plot Plunger position vs time								
							col(A)[L]$ = "Time"; // Long name
							col(A)[U]$ = "Minutes"; // Units
							
							col(B)[L]$ = "Valve port"; // Units
							col(B)[U]$ = "No"; // Units
							
							// Plot columns
							range r1 = [%(previousworkbook$)]1!wcol(2);  // data range of column
							
							// Valve port vs time graph
							win -t p "%(templatepath$)Valve_port_vs_time.otpu";  // create a graph window using template
							//page.active = nActive;  // activate the layer for plot
							layer.include(r1);  // plot in the active layer
							
							layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_step_%(stepNo$)_%(condition$)_%(dayslength$)_Valve_port_vs_time"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							//layer -gu; // Ungroup the datasets in the layer
							
							
						default: // For all other cases, break
							break;
					}
			};
	}
}