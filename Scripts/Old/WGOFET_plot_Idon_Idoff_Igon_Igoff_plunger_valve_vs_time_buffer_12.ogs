// This script is used on WG-OFETs and plots the Idon, Idoff, Igon, Igoff, plunger, and valve port vs time.
// Author: Dimitrios Simatos
// Version: 1.2
// Current status: Works well
// Changes: Added variables different pH values and concentrations.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;
	del -al *;// Delete all the local and session variables

	

	doc -ef LB { // loop over all workbooks in folder
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		
		string sheetname$=page.longname$; // Get the name of worksheet
		
		string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
		string architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
		
		string material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material
		string materialwodash$=material$;
		materialwodash.Remove("-"); // Remove the dashes, as these will create a problem with the template names in the win -t p command
		
		string conc$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
		string solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content
		
		string additive$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive
		string additiveinfo$ = sheetname.GetToken(7,"_")$; // Get the string that shows the additive information
		//string addthickness$ = additiveinfo.GetToken(1,"-")$; // Get the string that shows the additive thickness
		//string addthicknessunits$ = additive.GetToken(2,"-")$; // Get the string that shows the additive thickness units
		
		string nostep$ = sheetname.GetToken(9,"_")$; // Get the string that shows the step number in the cycling process
		string liquid1$ = sheetname.GetToken(10,"_")$; // Get the string that shows the conditions (air/type of liquid)
		string liquid2$ = sheetname.GetToken(11,"_")$; // Get the string that shows the conditions (air/type of liquid) (if necessary)
		string nodays$ = sheetname.GetToken(12,"_")$; // get the string, which shows the number of days

		string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
		string liquidgraphlegend$; // This string will depend on "liquid 1" and it will display the type of liquid for the graph legend

		switch (%(additive$)) // Case study
			{
				case "TCNQ": // If the number is 1, use single form
					additivegraphlegend$ = "TCNQ"; // Comment field (graph legend)
					break;
				
				case "F2TCNQ": // If the number is 1, use single form
					//string pH$ = liquid2.GetToken(1,"-")$; // get the string, which shows the pH
					additivegraphlegend$ = "F2-TCNQ"; // Comment field (graph legend)
					break;
				
				default: // For all other numbers, use plural form
					additivegraphlegend$ = "Pristine"; // Comment field (graph legend)
					break;
			}
		
		switch (%(liquid1$)) // Case study
			{
				case "ultrapure": // If the string is "air", write "air in the comment field
					liquidgraphlegend$ = "ultrapure water"; // Comment field (graph legend)
					break;
				
				case "town": // If the number is 1, use single form
					liquidgraphlegend$ = "town water"; // Comment field (graph legend)
					break;
				
				case "phosphatebuffer": // If the number is 1, use single form
					string pH$ = liquid2.GetToken(2,"-")$; // get the string, which shows the pH
					pH$ = pH.Substitute(".", ",", 0)$; // Substitute comma with dot
					string bufferconc$ = liquid2.GetToken(3,"-")$; // get the string, which shows the buffer concentration
					string bufferconcunits$ = liquid2.GetToken(4,"-")$; // get the string, which shows the buffer concentration
					liquidgraphlegend$ = "Phosphate buffer (pH=%(ph$), %(bufferconc$) %(bufferconcunits$))"; // Comment field (graph legend)
					break;
				
				default: // For all other numbers, use plural form
					liquidgraphlegend$ = "air"; // Comment field (graph legend)
					break;
			}
		
		switch (%(nodays$)) // Case study
			{
				case "initial": // If the string is "air", write "air in the comment field
					%(nodays$) = "initial"; // Comment field (graph legend)
					break;
				
				case "1": // If the number is 1, use single form
					%(nodays$) = "1 day"; // Comment field (graph legend)
					break;
				
				default: // For all other numbers, use plural form
					%(nodays$) = "%(nodays$) days"; // Comment field (graph legend)
					break;
			}

		string legend$ = "%(material$) 10 g/l + %(additivegraphlegend$), %(liquidgraphlegend$), %(nodays$)"; // Legend
		string workbooktype$ = sheetname.GetToken(13,"_")$; // get the string, which shows the type of workbook
		string previousworkbook$=%H; // Get the name of the previous window

		
		if(exist(%H,2)==0) continue; //not a workbook, must be a matrix
			else
				switch (%(workbooktype$)) // Case study
					{
						case "Imax": // If the string is "Imax", process and plot the Imax, Imin, Ion, Ioff vs time data

							// Plot Imax, Imin, Ion, Ioff vs time
							col(A)[L]$ = "Time"; // Long name
							col(A)[U]$ = "Minutes"; // Units
							
							col(B)[L]$ = "Is max"; // Units
							col(B)[U]$ = "A"; // Units
							
							col(C)[L]$ = "Is min"; // Units
							col(D)[L]$ = "Id max"; // Units
							col(E)[L]$ = "Id min"; // Units
							col(F)[L]$ = "Ig max"; // Units
							col(G)[L]$ = "Ig min"; // Units
							col(H)[L]$ = "Is on"; // Units
							col(I)[L]$ = "Is off"; // Units
							col(J)[L]$ = "Id on"; // Units
							col(K)[L]$ = "Id off"; // Units
							col(L)[L]$ = "Ig on"; // Units
							col(M)[L]$ = "Ig off"; // Units
							
							col(C)[U]$ = col(B)[U]$;
							col(D)[U]$ = col(B)[U]$;
							col(E)[U]$ = col(B)[U]$;
							col(F)[U]$ = col(B)[U]$;
							col(G)[U]$ = col(B)[U]$;
							col(H)[U]$ = col(B)[U]$;
							col(I)[U]$ = col(B)[U]$;
							col(J)[U]$ = col(B)[U]$;
							col(K)[U]$ = col(B)[U]$;
							col(L)[U]$ = col(B)[U]$;
							col(M)[U]$ = col(B)[U]$;
								

							// Plot columns
							range r1 = [%(previousworkbook$)]1!wcol(10);  // data range of column
							range r2 = [%(previousworkbook$)]1!wcol(11);  // data range of column
							range r3 = [%(previousworkbook$)]1!wcol(12);  // data range of column
							range r4 = [%(previousworkbook$)]1!wcol(13);  // data range of column

							
							// Id, Ig graph
							win -t p %(architecture$)_WGOFET_%(materialwodash$)_%(conc$)_%(solvent$)_%(additive$)_%(additiveinfo$)_Idon_Idoff_Igon_Igoff_vs_time_pH_step_%(nostep$).otpu Idgonoff;  // create a graph window using template (NOTE: The values of the variables should not have dashes)
							//page.active = nActive;  // activate the layer for plot
							layer.include(r1);  // plot in the active layer
							layer.include(r2);  // plot in the active layer
							layer.include(r3);  // plot in the active layer
							layer.include(r4);  // plot in the active layer
								
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							win -a Idgonoff;  // activate the graph window
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(conc$)_%(solvent$)_%(additive$)_%(additiveinfo$)_step_%(nostep$)_%(liquid1$)_%(liquid2$)_%(nodays$)_Idon_Idoff_Igon_Igoff_vs_time_Vd=-1V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							win -r Idgonoff Idg_%(material$)_%(additive$)_%(nostep$)_%(nodays$); //this renames the active window (short name); //this renames the active window (short name)
							//layer -gu; // Ungroup the datasets in the layer
									
							//win -a %(previousworkbook$);  // activate the previous window (workbook)
							
							// Ig graph
							win -t p %(architecture$)_WGOFET_%(materialwodash$)_%(conc$)_%(solvent$)_%(additive$)_%(additiveinfo$)_Igon_Igoff_vs_time_pH_step_%(nostep$).otpu Igonoff;  // create a graph window using template (NOTE: The values of the variables should not have dashes)
							//page.active = nActive;  // activate the layer for plot
							layer.include(r3);  // plot in the active layer
							layer.include(r4);  // plot in the active layer
								
							//layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							win -a Igonoff;  // activate the graph window
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(conc$)_%(solvent$)_%(additive$)_%(additiveinfo$)_step_%(nostep$)_%(liquid1$)_%(liquid2$)_%(nodays$)_Igon_Igoff_vs_time_Vd=-1V"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							win -r Igonoff Igonoff_%(material$)_%(additive$)_%(nostep$)_%(nodays$); //this renames the active window (short name); //this renames the active window (short name)
							//layer -gu; // Ungroup the datasets in the layer
									
							//win -a %(previousworkbook$);  // activate the previous window (workbook)
							break;

						case "plunger": // If the string is "plunger", process and plot the plunger position vs time data
								
							// Plot Plunger position vs time								
							col(A)[L]$ = "Time"; // Long name
							col(A)[U]$ = "Minutes"; // Units
							
							col(B)[L]$ = "Absolute plunger position"; // Units
							col(B)[U]$ = "Steps"; // Units

							// Plot columns
							range r1 = [%(previousworkbook$)]1!wcol(2);  // data range of column
							
							// Plunger vs time graph
							win -t p Plunger_vs_time.otpu Plunger_vs_time;  // create a graph window using template
							//page.active = nActive;  // activate the layer for plot
							layer.include(r1);  // plot in the active layer
							
							layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(conc$)_%(solvent$)_%(additive$)_%(additiveinfo$)_step_%(nostep$)_%(liquid1$)_%(liquid2$)_%(nodays$)_Plunger_vs_time"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							win -r Plunger_vs_time %(material$)_%(additive$)_%(nostep$)_Pl; //this renames the active window (short name); //this renames the active window (short name)
							//layer -gu; // Ungroup the datasets in the layer
							
												
							//win -a %(previousworkbook$);  // activate the previous window (workbook)
							break;
								
						case "valve": // If the string is "plunger", process and plot the plunger position vs time data
								
							// Plot Plunger position vs time								
							col(A)[L]$ = "Time"; // Long name
							col(A)[U]$ = "Minutes"; // Units
							
							col(B)[L]$ = "Valve port"; // Units
							col(B)[U]$ = "No"; // Units

							// Plot columns
							range r1 = [%(previousworkbook$)]1!wcol(2);  // data range of column
							
							// Valve port vs time graph
							win -t p Valve_port_vs_time.otpu Valve_port_vs_time;  // create a graph window using template
							//page.active = nActive;  // activate the layer for plot
							layer.include(r1);  // plot in the active layer
							
							layer -a;  // rescale the layer
							//layer -g; // Group the datasets in the layer to auto-color increment
							page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(conc$)_%(solvent$)_%(additive$)_%(additiveinfo$)_step_%(nostep$)_%(liquid1$)_%(liquid2$)_%(nodays$)_Valve_port_vs_time"; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
							win -r Valve_port_vs_time %(material$)_%(additive$)_step_%(nostep$)_Valve; //this renames the active window (short name); //this renames the active window (short name)
							//layer -gu; // Ungroup the datasets in the layer

												
							//win -a %(previousworkbook$);  // activate the previous window (workbook)
							break;
						
						default: // For all other cases, break
							break;
					}
	}
}