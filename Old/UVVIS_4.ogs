// This script is used to perform all the PLQE calculations. It loops over all the workbooks in the folder and creates four new columns, one pair for the abs(Id) and one pair for abs(Ig).
// Author: Dimitrios Simatos
// Version: 0.4
// Current status: Works well.
// Changes: Changed variables and string concatenation.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;
	del -al *;// Delete all the local and session variables
	
	page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
	wks.colwidth = 12;// set all col width to 12
	page.active = 1; // Switch to the first worksheet. I do not want the metadata worksheets to be parsed.
	
	string sheetname$=page.longname$; // Get the name of worksheet
	
	string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
	string architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
	string material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material
	
	string concentration$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
	string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
	string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units

	string solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content
	string additive$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive
	
	string liquidtype$ = sheetname.GetToken(7,"_")$; // Get the string that shows the conditions (air/type of liquid)
	string liquidinfo$ = sheetname.GetToken(8,"_")$; // Get the string that shows the conditions (air/type of liquid) (if necessary)
	string daysNo$ = sheetname.GetToken(9,"_")$; // get the string, which shows the number of days
	
	string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
	string liquidgraphlegend$; // This string will depend on "liquidtype" and it will display the type of liquid for the graph legend
	string daysgraphlegend$; // This string will depend on "daysNo" and it will display the type of liquid for the graph legend

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	// Create the UV-VIS graph
	string previousworkbook$=%H; // Get the name of the previous window
	win -t p "%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_UV-VIS.otpu" UVVIS;  // create a graph window using template
	win -a %(previousworkbook$);  // activate the previous window (workbook)
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

doc -ef LB { // loop over all workbooks in folder
	page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
	wks.colwidth = 12;// set all col width to 12
	page.active = 1; // Switch to the first worksheet. I do not want the metadata worksheets to be parsed.
	
	string sheetname$=page.longname$; // Get the name of worksheet
	
	string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
	string architecture$ = sheetname.GetToken(2,"_")$; // Get the string that shows the architecture
	string material$ = sheetname.GetToken(3,"_")$; // Get the string that shows the material
	
	string concentration$ = sheetname.GetToken(4,"_")$; // Get the string that shows the concentration
	string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
	string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units

	string solvent$ = sheetname.GetToken(5,"_")$; // Get the string that shows the solvent content
	string additive$ = sheetname.GetToken(6,"_")$; // Get the string that shows the additive
	
	string liquidtype$ = sheetname.GetToken(7,"_")$; // Get the string that shows the conditions (air/type of liquid)
	string liquidinfo$ = sheetname.GetToken(8,"_")$; // Get the string that shows the conditions (air/type of liquid) (if necessary)
	string daysNo$ = sheetname.GetToken(9,"_")$; // get the string, which shows the number of days
	
	string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
	string liquidgraphlegend$; // This string will depend on "liquidtype" and it will display the type of liquid for the graph legend
	string daysgraphlegend$; // This string will depend on "daysNo" and it will display the type of liquid for the graph legend

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

		if(additive$!="Pristine")
		{
			string addtype$ = additive.GetToken(1,"-")$; // Get the string that shows the additive type
			string addthickness$ = additive.GetToken(2,"-")$; // Get the string that shows the additive thickness
			string addthicknessunits$ = additive.GetToken(3,"-")$; // Get the string that shows the additive thickness units
			additivegraphlegend$ = "+ " + " " + addthickness$ + " " + addthicknessunits$ + " " + addtype$; // Comment field (graph legend)

		}
		else additivegraphlegend$ = "Pristine"; // Comment field (graph legend)
			
		
		switch (%(liquidtype$)) // Case study
			{
				case "ultrapure": // If the string is "ultrapure", write "ultrapure water" in the comment field
					liquidgraphlegend$ = "ultrapure water"; // Comment field (graph legend)
					break;
				
				case "town": // If the string is "town", write "town water" in the comment field
					liquidgraphlegend$ = "town water"; // Comment field (graph legend)
					break;
				
				case "pbuffer": // If the string is "phosphatebuffer", write "Phosphate buffer (pH="pHValue", "buffer concentration" "buffer concentration units")" in the comment field
					string pH$ = liquidinfo.GetToken(2,"-")$; // get the string, which shows the pH
					pH$ = pH.Substitute(".", ",", 0)$; // Substitute comma with dot
					string bufferconc$ = liquidinfo.GetToken(3,"-")$; // get the string, which shows the buffer concentration
					string bufferconcunits$ = liquidinfo.GetToken(4,"-")$; // get the string, which shows the buffer concentration
					liquidgraphlegend$ = "Phosphate buffer (pH=" pH$ + ", " + bufferconc$ + " " + bufferconcunits$; // Comment field (graph legend)
					break;
				
				default: // For all other strings, write "air" in the comment field
					liquidgraphlegend$ = "air"; // Comment field (graph legend)
					break;
			}
		
		switch (%(daysNo$)) // Case study
			{
				case "initial": // If the string is "initial", write "initial" in the comment field
					daysgraphlegend$ = "initial"; // Comment field (graph legend)
					break;
				
				case "1": // If the number is 1, use single form
					daysgraphlegend$ = "1 day"; // Comment field (graph legend)
					break;
				
				default: // For all other numbers, use plural form
					daysgraphlegend$ = "%(daysNo$) days"; // Comment field (graph legend)
					break;
			}
		
		switch (%(concunits$)) // Case study
			{
				case "gl": // If the string is "gl", write "g/l" in the comment field
					conunitslegend$ = "g/l"; // Comment field (graph legend)
					break;
				
				default: // For all other numbers, use plural form
					conunitslegend$ = "mg/ml"; // Comment field (graph legend)
					break;
			}

		string legend$ = "%(material$), %(concnumber$) %(conunitslegend$), %(additivegraphlegend$), %(liquidgraphlegend$), %(daysgraphlegend$)"; // Legend
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
		
			col(A)[L]$ = "Wavelength"; // Long name
			col(A)[U]$ = nm; // Units
			
			col(B)[L]$ = "Intensity"; // Long name
			col(B)[U]$ = AU; // Units
			col(B)[C]$ = legend$; // Comments
			
			col(C)[L]$ = "Normalized intensity"; // Long name
			col(C)[U]$ = AU; // Units
			col(C)[C]$ = legend$; // Comments
			col(C)[O]$ = "col(B)-min(col(B))";
		
			// Plot column
			range r1 = [%H]1!wcol(3);  // data range of column
			
			// Single I vs t graph
			win -a UVVIS;  // activate the graph window
			//page.active = nActive;  // activate the layer for plot
			layer.include(r1);  // plot in the active layer

			layer -a;  // rescale the layer
			layer -g; // Group the datasets in the layer to %(we$)to-color increment
			win -a %(previousworkbook$);  // activate the previous window (workbook)

	}
	
	win -a UVVIS;  // activate the graph window
	page.longname$= "%(batch$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(additive$)_%(liquidtype$)_%(liquidinfo$)_UV-VIS"; //this renames the active window (long name)
	win -r UVVIS %(material$)_%(additive$)_UVVIS; //this renames the active window (short name); //this renames the active window (short name)
	layer -gu; // Ungroup the datasets in the layer
	legend; // Update the legend
}
