// This script is used on text files exported by OPUS. It processes them so that they end up having, the absorbance at column B, the normalized absorbance at column C, and also fixes the longnames.
// This script is intended for OFETs and WG-OFETs.
// NOTE: First process the files in OPUS (atmospheric compensation, cutting, baseline correction), then export them as data point tables, then import them in Origin.

// Author: Dimitrios Simatos
// Version: 0.1
// Current status: Works well.
// Changes: Merged OFET and WG-OFET scripts.

[Main]
//uncomment following line to define functions using outside of this scope
//@global=1;
	

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	del -al *;// Delete all the local and session variables
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

	string templatepath$="C:\Users\Administrator\Documents\OriginLab\2018\User Files\Templates\"; // define the template path
	
	string GraphNameAbs$; // The long name of the Graph for the Absorbance plot of all FTIR spectra
	string TemplateNameAbs$; // The long name of the Graph Template for the Absorbance plot of all FTIR spectra
	string GraphNameSingleAbs$; // The long name of the Graph for the Absorbance plot of a single FTIR spectrum
	string TemplateNameSingleAbs$; // The long name of the Graph Template for the Absorbance plot of a single FTIR spectrum
	
	string GraphNameInt$; // The long name of the Graph for the Intensity plot of all FTIR spectra
	string TemplateNameInt$; // The long name of the Graph Template for the Intensity plot of all FTIR spectra
	string GraphNameSingleInt$; // The long name of the Graph for the Intensity plot of a single FTIR spectrum
	string TemplateNameSingleInt$; // The long name of the Graph Template for the Intensity plot of a single FTIR spectrum

	doc -ef LB { // loop over all workbooks in folder
		page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
		page.active = 1; // Switch to the first worksheet.
		
		string sheetname$=page.longname$; // Get the name of worksheet
		
		string batch$ = sheetname.GetToken(1,"_")$; // Get the string that shows the batch
		string method$ = sheetname.GetToken(2,"_")$; // Get the string that shows the experimental method (e.g. FTIR, CAS-FTIR)
		string architecture$ = sheetname.GetToken(3,"_")$; // Get the string that shows the architecture
		string material$ = sheetname.GetToken(4,"_")$; // Get the string that shows the material

		string concentration$ = sheetname.GetToken(5,"_")$; // Get the string that shows the concentration
		string concnumber$ = concentration.GetToken(1,"-")$; // Get the string that shows the concentration number
		string concunits$ = concentration.GetToken(2,"-")$; // Get the string that shows the concentration units

		string solvent$ = sheetname.GetToken(6,"_")$; // Get the string that shows the solvent content

		string annealing$ = sheetname.GetToken(7,"_")$; // Get the string that shows the additive

		string additive$ = sheetname.GetToken(8,"_")$; // Get the string that shows the additive
		string additivetype$ = additive.GetToken(1,"-")$; // Get the string that shows the additive type
		//string addthickness$ = additive.GetToken(2,"-")$; // Get the string that shows the additive thickness
		//string addthicknessunits$ = additive.GetToken(3,"-")$; // Get the string that shows the additive thickness units
		
		switch (%(architecture$)) // Case study
		{
			case "BGBC-OFET": // If the string is "BGBC-OFET"
				
				string dielectric$ = sheetname.GetToken(9,"_")$; // Get the string that shows the dielectric
				string dielectricconc$ = sheetname.GetToken(10,"_")$; // Get the string that shows the dielectric concentration or ratio
				
				string sampleNo$ = sheetname.GetToken(11,"_")$; // Get the string that shows the sample number
				
				string stepNo$ = sheetname.GetToken(12,"_")$; // Get the string that shows the step number in the cycling process
				string condition$ = sheetname.GetToken(13,"_")$; // Get the string that shows the conditions (air/type of liquid)
				string time$ = sheetname.GetToken(14,"_")$; // get the string, which shows the elapsed time
				
				string pressure$ = sheetname.GetToken(15,"_")$; // get the string, which shows the pressure
				string temperature$ = sheetname.GetToken(16,"_")$; // get the string, which shows the temperature
				string measNo$=sheetname.GetToken(17,"_")$; // Get the string that shows the measurement number
				string meastype$=sheetname.GetToken(18,"_")$; // Get the string "A", "S" or "B", which shows if the curve is an "Absorbance" spectrum or a "Sample"/"Background" intensity spectrum
				string Vg$=sheetname.GetToken(19,"_")$; // Get the string that shows the gate voltage
				string Vd$=sheetname.GetToken(20,"_")$; // Get the string that shows the drain voltage
				Vd$=Vd.GetToken(1,".")$; // Remove ".txt" from the drain voltage
				
				
				GraphNameAbs$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_A_W_all";
				TemplateNameAbs$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$).otpu";
				GraphNameSingleAbs$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(stepNo$)_%(condition$)_%(time$)_%(pressure$)_%(temperature$)_%(measNo$)_%(Vg$)_%(Vd$)_A_W";
				TemplateNameSingleAbs$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$).otpu";
				
				GraphNameInt$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_I_W_all";
				TemplateNameInt$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$).otpu";
				GraphNameSingleInt$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$)_%(sampleNo$)_%(stepNo$)_%(condition$)_%(time$)_%(pressure$)_%(temperature$)_%(measNo$)_%(Vg$)_%(Vd$)_I_W";
				TemplateNameSingleInt$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(dielectric$)_%(dielectricconc$).otpu";
				
				break;
				
				
			case "SGBC-EGOFET": // If the string is "SGBC-EGOFET"
				string sampleNo$ = sheetname.GetToken(9,"_")$; // Get the string that shows the sample number
				
				string stepNo$ = sheetname.GetToken(10,"_")$; // Get the string that shows the step number in the cycling process
				string condition$ = sheetname.GetToken(11,"_")$; // Get the string that shows the conditions (air/type of liquid)
				string time$ = sheetname.GetToken(12,"_")$; // get the string, which shows the elapsed time
				
				string pressure$ = sheetname.GetToken(13,"_")$; // get the string, which shows the pressure
				string presNo$ = pressure.GetToken(1,"-")$; // get the string, which shows the pressure No
				string presUnits$ = pressure.GetToken(2,"-")$; // get the string, which shows the pressure units
				string temperature$ = sheetname.GetToken(14,"_")$; // get the string, which shows the temperature
				string measNo$=sheetname.GetToken(15,"_")$; // Get the string that shows the measurement number
				string meastype$=sheetname.GetToken(16,"_")$; // Get the string "A", "S" or "B", which shows if the curve is an "Absorbance" spectrum or a "Sample"/"Background" intensity spectrum
				string Vg$=sheetname.GetToken(17,"_")$; // Get the string that shows the gate voltage
				string Vd$=sheetname.GetToken(18,"_")$; // Get the string that shows the drain voltage
				Vd$=Vd.GetToken(1,".")$; // Remove ".txt" from the drain voltage
				
				
				// Parameters
				string Rate$="none";
				string CycleLength$="800";
				
				
				GraphNameAbs$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(pressure$)_%(temperature$)_A_W_all";
				TemplateNameAbs$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min.otpu";
				GraphNameSingleAbs$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(stepNo$)_%(condition$)_%(time$)_%(pressure$)_%(temperature$)_%(measNo$)_%(Vg$)_%(Vd$)_A_W";
				TemplateNameSingleAbs$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min.otpu";
				
				GraphNameInt$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(pressure$)_%(temperature$)_I_W_all";
				TemplateNameInt$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min.otpu";
				GraphNameSingleInt$ = "%(batch$)_%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_%(sampleNo$)_%(stepNo$)_%(condition$)_%(time$)_%(pressure$)_%(temperature$)_%(measNo$)_%(Vg$)_%(Vd$)_I_W";
				TemplateNameSingleInt$ = "%(templatepath$)%(method$)_%(architecture$)_%(material$)_%(concentration$)_%(solvent$)_%(annealing$)_%(additive$)_rate_%(Rate$)_cycle_%(CycleLength$)-min.otpu";
				
				break;
				
			default: // For all other cases
				break;
		};
			
		
		string additivegraphlegend$; // This string will depend on "additive" and it will display the type of additive for the graph legend
		string condgraphlegend$; // This string will depend on "condition" and it will display the type of condition for the graph legend
		string timegraphlegend$; // This string will depend on "timeNo" and it will display the type of liquid for the graph legend
		//string minutesgraphlegend$; // This string will depend on "minutesNo" and it will display the number of minutes for the graph legend
		//string meastypegraphlegend$; // This string will depend on "meastype" and it will display the measurement type (sample or background intensity spectrum) for the graph legend
		
		string legend$;

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				// Case structures from filenames (used for legends).
				
				switch (%(concunits$)) // Case study
					{
						case "gl": // If the string is "gl", write "g/l" in the comment field
							conunitslegend$ = "g/l"; // Comment field (graph legend)
							break;
						
						default: // For all other numbers, use plural form
							conunitslegend$ = "mg/ml"; // Comment field (graph legend)
							break;
					}
					
				switch (%(additivetype$)) // Case study
					{
						case "Pristine": // If the string is "TCNQ", write "TCNQ" in the comment field
							additivegraphlegend$ = "Pristine"; // Comment field (graph legend)
							break;
						
						case "TCNQ": // If the string is "TCNQ", write "TCNQ" in the comment field
							additivegraphlegend$ = "+ TCNQ"; // Comment field (graph legend)
							break;
						
						case "F2TCNQ": // If the string is "F2TCNQ", write "F2TCNQ" in the comment field
							//string pH$ = condinfo.GetToken(1,"-")$; // get the string, which shows the pH
							additivegraphlegend$ = "+ F2TCNQ"; // Comment field (graph legend)
							break;
						
						case "SAM-1OCT-v": // If the string is "SAM-1OCT-v", write "1-Octanethiol (vapor)" in the comment field
							additivegraphlegend$ = "+ 1-Octanethiol (vapor)"; // Comment field (graph legend)
							break;
						
						case "SAM-1OCT-i": // If the string is "SAM-1OCT-i", write "1-Octanethiol (immersion)" in the comment field
							additivegraphlegend$ = "+ 1-Octanethiol (immersion)"; // Comment field (graph legend)
							break;
						
						case "SAM-TDF1OCT-v": // If the string is "SAM-TDF1OCT-v", write "3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (vapor)" in the comment field
							additivegraphlegend$ = "+ 3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (vapor)"; // Comment field (graph legend)
							break;
						
						case "SAM-TDF1OCT-i": // If the string is "SAM-TDF1OCT-i", write "3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (immersion)" in the comment field
							additivegraphlegend$ = "+ 3,3,4,4,5,5,6,6,7,7,8,8,8-Tridecafluoro-1-octanethiol (immersion)"; // Comment field (graph legend)
							break;
						
						default: // For all other strings, write "Pristine" in the comment field
							additivegraphlegend$ = "Pristine"; // Comment field (graph legend)
							break;
					}
							
				switch (%(condition$)) // Case study
					{
						case "DI-H2O": // If the string is "ultrapure", write "ultrapure water" in the comment field
							condgraphlegend$ = "DI water"; // Comment field (graph legend)
							break;
						
						case "up-H2O": // If the string is "ultrapure", write "ultrapure water" in the comment field
							condgraphlegend$ = "Ultrapure water"; // Comment field (graph legend)
							break;
						
						case "t-H2O": // If the string is "town", write "town water" in the comment field
							condgraphlegend$ = "Town water"; // Comment field (graph legend)
							break;
						
						case "ss": // If the string is "town", write "town water" in the comment field
							condgraphlegend$ = "Saline solution"; // Comment field (graph legend)
							break;
						
						case "pbuffer": // If the string is "phosphatebuffer", write "Phosphate buffer (pH="pHValue", "buffer concentration" "buffer concentration units")" in the comment field
							string pH$ = condition.GetToken(2,"-")$; // get the string, which shows the pH
							pH$ = pH.Substitute(".", ",", 0)$; // Substitute comma with dot
							string bufferconcentration$ = condition.GetToken(3,"-")$; // get the string, which shows the buffer concentration
							string bufferconcunits$ = condition.GetToken(4,"-")$; // get the string, which shows the buffer concentration
							condgraphlegend$ = "Phosphate buffer (pH= %(pH$), %(bufferconcentration$) %(bufferconcunits$)"; // Comment field (graph legend)
							break;
							
						default: // For all other strings, write the condition string in the comment field
							condgraphlegend$ = condition$; // Comment field (graph legend)
							break;
					}
						
					if (time$ != "initial")
					{
						string timeNo$ = time.GetToken(1,"-")$; // get the string, which shows the time (number)
						string timeunits$ = time.GetToken(2,"-")$; // get the string, which shows the time units
						
						switch (%(timeunits$)) // Case study
							{
								
								case "sec": // If the units are "min", change them to "minutes" for the legend
									timegraphlegend$ = "%(timeNo$) seconds"; // Comment field (graph legend)
									break;
									
								case "min": // If the units are "min", change them to "minutes" for the legend
									timegraphlegend$ = "%(timeNo$) minutes"; // Comment field (graph legend)
									break;
									
								case "h": // If the units are "min", change them to "minutes" for the legend
									timegraphlegend$ = "%(timeNo$) hours"; // Comment field (graph legend)
									break;
								
								default: // For all other strings, write the extracted field in the comment field
									timegraphlegend$ = timeNo$ + timeunits$; // Comment field (graph legend)
									break;
							}
						
						if (timeNo$ == "1")
							timegraphlegend.TrimRight("s"); // If the number is 1, use single form
						
					};
					else
						timegraphlegend$ = time$; // Legend
						
							
						
					//string legend$ = "%(material$) %(concnumber$) %(conunitslegend$) %(additivegraphlegend$), %(condgraphlegend$), %(timegraphlegend$), %(minutesgraphlegend$), %(modegraphlegend$), %(intimegraphlegend$)"; // Legend
					//string legend$ = "%(condgraphlegend$), %(timegraphlegend$), Meas. No %(measNo$), Vg=%(Vg$), Vd=%(Vd$), %(pressure$), %(temperature$)"; // Legend
					string legend$ = "%(condgraphlegend$), %(timegraphlegend$), Meas. %(measNo$), Vg=%(Vg$), Vd=%(Vd$)"; // Legend
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				
				string previousworkbook$=%H; // Get the name of the previous window
				
				if (meastype$ == "A") // if this is an absorbance spectrum then
				{
						wks.name$=method$; // Change the sheet name to the method used (e.g. CAS-FTIR)
						wks.ncols=3; // set total column number to 3
						wks.colwidth = 12;// set all col width to 12
						
						
						// Write long name, units, comments, and parameters of columns
						col(A)[L]$ = "Wavenumber"; // Long name
						col(A)[U]$ = "cm\+(-1)"; // Units
						col(B)[L]$ = "Absorbance"; // Long name
						col(B)[U]$ = AU; // Units
						col(C)[L]$ = "Transmittance"; // Long name
						col(C)[U]$ = AU; // Units
						col(C)[O]$ = "(1/log(2-col(B)))/100";
						
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						// Column legends
						
						col(B)[C]$ = legend$;
						col(C)[C]$ = col(B)[C]$; // Comment field (graph legend)
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						// Plot graphs
						// Set range variables
						range rabs = [%H]1!col(B);  // data range of Absorbance column
						range rtrans = [%H]1!col(C);  // data range of Transmittance column
						
						// Plot FTIR spectrum (global)
						string graphname$=GraphNameAbs$;
						if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							// Check if the template exists, otherwise, use a generic one
							string Template$=TemplateNameAbs$; // This is the template path
							if (exist(Template$)!=-1)// if the template exists
								win -t p "%(Template$)"; // create a graph window using template
							else
								win -t p "%(templatepath$)Generic_%(method$).otpu"; // create a graph window using a generic template
							
							page.longname$= graphname$; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
						};
						else
							win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
							
						page.active = 1; // activate Layer 1
						layer.include(rabs);  // plot in the active layer
						layer -a;  // rescale the layer
						layer -g; // Group the datasets in the layer to auto-color increment
						layer -gu; // Ungroup the datasets in the layer
						legend; // Update the legend
						
						
						// Plot FTIR spectrum (single)
						string graphname$=GraphNameSingleAbs$;
						if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							// Check if the template exists, otherwise, use a generic one
							string Template$=TemplateNameSingleAbs$; // This is the template path
							if (exist(Template$)!=-1)// if the template exists
								win -t p "%(Template$)"; // create a graph window using template
							else
								win -t p "%(templatepath$)Generic_%(method$)_single.otpu"; // create a graph window using a generic template
							
							page.longname$= graphname$; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
						};
						else
							win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
							
						page.active = 1; // activate Layer 1
						layer.include(rabs);  // plot in the active layer
						layer -a;  // rescale the layer
						layer -g; // Group the datasets in the layer to auto-color increment
						layer -gu; // Ungroup the datasets in the layer
						legend; // Update the legend
					}						
				
				//-----------------------------------------------------------------------------------------------------------------------------------------------------------
				else // if this is an intensity spectrum (sample or background)
				{	
						switch (%(meastype$)) // Case study
							{
								case "S": // If the number is 1, use single form
									meastypegraphlegend$ = "Sample"; // Comment field (graph legend)
									break;
									
								case "B": // If the number is 1, use single form
									meastypegraphlegend$ = "Background"; // Comment field (graph legend)
									break;
									
								default: // For all other numbers, use plural form
									minutesgraphlegend$ = ""; // Comment field (graph legend)
									break;
							}
							
						string legend$ = "%(condgraphlegend$), %(timegraphlegend$), Meas. %(measNo$), Vg=%(Vg$), Vd=%(Vd$), %(meastypegraphlegend$)"; // Legend
						
						wks.name$=method$; // Change the sheet name to the method used (e.g. CAS-FTIR)
						wks.colwidth = 12;// set all col width to 12
						
						
						// Write long name, units, comments, and parameters of columns
						col(A)[L]$ = "Wavenumber"; // Long name
						col(A)[U]$ = "cm\+(-1)"; // Units
						col(B)[L]$ = "Intensity"; // Long name
						col(B)[U]$ = AU; // Units
						
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						// Column legends
						
						col(B)[C]$ = legend$;
						
						//-----------------------------------------------------------------------------------------------------------------------------------------------------------
						// Plot graphs
						// Set range variables
						range rint = [%H]1!col(B);  // data range of Intensity column
						
						// Plot FTIR spectrum (global)
						string graphname$=GraphNameInt$;
						if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							// Check if the template exists, otherwise, use a generic one
							string Template$=TemplateNameInt$; // This is the template path
							if (exist(Template$)!=-1)// if the template exists
								win -t p "%(Template$)"; // create a graph window using template
							else
								win -t p "%(templatepath$)Generic_%(method$).otpu"; // create a graph window using a generic template
							
							page.longname$= graphname$; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
						};
						else
							win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
							
						page.active = 1; // activate Layer 1
						layer.include(rint);  // plot in the active layer
						layer -a;  // rescale the layer
						layer -g; // Group the datasets in the layer to auto-color increment
						layer -gu; // Ungroup the datasets in the layer
						legend; // Update the legend
						
						
						// Plot FTIR spectrum (single)
						string graphname$=GraphNameSingleInt$;
						if(exist(%(uid2name(range2uid(["%(graphname$)"]))$))==0) // if there is no graph for this type of measurement then create a new graph
						{
							// Check if the template exists, otherwise, use a generic one
							string Template$=TemplateNameSingleInt$; // This is the template path
							if (exist(Template$)!=-1)// if the template exists
								win -t p "%(Template$)"; // create a graph window using template
							else
								win -t p "%(templatepath$)Generic_%(method$).otpu"; // create a graph window using a generic template
							
							page.longname$= graphname$; //this renames the active window (long name)
							page.title = 1;  // Let the workbook title shows Long Name only (1 = Long Name, 2 = short name, 3 = both)
						};
						else
							win -a %(uid2name(range2uid(["%(graphname$)"]))$); // activate the graph window
							
						page.active = 1; // activate Layer 1
						layer.include(rint);  // plot in the active layer
						layer -a;  // rescale the layer
						layer -g; // Group the datasets in the layer to auto-color increment
						layer -gu; // Ungroup the datasets in the layer
						legend; // Update the legend
				};
			};
		};